<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>frida on ikuamike</title><link>https://blog.ikuamike.io/tags/frida/</link><description>Recent content in frida on ikuamike</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Michael Ikua</copyright><lastBuildDate>Wed, 28 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/frida/index.xml" rel="self" type="application/rss+xml"/><item><title>RaziCTF 2020 WriteUp: Chasing a lock</title><link>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</guid><description/><content>&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>I recently participated in &lt;a href="https://ctftime.org/event/1167" target="_blank" rel="noopener">RaziCTF 2020&lt;/a>
with team
&lt;a href="https://ctftime.org/team/112710" target="_blank" rel="noopener">fr344aks&lt;/a>
and I was able to solve an android challenge that I thought
needs a proper writeup.
I was able to reverse engineer the provided app and use frida for dynamic analysis for a quick win.&lt;/p>
&lt;h3 id="challenge-description">Challenge Description:&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot1.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>I first installed the app in my genymotion emulator to see the basic functionality. There is a padlock icon
constantly changing position on the screen and text at the bottom that says &lt;code>20000 to break the lock&lt;/code>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot2.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>When I click on the padlock the number decreases by 1. This is definitely chasing a lock as the challenge name.&lt;/p>
&lt;p>The goal seems pretty straightforward, we need to get the value to zero to get the flag. Now to decompile the app and see if we
can find a way. Like my previous writeup, I&amp;rsquo;ll use jadx-gui.&lt;/p>
&lt;p>From the AndroidManifest.xml we get the MainActivity that is loaded when the app starts.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot3.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>Looking at the MainActivity code we see a switcher object being initialized just before the if statement that does some
check before displaying the flag. The switcher object has a method &lt;code>run&lt;/code> that takes in a value &lt;code>i&lt;/code> and the output is checked
if it&amp;rsquo;s not null and then the flag is displayed.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot4.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>Let&amp;rsquo;s look at run method in the switcher class as it&amp;rsquo;s output determines whether the flag is displayed.
In the switcher code we can see the method &lt;code>run&lt;/code>. Instead of trying to figure out what each line does, I saw it easier to just hook into
this method and manipulate the &lt;code>i&lt;/code> value, which at this point I believe is the 20000 value.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot5.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>I found two ways to solve this with frida, the run method was actually the one returning the flag:&lt;/p>
&lt;p>First one is to hook into the method and change the input value &lt;code>i&lt;/code> as it gets called.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">perform&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>;
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hooking...&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">run&lt;/span>.&lt;span style="color:#a6e22e">overload&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;int&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">implementation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">x&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Original Input: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Original return: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>)
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Modified Input: 0&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Modified return: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>;
};
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When I click on the padlock in the app, the flag is given.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot6.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>Second one is to just initialize the switcher object ourselves and call the run method directly with our input without hooking.
This way I don&amp;rsquo;t need to interact with the app.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">perform&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">switcherInstance&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span>.&lt;span style="color:#a6e22e">$new&lt;/span>();
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Flag: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">switcherInstance&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>));
});
&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot7.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>&lt;code>Flag: RaziCTF{IN_HATE_0F_RUNN!NG_L0CK5}&lt;/code>&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>This was a good learning experience for me especially the second part which is quicker and has less code.&lt;/p>
&lt;p>You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p>
&lt;p>Github: &lt;a href="https://github.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p></content></item></channel></rss>