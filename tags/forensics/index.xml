<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics on</title><link>https://blog.ikuamike.io/tags/forensics/</link><description>Recent content in Forensics on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 11 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>SheHacksKE HackFest 2021 CTF WriteUp</title><link>https://blog.ikuamike.io/posts/2021/hackfest-2021-ctf/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/hackfest-2021-ctf/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/scoreboard.png" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/shehacks_ke" target="_blank" rel="noopener">@SheHacksKE&lt;/a>
held their yearly hackfest event in October 2021 but it was online this year. The event included a CTF
that was facilitated by &lt;a href="https://twitter.com/eKRAALhub" target="_blank" rel="noopener">@eKRAALhub&lt;/a>
. &lt;a href="https://twitter.com/mystic_kev" target="_blank" rel="noopener">@mystic_kev&lt;/a>
and I participated in the CTF as
NoPwnNoGain and won it by completed all challenges. This writeup is for the challenges I was able to solve.&lt;/p>
&lt;h2 id="challenges-firmware">Challenges: Firmware&lt;/h2>
&lt;h3 id="1-camera-kernel">1. Camera Kernel&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel1.png" class="center" style="border-radius: 8px;" />
&lt;p>The provided file when extracted contains a bin file that is a linux image.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel2.png" class="center" style="border-radius: 8px;" />
&lt;p>By using binwalk to analyse the file we see the different file sections.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>binwalk demo.bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The kernel starts at the second section indicated as the &lt;strong>OS Kernel Image&lt;/strong> and includes the &lt;strong>lzma compressed
data&lt;/strong> to end at the beginning of the squashfs filesystem.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel3.png" class="center" style="border-radius: 8px;" />
&lt;p>To provide the flag in decimal we minus the header that identifies the firmware image.&lt;/p>
&lt;pre tabindex="0">&lt;code>2097216 - 64 = 2097152
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>Hackfest{2097152}&lt;/code>&lt;/p>
&lt;h3 id="2-backups">2. Backups&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel4.png" class="center" style="border-radius: 8px;" />
&lt;p>Based on the binwalk output we can take the root filesystem as the first squashfs filesystem. We can calculate the size as below.&lt;/p>
&lt;pre tabindex="0">&lt;code>5570624 - 2097216 = 3473408
&lt;/code>&lt;/pre>&lt;p>To extract it we can use &lt;strong>dd&lt;/strong> command line tool then mount the filesystem.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>demo.bin skip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2097216&lt;/span> count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3473408&lt;/span> bs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> of&lt;span style="color:#f92672">=&lt;/span>squashfs1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo mount -t squashfs squashfs1 mount1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel5.png" class="center" style="border-radius: 8px;" />
&lt;p>On mounting the filesystem we see the backup folders.&lt;/p>
&lt;p>Flag: &lt;code>Hackfest{backupa,backupd,backupk}&lt;/code>&lt;/p>
&lt;h3 id="3-semiconductor">3. Semiconductor&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel6.png" class="center" style="border-radius: 8px;" />
&lt;p>By looking around the root filesystem we can read the hostname of the device this image was retrieved from.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel7.png" class="center" style="border-radius: 8px;" />
&lt;p>Searching this name on google shows this is a semiconductor company confirming this is the flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel8.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{Ingenic}&lt;/code>&lt;/p>
&lt;h3 id="4-leaky-developer">4. Leaky Developer&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel12.png" class="center" style="border-radius: 8px;" />
&lt;p>The rest of the filesystem is inside the jffs2 filesystem that starts offset &lt;strong>6225984&lt;/strong> until the end.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel13.png" class="center" style="border-radius: 8px;" />
&lt;p>To extract it we can carve it out using dd.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>demo.bin skip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">6225984&lt;/span> bs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> of&lt;span style="color:#f92672">=&lt;/span>jffs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To mount the jffs2 file system, I found the below script to be useful.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>set -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo usage: $0 jffs2_image directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$2&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo usage: $0 jffs2_image directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># modprobe mtdcore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modprobe jffs2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SIZE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>du -h -k $1 | cut -f 1&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SIZE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">8192&lt;/span> &lt;span style="color:#75715e"># 65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ESIZE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$((&lt;/span> $SIZE &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUFS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">512&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modprobe mtdram &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> total_size&lt;span style="color:#f92672">=&lt;/span>$SIZE &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> erase_size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>ESIZE&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>&lt;span style="color:#75715e"># writebuf_size=$BUFS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># modprobe mtdchar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modprobe mtdblock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep .25
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>$1 of&lt;span style="color:#f92672">=&lt;/span>/dev/mtd0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mount -t jffs2 /dev/mtdblock0 $2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once we mount the filesystem as below, there&amp;rsquo;s a mount.sh file inside the bin directory that shows the folder in the
home directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel14.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{xuxuequan}&lt;/code>&lt;/p>
&lt;h3 id="5-root">5. Root&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel10.png" class="center" style="border-radius: 8px;" />
&lt;p>The shadow file in the root filesystem contains the root hash.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel9.png" class="center" style="border-radius: 8px;" />
&lt;p>I tried to crack this hash using the usual rockyou wordlist but got nothing so I jumped to google to see if I get any
hits.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel11.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{ismart12}&lt;/code>&lt;/p>
&lt;h3 id="6-extras">6. Extras&lt;/h3>
&lt;p>The above solutions were after some analysis of how I believe the challenges we meant to be solved. Initially I did the
basic option of extracting the image using binwalk.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>binwalk -e demo.bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this and looking through the resulting directories and some google searches later I found this post that allowed me to quickly answer
the questions.&lt;/p>
&lt;pre tabindex="0">&lt;code>https://research.nccgroup.com/2020/07/31/lights-camera-hacked-an-insight-into-the-world-of-popular-ip-cameras/
&lt;/code>&lt;/pre>&lt;h3 id="7-the-rest">7. The Rest&lt;/h3>
&lt;p>The rest of the challenges in this category were solved by Kelvin.&lt;/p>
&lt;pre tabindex="0">&lt;code>https://github.com/mystickev/CTFwriteups/tree/Writeups/shehacks-2021
&lt;/code>&lt;/pre>&lt;h2 id="challenges-protocols">Challenges: Protocols&lt;/h2>
&lt;h3 id="1-subscriber">1. Subscriber&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel15.png" class="center" style="border-radius: 8px;" />
&lt;p>First thing I did was run nmap against the host and port to figure out what the service is running.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel16.png" class="center" style="border-radius: 8px;" />
&lt;p>On discovering this is mqtt, I downloaded &lt;a href="https://github.com/thomasnordquist/MQTT-Explorer/releases" target="_blank" rel="noopener">mqtt explorer&lt;/a>
.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel17.png" class="center" style="border-radius: 8px;" />
&lt;p>Once we connect we start receiving messages, after a while the flag is sent as a message.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel18.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{Howdy Friend}&lt;/code>&lt;/p>
&lt;h3 id="2-hardcoded">2. Hardcoded&lt;/h3>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel19.png" class="center" style="border-radius: 8px;" />
&lt;p>The provided zip file has only two files inside.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel20.png" class="center" style="border-radius: 8px;" />
&lt;p>The config.php is somewhat encrypted.&lt;/p>
&lt;p>Using this google search I found an article with the decryption method.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel21.png" class="center" style="border-radius: 8px;" />
&lt;pre tabindex="0">&lt;code>https://blog.securityevaluators.com/terramaster-nas-vulnerabilities-discovered-and-exploited-b8e5243e7a63
&lt;/code>&lt;/pre>&lt;p>By running the below command we can get the email from the config.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>openssl aes-256-cbc -d -K &lt;span style="color:#ae81ff">3834326434326239383837366635383166306466626566623063643262356333&lt;/span> -iv &lt;span style="color:#ae81ff">0&lt;/span> -in config.php &amp;gt; config.php.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/shehacks-hackfest-2021/kernel22.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>Hackfest{kalcaddle@qq.com}&lt;/code>&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This was a nice CTF with some not so common categories. Playing with dd was a learning process for me, I haven&amp;rsquo;t used it much before.&lt;/p>
&lt;p>Here are the challenge files incase the CTF site goes down.&lt;/p>
&lt;p>&lt;a href="https://blog.ikuamike.io/files/shehacks-hackfest-2021/demo.zip" target="_blank" rel="noopener">demo.zip&lt;/a>
&lt;/p>
&lt;p>&lt;a href="https://blog.ikuamike.io/files/shehacks-hackfest-2021/terramaster.zip" target="_blank" rel="noopener">terramaster.zip&lt;/a>
&lt;/p></content></item></channel></rss>