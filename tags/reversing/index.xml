<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reversing on</title><link>https://blog.ikuamike.io/tags/reversing/</link><description>Recent content in Reversing on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/reversing/index.xml" rel="self" type="application/rss+xml"/><item><title>CyberSpaceKenya CTF: ZuluMeats3</title><link>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</guid><description>I recently worked on a CTF challenge by CyberSpace Kenya which I ended up winning. This is a writeup on how I solved the challenge. We were provided with an android app to reverse engineer and submit 3 flags.
Flag 3 I haven&amp;rsquo;t done tons of mobile app reverse engineering but as I was learning about the subject in previous challenges I found this 2-step approach to work well:
Extracting the apk contents with apktool Reversing the app code with jadx-gui Using apktool is pretty simple just run this command on the apk:</description><content>&lt;p>I recently worked on a CTF challenge by &lt;a href="https://twitter.com/CyberSpaceKenya" target="_blank" rel="noopener">CyberSpace Kenya&lt;/a>
which I ended up winning. This is a writeup on how I solved the challenge. We were provided with an android app to reverse engineer and submit 3 flags.&lt;/p>
&lt;h2 id="flag-3">Flag 3&lt;/h2>
&lt;p>I haven&amp;rsquo;t done tons of mobile app reverse engineering but as I was learning about the subject in previous challenges I found this 2-step approach to work well:&lt;/p>
&lt;ul>
&lt;li>Extracting the apk contents with apktool&lt;/li>
&lt;li>Reversing the app code with jadx-gui&lt;/li>
&lt;/ul>
&lt;p>Using apktool is pretty simple just run this command on the apk:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt; apktool d cyberspace-ctf.apk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This generates files in a folder cyberspace-ctf as below:&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── AndroidManifest.xml
├── apktool.yml
├── assets
├── lib
├── original
├── res
├── smali
└── unknown
&lt;/code>&lt;/pre>&lt;p>Checking the AndroidManifest.xml and res/values/strings.xml doesn&amp;rsquo;t reveal any flag. Usually grepping recursively through the apk files for interesting names would hint at something. After a few tries with the words flag, flag1, flag2, flag3 I got some interesting output.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf1.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>Without much thought I opened jadx to find more mentions of that ValidateFlag3 and found the code.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf2.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>Reading through the code I was able to figure out that the validate function does the following:&lt;/p>
&lt;ol>
&lt;li>takes our input&lt;/li>
&lt;li>xor encrypts it with a key(which is generated by getKey() function)&lt;/li>
&lt;li>base64 encodes it&lt;/li>
&lt;li>checks if it is equal to the hardcoded flag3.&lt;/li>
&lt;/ol>
&lt;p>From previous experience I know that with xor encryption if you have the key and the encrypted data getting the plain text output is simple. Let me illustrate:&lt;/p>
&lt;pre tabindex="0">&lt;code>encrypted = key ^ plaintext
plaintext = key ^ encrypted
&lt;/code>&lt;/pre>&lt;p>Getting the code to work in java isn&amp;rsquo;t as easy so I decided to use python and script the solution.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hUZAf9gFIARRFTAvKRDs8A==&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gp9jPELztMsd51Ih81gO0Q==&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;RJ9qOOqa7pAinT19vyuQRHOGSi3FnPW5La0BYb4tnw==&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data1 &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(key1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data2 &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(key2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(data2)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#f92672">.&lt;/span>append(data1[i] &lt;span style="color:#f92672">^&lt;/span> data2[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decodedflag &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(flag3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>encryptedFlag &lt;span style="color:#f92672">=&lt;/span> input
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(encryptedFlag)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> decodedflag&lt;span style="color:#f92672">.&lt;/span>append(encryptedFlag[i] &lt;span style="color:#f92672">^&lt;/span> key[i &lt;span style="color:#f92672">%&lt;/span> len(key)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#f92672">=&lt;/span> [chr(s) &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> decodedflag]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(b))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag 3: &lt;code>CFI{plz_no_secret_in_java_code}&lt;/code>&lt;/p>
&lt;p>Since I found flag3 first I must have missed some stuff.&lt;/p>
&lt;h2 id="flag-1">Flag 1&lt;/h2>
&lt;p>Refering back to my earlier screenshot, after performing the grep there&amp;rsquo;s some base64 encoded data which I should have been more keen to look at!&lt;/p>
&lt;p>base64:&lt;/p>
&lt;pre tabindex="0">&lt;code>Q1NfS0V7YmFzZTY0X2VuY29kaW5nX2lzX25vdF90aGF0X3NlY3VyZX0=
&lt;/code>&lt;/pre>&lt;p>Flag 1: &lt;code>CS_KE{base64_encoding_is_not_that_secure}&lt;/code>&lt;/p>
&lt;h2 id="flag-2">Flag 2&lt;/h2>
&lt;p>Now flag 2 was the last to find. Since most of the clues we have been finding were in that &lt;code>assets/index.android.bundle&lt;/code> file let me have a look at it.&lt;/p>
&lt;p>&lt;del>Something I noted was that jadx didn’t find this file, that why the approach to use two tools is good IMO.&lt;/del> A friend of mine has pointed out that it was actually there under Resources/assets on the jadx ui, nevertheless using two or more tools for analysis is still a good practice IMO. There is a lot of code in this file that is not easily readable, so I just googled what this file is.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf3.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>I found that this file contains minified-javascript, it is created when an android app is developed using react. We already saw mentions of react when reading the code in jadx.&lt;/p>
&lt;p>Reading the code in it&amp;rsquo;s minified form isn&amp;rsquo;t easy so js-beautifier to the rescue. I then opened the readable version in vs code and searched for the validateflag function again.&lt;/p>
&lt;p>I landed here and we can clearly see the function that contained the base64 and the the other one that called flag3, due to their order flag 2 is what is left.&lt;/p>
&lt;img src="https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf4.png" alt="cyberspacectf" class="center" style="border-radius: 8px;" />
&lt;p>I took the same approach to porting the code to python as it is easier for me to work with. I had to do a bit of googling to understand the js flow but came up with this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> r &lt;span style="color:#f92672">in&lt;/span> range(len(n)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> r:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">-=&lt;/span> len(n) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u &lt;span style="color:#f92672">=&lt;/span> ord(n[r]) &lt;span style="color:#f92672">+&lt;/span> t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#f92672">.&lt;/span>append(str(u))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the end, the output of the function is checked if it is equal to that list of numbers which is a hex representation of characters. Instead of trying to undo the transformation that was going on in the function where they add 13&amp;hellip; which I tried for a few hours and failed, better to bruteforce all possibilities.&lt;/p>
&lt;p>I came up with this script for that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">64&lt;/span>,&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#ae81ff">78&lt;/span>,&lt;span style="color:#ae81ff">141&lt;/span>,&lt;span style="color:#ae81ff">124&lt;/span>,&lt;span style="color:#ae81ff">124&lt;/span>,&lt;span style="color:#ae81ff">123&lt;/span>,&lt;span style="color:#ae81ff">151&lt;/span>,&lt;span style="color:#ae81ff">144&lt;/span>,&lt;span style="color:#ae81ff">141&lt;/span>,&lt;span style="color:#ae81ff">134&lt;/span>,&lt;span style="color:#ae81ff">166&lt;/span>,&lt;span style="color:#ae81ff">146&lt;/span>,&lt;span style="color:#ae81ff">158&lt;/span>,&lt;span style="color:#ae81ff">148&lt;/span>,&lt;span style="color:#ae81ff">172&lt;/span>,&lt;span style="color:#ae81ff">158&lt;/span>,&lt;span style="color:#ae81ff">192&lt;/span>,&lt;span style="color:#ae81ff">166&lt;/span>,&lt;span style="color:#ae81ff">197&lt;/span>,&lt;span style="color:#ae81ff">176&lt;/span>,&lt;span style="color:#ae81ff">204&lt;/span>,&lt;span style="color:#ae81ff">190&lt;/span>,&lt;span style="color:#ae81ff">210&lt;/span>,&lt;span style="color:#ae81ff">209&lt;/span>,&lt;span style="color:#ae81ff">201&lt;/span>,&lt;span style="color:#ae81ff">206&lt;/span>,&lt;span style="color:#ae81ff">229&lt;/span>,&lt;span style="color:#ae81ff">204&lt;/span>,&lt;span style="color:#ae81ff">232&lt;/span>,&lt;span style="color:#ae81ff">228&lt;/span>,&lt;span style="color:#ae81ff">246&lt;/span>,&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#ae81ff">253&lt;/span>,&lt;span style="color:#ae81ff">234&lt;/span>,&lt;span style="color:#ae81ff">245&lt;/span>,&lt;span style="color:#ae81ff">258&lt;/span>,&lt;span style="color:#ae81ff">268&lt;/span>,&lt;span style="color:#ae81ff">250&lt;/span>,&lt;span style="color:#ae81ff">262&lt;/span>,&lt;span style="color:#ae81ff">282&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all &lt;span style="color:#f92672">=&lt;/span> string&lt;span style="color:#f92672">.&lt;/span>printable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">41&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> [a[i] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(a))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> r &lt;span style="color:#f92672">in&lt;/span> range(len(n)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> r:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">-=&lt;/span> len(n) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u &lt;span style="color:#f92672">=&lt;/span> ord(n[r]) &lt;span style="color:#f92672">+&lt;/span> t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#f92672">.&lt;/span>append(str(u))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(flag)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(len(all)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag[i] &lt;span style="color:#f92672">=&lt;/span> all[j]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">=&lt;/span> f(flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> out[i] &lt;span style="color:#f92672">==&lt;/span> str(k[i]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(flag))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag 2: &lt;code>CFI{obfuscated_javascript_is_not_secured}&lt;/code>&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>This was a good ctf for practising some code review. I also had never played around with an app made with react so that was something I learnt.&lt;/p>
&lt;p>I&amp;rsquo;d like to thank the CyberSpace Kenya team for putting up the challenge as well as &lt;a href="https://twitter.com/ZuluMeats" target="_blank" rel="noopener">ZuluMeats&lt;/a>
for the prize.&lt;/p>
&lt;p>You can find more challenges on their website: &lt;a href="https://ctf.cyberspace.co.ke" target="_blank" rel="noopener">https://ctf.cyberspace.co.ke&lt;/a>
&lt;/p>
&lt;p>For any questions you can reach me on Twitter.&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p>
&lt;p>Github: &lt;a href="https://github.com/ikuamike" target="_blank" rel="noopener">ikuamike&lt;/a>
&lt;/p></content></item></channel></rss>