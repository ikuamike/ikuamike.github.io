<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reversing on ikuamike</title>
    <link>https://blog.ikuamike.io/tags/reversing/</link>
    <description>Recent content in Reversing on ikuamike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Michael Ikua</copyright>
    <lastBuildDate>Fri, 12 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ikuamike.io/tags/reversing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CyberSpaceKenya CTF: ZuluMeats3</title>
      <link>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ikuamike.io/posts/2020/cyberspacectf-zulumeats3/</guid>
      <description></description>
      <content>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I recently worked on a CTF challenge by &lt;a href=&#34;https://twitter.com/CyberSpaceKenya&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CyberSpace Kenya&lt;/a&gt;

 which I ended up winning. This is a writeup on how I solved the challenge. We were provided with an android app to reverse engineer and submit 3 flags.&lt;/p&gt;
&lt;h2 id=&#34;flag-3&#34;&gt;Flag 3&lt;/h2&gt;
&lt;p&gt;I haven&amp;rsquo;t done tons of mobile app reverse engineering but as I was learning about the subject in previous challenges I found this 2-step approach to work well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extracting the apk contents with apktool&lt;/li&gt;
&lt;li&gt;Reversing the app code with jadx-gui&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using apktool is pretty simple just run this command on the apk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&amp;gt; apktool d cyberspace-ctf.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This generates files in a folder cyberspace-ctf as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── AndroidManifest.xml
├── apktool.yml
├── assets
├── lib
├── original
├── res
├── smali
└── unknown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checking the AndroidManifest.xml and res/values/strings.xml doesn&amp;rsquo;t reveal any flag. Usually grepping recursively through the apk files for interesting names would hint at something. After a few tries with the words flag, flag1, flag2, flag3 I got some interesting output.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf1.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Without much thought I opened jadx to find more mentions of that ValidateFlag3 and found the code.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf2.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;Reading through the code I was able to figure out that the validate function does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;takes our input&lt;/li&gt;
&lt;li&gt;xor encrypts it with a key(which is generated by getKey() function)&lt;/li&gt;
&lt;li&gt;base64 encodes it&lt;/li&gt;
&lt;li&gt;checks if it is equal to the hardcoded flag3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From previous experience I know that with xor encryption if you have the key and the encrypted data getting the plain text output is simple. Let me illustrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;encrypted = key ^ plaintext
plaintext = key ^ encrypted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Getting the code to work in java isn&amp;rsquo;t as easy so I decided to use python and script the solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

key1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hUZAf9gFIARRFTAvKRDs8A==&amp;#34;&lt;/span&gt;
key2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gp9jPELztMsd51Ih81gO0Q==&amp;#34;&lt;/span&gt;
flag3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RJ9qOOqa7pAinT19vyuQRHOGSi3FnPW5La0BYb4tnw==&amp;#34;&lt;/span&gt;

data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key1)
data2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key2)
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data2)):
    key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data1[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; data2[i])

decodedflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(flag3)
encryptedFlag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(encryptedFlag)):
    decodedflag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(encryptedFlag[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(key)])

b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [chr(s) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; decodedflag]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(b))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flag 3: &lt;code&gt;CFI{plz_no_secret_in_java_code}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since I found flag3 first I must have missed some stuff.&lt;/p&gt;
&lt;h2 id=&#34;flag-1&#34;&gt;Flag 1&lt;/h2&gt;
&lt;p&gt;Refering back to my earlier screenshot, after performing the grep there&amp;rsquo;s some base64 encoded data which I should have been more keen to look at!&lt;/p&gt;
&lt;p&gt;base64:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Q1NfS0V7YmFzZTY0X2VuY29kaW5nX2lzX25vdF90aGF0X3NlY3VyZX0=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Flag 1: &lt;code&gt;CS_KE{base64_encoding_is_not_that_secure}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;flag-2&#34;&gt;Flag 2&lt;/h2&gt;
&lt;p&gt;Now flag 2 was the last to find. Since most of the clues we have been finding were in that &lt;code&gt;assets/index.android.bundle&lt;/code&gt; file let me have a look at it.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Something I noted was that jadx didn’t find this file, that why the approach to use two tools is good IMO.&lt;/del&gt; A friend of mine has pointed out that it was actually there under Resources/assets on the jadx ui, nevertheless using two or more tools for analysis is still a good practice IMO. There is a lot of code in this file that is not easily readable, so I just googled what this file is.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf3.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I found that this file contains minified-javascript, it is created when an android app is developed using react. We already saw mentions of react when reading the code in jadx.&lt;/p&gt;
&lt;p&gt;Reading the code in it&amp;rsquo;s minified form isn&amp;rsquo;t easy so js-beautifier to the rescue. I then opened the readable version in vs code and searched for the validateflag function again.&lt;/p&gt;
&lt;p&gt;I landed here and we can clearly see the function that contained the base64 and the the other one that called flag3, due to their order flag 2 is what is left.&lt;/p&gt;

  &lt;img src=&#34;https://blog.ikuamike.io/img/cyberspacectf/cyberspacectf4.png&#34;  alt=&#34;cyberspacectf&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;I took the same approach to porting the code to python as it is easier for me to work with. I had to do a bit of googling to understand the js flow but came up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n):
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(n)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r:
            t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            t &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; len(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(n[r]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t
        e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(u))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the end, the output of the function is checked if it is equal to that list of numbers which is a hex representation of characters. Instead of trying to undo the transformation that was going on in the function where they add 13&amp;hellip; which I tried for a few hours and failed, better to bruteforce all possibilities.&lt;/p&gt;
&lt;p&gt;I came up with this script for that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string

k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;151&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;197&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;176&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;204&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;209&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;201&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;206&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;204&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;228&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;246&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;253&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;245&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;258&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;268&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;282&lt;/span&gt;]

all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;printable

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [a[i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a))]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n):
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(n)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; r:
            t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            t &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; len(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(n[r]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t
        e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(u))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; e

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(all)):
        flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; all[j]
        out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(flag)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; out[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; str(k[i]):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(flag))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flag 2: &lt;code&gt;CFI{obfuscated_javascript_is_not_secured}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was a good ctf for practising some code review. I also had never played around with an app made with react so that was something I learnt.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to thank the CyberSpace Kenya team for putting up the challenge as well as &lt;a href=&#34;https://twitter.com/ZuluMeats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZuluMeats&lt;/a&gt;

 for the prize.&lt;/p&gt;
&lt;p&gt;You can find more challenges on their website: &lt;a href=&#34;https://ctf.cyberspace.co.ke&#34;&gt;https://ctf.cyberspace.co.ke&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For any questions you can reach me on Twitter.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/ikuamike&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ikuamike&lt;/a&gt;

&lt;/p&gt;</content>
    </item>
    
  </channel>
</rss>
